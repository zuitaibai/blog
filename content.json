{"pages":[{"title":"","date":"2021-06-09T23:55:35.792Z","path":"README.html","text":"https://zuitaibai.github.io/blog"},{"title":"About","date":"2021-06-17T05:27:49.094Z","path":"about/index.html","text":""},{"title":"Categories","date":"2021-06-15T05:25:27.410Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2021-06-09T21:43:57.148Z","path":"tags/index.html","text":""}],"posts":[{"title":"Es各版本新特性一览","date":"2019-04-15T10:36:12.000Z","path":"2019/04/15/Ecmascript-2019-04-15-Es各版本新特性一览/","text":"简单罗列下，便于速查 .wikitable{background-color:#f8f9fa;color:#202122;margin:1em 0;border:1px solid #a2a9b1;border-collapse:collapse } .wikitable th, .wikitable td{border:1px solid #a2a9b1;padding:0.3em 0.4em } .wikitable th{background-color:#eaecf0;text-align:center; white-space: nowrap;padding-top:0.6em;padding-bottom:0.6em; } .wikitable tbody tr:nth-child(n+7) td:nth-child(-n+3){font-weight:bold;} .article-entry li:not(.toc-item){font-size:17px;line-height:1.8;color:#ff832b;} 土名 版本 年版 发表日期 与前版本的差异 1 1997.6 首版 2 1998.6 格式修正，以使得其形式与ISO/IEC16262国际标准一致 3 1999.12 强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变 4 放弃 由于关于语言的复杂性出现分歧，第4版本被放弃，其中的部分成为了第5版本及Harmony的基础 5 2009.12 新增“严格模式（strict mode）”，一个子集用作提供更彻底的错误检查,以避免结构出错。澄清了许多第3版本的模糊规范，并适应了与规范不一致的真实世界实现的行为。增加了部分新功能，如getters及setters，支持JSON以及在对象属性上更完整的反射 5.1 2011.6 ECMAScript标5.1版形式上完全一致于国际标准ISO/IEC 16262:2011。 Es 6 6 ES2015 2015.6 第 6 版，最早被称作是 ECMAScript 6（ES6），添加了类和模块的语法，其他特性包括迭代器，Python风格的生成器和生成器表达式，箭头函数，二进制数据，静态类型数组，集合（maps，sets 和 weak maps），promise，reflection 和 proxies。作为最早的 ECMAScript Harmony 版本，也被叫做ES6 Harmony。 Es 7 7 ES2016 2016.6 第 7 版，多个新的概念和语言特性[9] Es 8 8 ES2017 2017.6 第 8 版，多个新的概念和语言特性[10] Es 9 9 ES2018 2018.6 第 9 版，包含了异步循环，生成器，新的正则表达式特性和 rest/spread 语法。 Es10 10 ES2019 2019.6 第 10 版 Es11 11 ES2020 2020.6 第 11 版 Es12 12 ES2021 预2021.6 第 12 版 Es13 13 ES2022 预 第 13 版 Es6 （2015） 类（class） 模块化(ES Module) 箭头（Arrow）函数 函数参数默认值 模板字符串 解构赋值 延展操作符 对象属性简写 Promise let和const for…of Symbol 迭代器（Iterator）/ 生成器（Generator） Set / WeakSet Map / WeakMap Proxy / Reflect Regex对象的扩展 (u、y修饰符, .flags) Array.from、Array.of、[].copyWithin、[].find、[].findIndex、[].fill、[].entries、[].keys、[].values ES7（2016） Array.prototype.includes() 指数操作符 ** 带标签的模版字面量转义序列的规则 ES8（2017） async/await Object.values() Object.entries() String padding (padStart, padEnd) 函数参数列表结尾允许逗号 Object.getOwnPropertyDescriptors() (获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象。) SharedArrayBuffer对象 (用来表示一个通用的，固定长度的原始二进制数据缓冲区) Atomics对象 (提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作) ES9（2018） 异步迭代 (await可以和for…of循环一起使用，以串行的方式运行异步操作) for await (num of asyncGenerator()) {} 模板字符串允许嵌套支持常见转义序列，移除对 ECMAScript 在带标签的模版字符串中转义序列的语法限制 Promise.finally() Rest/Spread 属性 正则表达式 Unicode 转义 正则表达式命名捕获组 正则表达式反向断言 正则表达式dotAll模式 ES10（2019） Array.flat()和Array.flatMap() String.trimStart()和String.trimEnd() String.prototype.matchAll Symbol.prototype.description Object.fromEntries() 可选 Catch (catch 的参数可省略) Function.prototype.toString() (现在返回精确字符，包括空格和注释) ES11（2020） Nullish coalescing Operator (空值处理) let a = user.u ?? ‘bbb’; Optional chaining（可选链） let u1 = user.childer?.name; Promise.allSettled (返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果) 动态import export * as XX from ‘module’ 和 import * as XX from ‘module’ 新基本数据类型BigInt globalThis ES12（2021） replaceAll Promise.any WeakRefs FinalizationRegistry 逻辑运算符和赋值表达式 a ||= b, a &amp;&amp;= b, a ??= b 数字分隔符 const money = 1_000_000_000; ES13（2022） Class Fields (Private instance methods and accessors, Class Public Instance Fields &amp; Private Instance Fields, Static class fields and private static methods) RegExp Match Indices Top-level await 参考资料 esmacript finished github","tags":[{"name":"新特性","slug":"新特性","permalink":"https://zuitaibai.github.io/blog/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"},{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/tags/Ecmascript/"},{"name":"Es6","slug":"Es6","permalink":"https://zuitaibai.github.io/blog/tags/Es6/"},{"name":"Es7","slug":"Es7","permalink":"https://zuitaibai.github.io/blog/tags/Es7/"},{"name":"Es8","slug":"Es8","permalink":"https://zuitaibai.github.io/blog/tags/Es8/"},{"name":"Es9","slug":"Es9","permalink":"https://zuitaibai.github.io/blog/tags/Es9/"},{"name":"Es10","slug":"Es10","permalink":"https://zuitaibai.github.io/blog/tags/Es10/"},{"name":"Es11","slug":"Es11","permalink":"https://zuitaibai.github.io/blog/tags/Es11/"},{"name":"Es12","slug":"Es12","permalink":"https://zuitaibai.github.io/blog/tags/Es12/"},{"name":"Es13","slug":"Es13","permalink":"https://zuitaibai.github.io/blog/tags/Es13/"}],"categories":[{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/categories/Ecmascript/"}]},{"title":"ng实现计算器-绑定键盘","date":"2019-04-11T02:20:01.000Z","path":"2019/04/11/前端框架-angular-2019-4-11-ng实现计算器-绑定键盘/","text":"在此记录一个简单的计算器实现 github action try12。 样式：calculator.component.css 代码折叠 代码展开 1234567891011121314.calc&#123; position: fixed; right: 0; bottom: 0; z-index: 999; &#125;.chacha&#123; cursor: pointer; color:#fff; position:absolute;text-decoration:none; font-weight: 600;right:0;top:-17px;text-decoration:none;font-weight: 600;background: #555;padding: 0 2px; &#125;.calc td &#123; user-select: none; cursor: pointer;border-bottom:1px solid #fff; background-color:#303133; width: 70px; height: 44px; color: white; text-align: center; font-size: 20px; padding:0!important; &#125;.calc td ~ td&#123;border-left:1px solid #fff;&#125;.calc .td_orange &#123; background-color: #FA6F14; &#125;.calc .td_content_calc&#123; font-weight:normal;border-bottom:1px solid #fff; height: 44px; color: white; text-align: center; font-size: 20px; padding:0!important;&#125;.calc .td_content_calc:empty:before&#123; content: attr(placeholder); color:#8c8888; font-size:14px; &#125;.calc .td_content_calc:focus:before&#123; content:none; &#125;.calc td.active,.calc td:active&#123;background: blue;color:red;font-weight:bold;&#125;.bsbio&#123;background:#555;font-size:13px;font-weight:normal;height:30px;color:#eee;&#125; 模板：calculator.component.html 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839&lt;div class=&quot;calc&quot; tabindex=&quot;-1&quot; [hidden]=&quot;!calcShow&quot;&gt; &lt;span class=&quot;chacha&quot; (click)=&quot;evClose(false)&quot;&gt;×&lt;/span&gt; &lt;table align=&quot;center&quot; (click)=&quot;clickCalc($event)&quot; &gt; &lt;tr&gt; &lt;th class=&quot;td_orange td_content_calc&quot; colspan=&quot;5&quot; placeholder=&quot;支持键盘操作&quot; contenteditable=&quot;true&quot;&gt;&#123;&#123;calcStatus&#125;&#125;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td [class.active]=&quot;viewActObj.if7&quot; data-s=&quot;7&quot;&gt;7&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if8&quot; data-s=&quot;8&quot;&gt;8&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if9&quot; data-s=&quot;9&quot;&gt;9&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifA&quot; data-s=&quot;+&quot;&gt;+&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifB&quot; data-s=&quot;-&quot;&gt;-&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td [class.active]=&quot;viewActObj.if4&quot; data-s=&quot;4&quot;&gt;4&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if5&quot; data-s=&quot;5&quot;&gt;5&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if6&quot; data-s=&quot;6&quot;&gt;6&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifC&quot; data-s=&quot;*&quot;&gt;×&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifD&quot; data-s=&quot;/&quot;&gt;÷&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td [class.active]=&quot;viewActObj.if1&quot; data-s=&quot;1&quot;&gt;1&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if2&quot; data-s=&quot;2&quot;&gt;2&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.if3&quot; data-s=&quot;3&quot;&gt;3&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifE&quot; data-s=&quot;(&quot;&gt;(&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifF&quot; data-s=&quot;)&quot;&gt;)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td [class.active]=&quot;viewActObj.if0&quot; data-s=&quot;0&quot;&gt;0&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifG&quot; data-s=&quot;.&quot;&gt;.&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifH&quot; data-s=&quot;Backspace&quot;&gt;←&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifI&quot; data-s=&quot;Delete&quot; class=&quot;td_orange&quot;&gt;dels&lt;/td&gt; &lt;td [class.active]=&quot;viewActObj.ifJ&quot; data-s=&quot;Enter&quot; class=&quot;td_orange&quot;&gt;=&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th class=&quot;bsbio&quot; colspan=&quot;5&quot;&gt;&#123;&#123;calcInfo&#125;&#125;&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt; TS：calculator.component.ts 代码折叠 代码展开 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import &#123; Component, OnInit, HostListener, Input, Output, EventEmitter &#125; from &#x27;@angular/core&#x27;;import &#123; Calc &#125; from &#x27;./calc&#x27;;@Component(&#123; selector: &#x27;app-calculator&#x27;, templateUrl: &#x27;./calculator.component.html&#x27;, styleUrls: [&#x27;./calculator.component.css&#x27;]&#125;)export class CalculatorComponent implements OnInit &#123; // tslint:disable-next-line:no-input-rename @Input(&#x27;show&#x27;) calcShow = false; // tslint:disable-next-line:no-output-on-prefix @Output() onClose: EventEmitter&lt;boolean&gt; = new EventEmitter(); calcStatus = &#x27;&#x27;; calcInfo = &#x27;&#x27;; timer: any; calcc: Calc; viewActObj = &#123; if7: false, if8: false, if9: false, ifA: false, ifB: false, if4: false, if5: false, if6: false, ifC: false, ifD: false, if1: false, if2: false, if3: false, ifE: false, ifF: false, if0: false, ifG: false, ifH: false, ifI: false, ifJ: false &#125;; keysMap = &#123; 1: &#x27;1&#x27;, 2: &#x27;2&#x27;, 3: &#x27;3&#x27;, 4: &#x27;4&#x27;, 5: &#x27;5&#x27;, 6: &#x27;6&#x27;, 7: &#x27;7&#x27;, 8: &#x27;8&#x27;, 9: &#x27;9&#x27;, 0: &#x27;0&#x27;, &#x27;+&#x27;: &#x27;A&#x27;, &#x27;-&#x27;: &#x27;B&#x27;, &#x27;*&#x27;: &#x27;C&#x27;, &#x27;/&#x27;: &#x27;D&#x27;, &#x27;(&#x27;: &#x27;E&#x27;, &#x27;)&#x27;: &#x27;F&#x27;, &#x27;.&#x27;: &#x27;G&#x27;, Backspace: &#x27;H&#x27;, Delete: &#x27;I&#x27;, &#x27;=&#x27;: &#x27;J&#x27;, Enter: &#x27;J&#x27; &#125;; keys = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;0&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;.&#x27;]; keysAll = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;0&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;.&#x27;, &#x27;Backspace&#x27;, &#x27;Delete&#x27;, &#x27;Enter&#x27;]; constructor() &#123; this.calcc = new Calc(); &#125; ngOnInit() &#123; &#125; @HostListener(&#x27;document:keyup&#x27;, [&#x27;$event&#x27;]) writeInput(event: KeyboardEvent): void &#123; if (event.key === &#x27;J&#x27; &amp;&amp; event.shiftKey) &#123; this.evClose(this.calcShow = !this.calcShow); return; &#125; if (!this.calcShow) &#123; return; &#125; if (this.keysAll.find((v: string) =&gt; v === event.key)) &#123; this.calcViewAct(event.key); this.goCalc(event.key); &#125; &#125; goCalc(eventName: string) &#123; if (this.keys.find((v: string) =&gt; v === eventName)) &#123; let wd = eventName; if (wd === &#x27;*&#x27;) &#123; wd = &#x27;×&#x27;; &#125; if (wd === &#x27;/&#x27;) &#123; wd = &#x27;÷&#x27;; &#125; this.calcStatus += wd; return; &#125; switch (eventName) &#123; case &#x27;Backspace&#x27;: &#123; const len = this.calcStatus.length; if (len &gt;= 1) &#123; this.calcStatus = this.calcStatus.substring(0, len - 1); &#125; break; &#125; case &#x27;Delete&#x27;: this.calcStatus = &#x27;&#x27;; break; case &#x27;Enter&#x27; : &#123; if (this.calcStatus === &#x27;&#x27;) &#123; return; &#125; const pre = this.calcStatus; this.calcStatus = &#x27;&#x27; + this.calcc.parse(pre); this.calcInfo = pre + &#x27;=&#x27; + this.calcStatus; break; &#125; &#125; &#125; calcViewAct(str: string) &#123; clearTimeout(this.timer); for (const item of Object.keys(this.viewActObj)) &#123; this.viewActObj[item] = false; &#125; const key = `if$&#123;this.keysMap[str]&#125;`; this.viewActObj[key] = true; this.timer = setTimeout(() =&gt; this.viewActObj[key] = false, 80); &#125; clickCalc(event: any) &#123; if (event.target.tagName.toLowerCase() === &#x27;td&#x27;) &#123; const str = event.target.getAttribute(&#x27;data-s&#x27;); this.goCalc(str); &#125; &#125; evClose(blean: boolean) &#123; this.onClose.emit(this.calcShow = blean); &#125;&#125; TS：calc.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110export class Calc &#123; parse(content: string) &#123; let index = content.lastIndexOf(&#x27;(&#x27;); if (index &gt; -1) &#123; const endIndex = content.indexOf(&#x27;)&#x27;, index); if (endIndex &gt; -1) &#123; const result = this.parse(content.substring(index + 1, endIndex)); return this.parse(content.substring(0, index) + (&#x27;&#x27; + result) + content.substring(endIndex + 1)); &#125; &#125; let x: string | number; let y: string | number; index = content.indexOf(&#x27;+&#x27;); if (index &gt; -1) &#123; x = content.substring(0, index); y = content.substring(index + 1); if (typeof x !== &#x27;number&#x27;) &#123; x = this.parse(x); &#125; if (typeof y !== &#x27;number&#x27;) &#123; y = this.parse(y); &#125; return this.floatAdd(x as number, y as number); &#125; index = content.lastIndexOf(&#x27;-&#x27;); if (index &gt; -1) &#123; x = content.substring(0, index); y = content.substring(index + 1); if (typeof x !== &#x27;number&#x27;) &#123; x = this.parse(x); &#125; if (typeof y !== &#x27;number&#x27;) &#123; y = this.parse(y); &#125; return this.floatSub(x as number, y as number); &#125; index = content.lastIndexOf(&#x27;×&#x27;); if (index &gt; -1) &#123; x = content.substring(0, index); y = content.substring(index + 1); if (typeof x !== &#x27;number&#x27;) &#123; x = this.parse(x); &#125; if (typeof y !== &#x27;number&#x27;) &#123; y = this.parse(y); &#125; return this.floatMul(x as number, y as number); &#125; index = content.lastIndexOf(&#x27;÷&#x27;); if (index &gt; -1) &#123; x = content.substring(0, index); y = content.substring(index + 1); if (typeof x !== &#x27;number&#x27;) &#123; x = this.parse(x); &#125; if (typeof y !== &#x27;number&#x27;) &#123; y = this.parse(y); &#125; return this.floatDiv(x as number, y as number); &#125; if (&#x27;&#x27; === content) &#123; return 0; &#125; else &#123; return Number(content); &#125; &#125; floatAdd(arg1: number, arg2: number) &#123; let r1: number; let r2: number; try &#123; r1 = arg1.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; r1 = 0; &#125; try &#123; r2 = arg2.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; r2 = 0; &#125; const m = Math.pow(10, Math.max(r1, r2)); return (arg1 * m + arg2 * m) / m; &#125; floatSub(arg1: number, arg2: number) &#123; let r1: number; let r2: number; try &#123; r1 = arg1.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; r1 = 0; &#125; try &#123; r2 = arg2.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; r2 = 0; &#125; const m = Math.pow(10, Math.max(r1, r2)); const n = (r1 &gt;= r2) ? r1 : r2; return ((arg1 * m - arg2 * m) / m).toFixed(n); &#125; floatMul(arg1: number, arg2: number) &#123; let m = 0; const s1 = arg1.toString(); const s2 = arg2.toString(); try &#123; m += s1.split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; &#125; try &#123; m += s2.split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; &#125; return Number(s1.replace(&#x27;.&#x27;, &#x27;&#x27;)) * Number(s2.replace(&#x27;.&#x27;, &#x27;&#x27;)) / Math.pow(10, m) &#125; floatDiv(arg1: number, arg2: number) &#123; let t1 = 0; let t2 = 0; try &#123; t1 = arg1.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; &#125; try &#123; t2 = arg2.toString().split(&#x27;.&#x27;)[1].length; &#125; catch (e) &#123; &#125; const r1 = Number(arg1.toString().replace(&#x27;.&#x27;, &#x27;&#x27;)); const r2 = Number(arg2.toString().replace(&#x27;.&#x27;, &#x27;&#x27;)); const v = (r1 / r2) * Math.pow(10, t2 - t1); return Number(v.toFixed(4)); &#125;&#125; 使用：1&lt;app-calculator [show]=&quot;calcShow&quot; (onClose)=&quot;onCalcClose($event)&quot;&gt;&lt;/app-calculator&gt; 12calcShow: boolean = true;onCalcClose(show: boolean) &#123; this.calcShow = show; &#125;","tags":[{"name":"ng","slug":"ng","permalink":"https://zuitaibai.github.io/blog/tags/ng/"},{"name":"angular","slug":"angular","permalink":"https://zuitaibai.github.io/blog/tags/angular/"},{"name":"calc","slug":"calc","permalink":"https://zuitaibai.github.io/blog/tags/calc/"}],"categories":[{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"angular","slug":"前端框架/angular","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/angular/"}]},{"title":"ng实现分页组件","date":"2019-04-11T02:14:00.000Z","path":"2019/04/11/前端框架-angular-2019-04-11-ng实现分页组件/","text":"在此记录一个简单的分页组件实现。 1. data方式 样式：paging.component.css 代码折叠 代码展开 1234567891011121314.pagination&#123;vertical-align:middle;&#125;.pagination a,.pagination span&#123;padding:0 5px;margin-right:5px;border: 1px solid #ddd;text-align:center;line-height:26px;display:inline-block;min-width:20px;color:#000; vertical-align:middle;&#125;.pagination .pageem&#123;line-height:28px;display:inline-block;vertical-align:middle;font-style:normal;color:#aaa;&#125;.pagination .pageem1&#123;margin-left:2em;margin-right:4px;&#125;.pagination .pageem2&#123;margin-left:5px;&#125;.pagination a &#123;text-decoration: none;&#125;.pagination a:hover,.pagination a:active &#123;border-color:#666;color: #000;&#125;.pagination .pagefirst,.pagination .pageprev,.pagination .pagelast,.pagination .pagenext&#123;font-size:12px;&#125;.pagination .pageprev&#123;margin-right:2em;&#125;.pagination .pagenext&#123;margin-left:2em;&#125;.pagination .current &#123;border-color:transparent;color:blue;&#125;.pagination .disabled &#123;border: 1px solid #EEE;color: #DDD;&#125;.pagination .pagepoints&#123;border-color:transparent;&#125;.pagination .pageselect&#123;box-sizing:border-box;height:26px;vertical-align:middle;&#125; 模板：paging.component.html 代码折叠 代码展开 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;div&gt; &lt;span *ngIf=&quot;showInfo&quot; style=&quot;float:right;line-height:28px;&quot;&gt; 记录: &lt;span class=&quot;red&quot;&gt;&#123;&#123;total&#125;&#125;&lt;/span&gt; 页: &lt;span id=&quot;cur&quot; class=&quot;red&quot;&gt;&#123;&#123;curP&#125;&#125;&lt;/span&gt;/&lt;span class=&quot;red&quot;&gt;&#123;&#123;pageCount&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;div *ngIf=&quot;list.length&gt;1&quot; class=&quot;pagination&quot;&gt; &lt;ng-container *ngFor=&quot;let item of list&quot;&gt; &lt;!-- item: &#123; value: 1, type: &#x27;first&#x27;, link: true, disable: false, text: conf.wordFt &#125; --&gt; &lt;!-- value: 值, type: first/prev/next/last/normal/current/elp, link: 是否链接, disable:是否禁用, text:铵钮文字 --&gt; &lt;ng-container *ngIf=&quot;item.type===&#x27;normal&#x27;&quot;&gt; &lt;a *ngIf=&quot;item.link&quot; href=&quot;javascript:;&quot; (click)=&quot;evChangePage(item.value)&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;ng-container *ngIf=&quot;item.type!==&#x27;normal&#x27;&quot;&gt; &lt;a *ngIf=&quot;item.link&quot; href=&quot;javascript:;&quot; [ngClass]=&quot;&#123; current:item.type===&#x27;current&#x27;, disabled:item.disable, pagenext: item.type===&#x27;next&#x27;, pageprev: item.type===&#x27;prev&#x27;, pagefirst: item.type===&#x27;first&#x27;, pagelast: item.type===&#x27;last&#x27;, pagepoints: item.type===&#x27;elp&#x27; &#125;&quot; (click)=&quot;evChangePage(item.value)&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/a&gt; &lt;span *ngIf=&quot;!item.link&quot; [ngClass]=&quot;&#123; current:item.type===&#x27;current&#x27;, disabled:item.disable, pagenext: item.type===&#x27;next&#x27;, pageprev: item.type===&#x27;prev&#x27;, pagefirst: item.type===&#x27;first&#x27;, pagelast: item.type===&#x27;last&#x27;, pagepoints: item.type===&#x27;elp&#x27; &#125;&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt; &lt;/ng-container&gt; &lt;/ng-container&gt; &lt;ng-container *ngIf=&quot;ifSelect &amp;&amp; pageCount&gt;1&quot;&gt; &lt;em class=&quot;pageem pageem1&quot;&gt;跳到第&lt;/em&gt;&lt;select [ngModel]=&quot;curP&quot; (change)=&quot;evChangePage(selects.value)&quot; #selects&gt; &lt;option *ngFor=&quot;let item of pagesArr; index as vv&quot; [value]=&quot;vv+1&quot;&gt;&#123;&#123;vv+1&#125;&#125;&lt;/option&gt; &lt;/select&gt;&lt;em class=&quot;pageem pageem2&quot;&gt;页&lt;/em&gt; &lt;/ng-container&gt; &lt;/div&gt;&lt;/div&gt; TS：paging.component.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159import &#123; Component, OnInit, Input, Output, EventEmitter, OnChanges &#125; from &#x27;@angular/core&#x27;;import &#123; ObjTpye &#125; from &#x27;../../util/types&#x27;;const build = (curP: number, pageCount: number, conf: ObjTpye) =&gt; &#123; const list = []; // list-item: &#123; value: 1, type: &#x27;first&#x27;, link: true, disable: false, text: conf.wordFt &#125; /* value: 值, type: first/prev/next/last/normal/current/elp, link: 是否链接, disable:是否禁用, text:铵钮文字 */ if (pageCount &lt; 1) &#123; pageCount = 1; &#125; if (curP &gt; pageCount) &#123; curP = pageCount; &#125; if (pageCount &gt; 1) &#123; // first and previous button if (curP &gt; 1) &#123; if (conf.showFtLt) &#123; list.push(&#123; value: 1, type: &#x27;first&#x27;, link: true, disable: false, text: conf.wordFt &#125;); &#125; if (conf.showPvNt) &#123; list.push(&#123; value: curP - 1, type: &#x27;prev&#x27;, link: true, disable: false, text: conf.wordPv &#125;); &#125; &#125; else &#123; if (conf.showFtLt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;first&#x27;, link: false, disable: true, text: conf.wordFt &#125;); &#125; if (conf.showPvNt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;prev&#x27;, link: false, disable: true, text: conf.wordPv &#125;); &#125; &#125; // pages if (pageCount &lt; 7 + (conf.adjacents * 2)) &#123; for (let item = 1; item &lt;= pageCount; item++) &#123; if (item === curP) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;current&#x27;, link: false, disable: false, text: item &#125;); &#125; else &#123; list.push(&#123; value: item, type: &#x27;normal&#x27;, link: true, disable: false, text: item &#125;); &#125; &#125; // enough pages to hide some &#125; else if (pageCount &gt;= 7 + (conf.adjacents * 2)) &#123; // close to beginning only hide later pages if (curP &lt; 1 + (conf.adjacents * 3)) &#123; for (let item = 1; item &lt;= (4 + (conf.adjacents * 2)) - 1; item++) &#123; if (item === curP) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;current&#x27;, link: false, disable: false, text: item &#125;); &#125; else &#123; list.push(&#123; value: item, type: &#x27;normal&#x27;, link: true, disable: false, text: item &#125;); &#125; &#125; list.push(&#123; value: &#x27;&#x27;, type: &#x27;elp&#x27;, link: false, disable: false, text: conf.wordElp &#125;); list.push(&#123; value: pageCount - 1, type: &#x27;normal&#x27;, link: true, disable: false, text: pageCount - 1 &#125;); list.push(&#123; value: pageCount, type: &#x27;normal&#x27;, link: true, disable: false, text: pageCount &#125;); // in middle hide some front and some back &#125; else if (pageCount - (conf.adjacents * 2) &gt; curP &amp;&amp; curP &gt; (conf.adjacents * 2)) &#123; list.push(&#123; value: 1, type: &#x27;normal&#x27;, link: true, disable: false, text: 1 &#125;); list.push(&#123; value: 2, type: &#x27;normal&#x27;, link: true, disable: false, text: 2 &#125;); list.push(&#123; value: &#x27;&#x27;, type: &#x27;elp&#x27;, link: false, disable: false, text: conf.wordElp &#125;); for (let item = curP - conf.adjacents; item &lt;= curP + conf.adjacents; item++) &#123; if (item === curP) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;current&#x27;, link: false, disable: false, text: item &#125;); &#125; else &#123; list.push(&#123; value: item, type: &#x27;normal&#x27;, link: true, disable: false, text: item &#125;); &#125; &#125; list.push(&#123; value: &#x27;&#x27;, type: &#x27;elp&#x27;, link: false, disable: false, text: conf.wordElp &#125;); list.push(&#123; value: pageCount - 1, type: &#x27;normal&#x27;, link: true, disable: false, text: pageCount - 1 &#125;); list.push(&#123; value: pageCount, type: &#x27;normal&#x27;, link: true, disable: false, text: pageCount &#125;); // close to end only hide early pages &#125; else &#123; list.push(&#123; value: 1, type: &#x27;normal&#x27;, link: true, disable: false, text: 1 &#125;); list.push(&#123; value: 2, type: &#x27;normal&#x27;, link: true, disable: false, text: 2 &#125;); list.push(&#123; value: &#x27;&#x27;, type: &#x27;elp&#x27;, link: false, disable: false, text: conf.wordElp &#125;); for (let item = (pageCount - (1 + (conf.adjacents * 3))); item &lt;= pageCount; item++) &#123; if (item === curP) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;current&#x27;, link: false, disable: false, text: item &#125;); &#125; else &#123; list.push(&#123; value: item, type: &#x27;normal&#x27;, link: true, disable: false, text: item &#125;); &#125; &#125; &#125; &#125; // last and next button if (curP &lt; pageCount) &#123; if (conf.showPvNt) &#123; list.push(&#123; value: curP + 1, type: &#x27;next&#x27;, link: true, disable: false, text: conf.wordNt &#125;); &#125; if (conf.showFtLt) &#123; list.push(&#123; value: pageCount, type: &#x27;last&#x27;, link: true, disable: false, text: conf.wordLt &#125;); &#125; &#125; else &#123; if (conf.showPvNt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;next&#x27;, link: false, disable: true, text: conf.wordNt &#125;); &#125; if (conf.showFtLt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;last&#x27;, link: false, disable: true, text: conf.wordLt &#125;); &#125; &#125; &#125; else if (pageCount === 1 &amp;&amp; conf.lte2pShow) &#123; if (conf.showFtLt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;first&#x27;, link: false, disable: true, text: conf.wordFt &#125;); &#125; if (conf.showPvNt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;prev&#x27;, link: false, disable: true, text: conf.wordPv &#125;); &#125; list.push(&#123; value: &#x27;&#x27;, type: &#x27;current&#x27;, link: false, disable: false, text: 1 &#125;); if (conf.showPvNt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;next&#x27;, link: false, disable: true, text: conf.wordNt &#125;); &#125; if (conf.showFtLt) &#123; list.push(&#123; value: &#x27;&#x27;, type: &#x27;last&#x27;, link: false, disable: true, text: conf.wordLt &#125;); &#125; &#125; return list;&#125;;const conf = &#123; adjacents: 2, lte2pShow: false, ifSelect: true, showPvNt: true, showFtLt: true, wordElp: &#x27;...&#x27;, wordPv: &#x27;&lt; 上一页&#x27;, wordNt: &#x27;下一页 &gt;&#x27;, wordFt: &#x27;|&lt;&lt; 首 页&#x27;, wordLt: &#x27;末 页 &gt;&gt;|&#x27;&#125;;@Component(&#123; selector: &#x27;app-paging&#x27;, templateUrl: &#x27;./paging.component.html&#x27;, styleUrls: [&#x27;./paging.component.css&#x27;]&#125;)export class PagingDataComponent implements OnInit, OnChanges &#123; pagesArr = []; ifSelect = true; list = []; pageCount = 0; // tslint:disable-next-line:no-input-rename @Input(&#x27;pShowInfo&#x27;) showInfo = false; // tslint:disable-next-line:no-input-rename @Input(&#x27;pCurP&#x27;) curP = 1; // tslint:disable-next-line:no-input-rename @Input(&#x27;pSize&#x27;) pSize = 10; // tslint:disable-next-line:no-input-rename @Input(&#x27;pTotal&#x27;) total = 0; // tslint:disable-next-line:no-output-on-prefix @Output() onPagingChange: EventEmitter&lt;number&gt; = new EventEmitter(); ngOnInit() &#123; &#125; ngOnChanges() &#123; this.calc(); &#125; evChangePage(n: number | string) &#123; n = Number(n); this.onPagingChange.emit(n); this.curP = n; this.calc(); &#125; private calc() &#123; this.pageCount = Math.ceil(this.total / this.pSize); this.pagesArr = new Array(this.pageCount || 1).fill(1); this.list = build(this.curP, this.pageCount, conf); &#125;&#125; 使用： 代码折叠 代码展开 123456&lt;app-paging (onPagingChange)=&quot;onPagingChange($event)&quot; [pCurP]=&quot;currentPage&quot; [pSize]=&quot;pageSize&quot; [pTotal]=&quot;totalRecord&quot; &gt;&lt;/app-paging&gt; 代码折叠 代码展开 12345678currentPage: number = 1;pageSize: number = 10;totalRecord: number = 231;onPagingChange(page: number) &#123; this.currentPage = page; // ...&#125; 2. dom方式样式：paging.component.css 代码折叠 代码展开 1234567891011121314.pagination&#123;vertical-align:middle;&#125;.pagination a,.pagination span&#123;padding:0 5px;margin-right:5px;border: 1px solid #ddd;text-align:center;line-height:26px;display:inline-block;min-width:20px;color:#000; vertical-align:middle;&#125;.pagination .pageem&#123;line-height:28px;display:inline-block;vertical-align:middle;font-style:normal;color:#aaa;&#125;.pagination .pageem1&#123;margin-left:2em;margin-right:4px;&#125;.pagination .pageem2&#123;margin-left:5px;&#125;.pagination a &#123;text-decoration: none;&#125;.pagination a:hover,.pagination a:active &#123;border-color:#666;color: #000;&#125;.pagination .pagefirst,.pagination .pageprev,.pagination .pagelast,.pagination .pagenext&#123;font-size:12px;&#125;.pagination .pageprev&#123;margin-right:2em;&#125;.pagination .pagenext&#123;margin-left:2em;&#125;.pagination .current &#123;border-color:transparent;color:blue;&#125;.pagination .disabled &#123;border: 1px solid #EEE;color: #DDD;&#125;.pagination .pagepoints&#123;border-color:transparent;&#125;.pagination .pageselect&#123;box-sizing:border-box;height:26px;vertical-align:middle;&#125; 模板：paging.component.html 代码折叠 代码展开 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;div&gt; &lt;span *ngIf=&quot;showInfo&quot; style=&quot;float:right;line-height:28px;&quot;&gt; 记录: &lt;span class=&quot;red&quot;&gt;&#123;&#123;total&#125;&#125;&lt;/span&gt; 页: &lt;span id=&quot;cur&quot; class=&quot;red&quot;&gt;&#123;&#123;curP&#125;&#125;&lt;/span&gt;/&lt;span class=&quot;red&quot;&gt;&#123;&#123;pageCount&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;div *ngIf=&quot;pageCount&gt;1&quot; class=&quot;pagination&quot;&gt; &lt;!-- first and previous button --&gt; &lt;ng-container *ngIf=&quot;curP&gt;1&quot;&gt; &lt;a *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagefirst&quot; (click)=&quot;evChangePage(1)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;conf.wordFt&#125;&#125;&lt;/a&gt; &lt;a *ngIf=&quot;conf.showPvNt&quot; class=&quot;pageprev&quot; (click)=&quot;evChangePage(curP - 1)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;conf.wordPv&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;ng-container *ngIf=&quot;curP&lt;=1&quot;&gt; &lt;span *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagefirst disabled&quot;&gt;&#123;&#123;conf.wordFt&#125;&#125;&lt;/span&gt; &lt;span *ngIf=&quot;conf.showPvNt&quot; class=&quot;pageprev disabled&quot;&gt;&#123;&#123;conf.wordPv&#125;&#125;&lt;/span&gt; &lt;/ng-container&gt; &lt;!-- pages --&gt; &lt;ng-container *ngIf=&quot;pageCount &lt; 7 + (conf.adjacents * 2)&quot;&gt; &lt;ng-container *ngFor=&quot;let item of makeEndArr(pageCount)&quot;&gt; &lt;span *ngIf=&quot;item === curP&quot; class=&quot;current&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt; &lt;a *ngIf=&quot;item !== curP&quot; (click)=&quot;evChangePage(item)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;/ng-container&gt; &lt;!-- enough pages to hide some --&gt; &lt;ng-container *ngIf=&quot;pageCount &gt;= 7 + (conf.adjacents * 2)&quot;&gt; &lt;!-- close to beginning only hide later pages --&gt; &lt;ng-container *ngIf=&quot;flag1&quot;&gt; &lt;ng-container *ngFor=&quot;let item of makeEndArr(4 + (conf.adjacents * 2)-1)&quot;&gt; &lt;span *ngIf=&quot;item === curP&quot; class=&quot;current&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt; &lt;a *ngIf=&quot;item !== curP&quot; (click)=&quot;evChangePage(item)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;span class=&quot;pagepoints&quot;&gt;&#123;&#123;conf.wordElp&#125;&#125;&lt;/span&gt; &lt;a (click)=&quot;evChangePage(pageCount - 1)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;pageCount - 1&#125;&#125;&lt;/a&gt; &lt;a (click)=&quot;evChangePage(pageCount)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;pageCount&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;!-- in middle hide some front and some back --&gt; &lt;ng-container *ngIf=&quot;flag2&quot;&gt; &lt;a (click)=&quot;evChangePage(1)&quot; href=&quot;javascript:;&quot;&gt;1&lt;/a&gt; &lt;a (click)=&quot;evChangePage(2)&quot; href=&quot;javascript:;&quot;&gt;2&lt;/a&gt; &lt;span class=&quot;pagepoints&quot;&gt;&#123;&#123;conf.wordElp&#125;&#125;&lt;/span&gt; &lt;ng-container *ngFor=&quot;let item of makeEndArr(curP + conf.adjacents,curP - conf.adjacents)&quot;&gt; &lt;span *ngIf=&quot;item === curP&quot; class=&quot;current&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt; &lt;a *ngIf=&quot;item !== curP&quot; (click)=&quot;evChangePage(item)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;span class=&quot;pagepoints&quot;&gt;&#123;&#123;conf.wordElp&#125;&#125;&lt;/span&gt; &lt;a (click)=&quot;evChangePage(pageCount-1)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;pageCount-1&#125;&#125;&lt;/a&gt; &lt;a (click)=&quot;evChangePage(pageCount)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;pageCount&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;!-- close to end only hide early pages --&gt; &lt;ng-container *ngIf=&quot;flag3&quot;&gt; &lt;a (click)=&quot;evChangePage(1)&quot; href=&quot;javascript:;&quot;&gt;1&lt;/a&gt; &lt;a (click)=&quot;evChangePage(2)&quot; href=&quot;javascript:;&quot;&gt;2&lt;/a&gt; &lt;span class=&quot;pagepoints&quot;&gt;&#123;&#123;conf.wordElp&#125;&#125;&lt;/span&gt; &lt;ng-container *ngFor=&quot;let item of makeEndArr(pageCount, pageCount - (1 + (conf.adjacents * 3)))&quot;&gt; &lt;span *ngIf=&quot;item === curP&quot; class=&quot;current&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt; &lt;a *ngIf=&quot;item !== curP&quot; (click)=&quot;evChangePage(item)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;/ng-container&gt; &lt;/ng-container&gt; &lt;!-- last and next button --&gt; &lt;ng-container *ngIf=&quot;curP &lt; pageCount&quot;&gt; &lt;a *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagenext&quot; (click)=&quot;evChangePage(curP + 1)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;conf.wordNt&#125;&#125;&lt;/a&gt; &lt;a *ngIf=&quot;conf.showPvNt&quot; class=&quot;pagelast&quot; (click)=&quot;evChangePage(pageCount)&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;conf.wordLt&#125;&#125;&lt;/a&gt; &lt;/ng-container&gt; &lt;ng-container *ngIf=&quot;curP &gt;= pageCount&quot;&gt; &lt;span *ngIf=&quot;conf.showPvNt&quot; class=&quot;pagenext disabled&quot;&gt;&#123;&#123;conf.wordNt&#125;&#125;&lt;/span&gt; &lt;span *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagelast disabled&quot;&gt;&#123;&#123;conf.wordLt&#125;&#125;&lt;/span&gt; &lt;/ng-container&gt; &lt;ng-container *ngIf=&quot;conf.ifSelect&quot;&gt; &lt;em class=&quot;pageem pageem1&quot;&gt;跳到第&lt;/em&gt;&lt;select [ngModel]=&quot;curP&quot; (change)=&quot;evChangePage(selects.value)&quot; #selects&gt; &lt;option *ngFor=&quot;let item of makeEndArr(pageCount)&quot; [value]=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/option&gt; &lt;/select&gt;&lt;em class=&quot;pageem pageem2&quot;&gt;页&lt;/em&gt; &lt;/ng-container&gt; &lt;/div&gt; &lt;div *ngIf=&quot;pageCount&lt;=1&amp;&amp;conf.lte2pShow&quot; class=&quot;pagination&quot;&gt; &lt;span *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagefirst disabled&quot;&gt;&#123;&#123;conf.wordFt&#125;&#125;&lt;/span&gt; &lt;span *ngIf=&quot;conf.showPvNt&quot; class=&quot;pageprev disabled&quot;&gt;&#123;&#123;conf.wordPv&#125;&#125;&lt;/span&gt; &lt;span class=&quot;current&quot;&gt;1&lt;/span&gt; &lt;span *ngIf=&quot;conf.showPvNt&quot; class=&quot;pagenext disabled&quot;&gt;&#123;&#123;conf.wordNt&#125;&#125;&lt;/span&gt; &lt;span *ngIf=&quot;conf.showFtLt&quot; class=&quot;pagelast disabled&quot;&gt;&#123;&#123;conf.wordLt&#125;&#125;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; TS：paging.component.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import &#123; Component, OnInit, Input, Output, EventEmitter, OnChanges &#125; from &#x27;@angular/core&#x27;;@Component(&#123; selector: &#x27;app-paging&#x27;, templateUrl: &#x27;./paging.component.html&#x27;, styleUrls: [&#x27;./paging.component.css&#x27;]&#125;)export class PagingDomComponent implements OnInit, OnChanges &#123; conf = &#123; adjacents: 2, lte2pShow: false, ifSelect: true, showPvNt: true, showFtLt: true, wordElp: &#x27;...&#x27;, wordPv: &#x27;&lt; 上一页&#x27;, wordNt: &#x27;下一页 &gt;&#x27;, wordFt: &#x27;|&lt;&lt; 首 页&#x27;, wordLt: &#x27;末 页 &gt;&gt;|&#x27; &#125;; pageCount = 0; flag1 = false; flag2 = false; flag3 = false; // tslint:disable-next-line:no-input-rename @Input(&#x27;pShowInfo&#x27;) showInfo = false; // tslint:disable-next-line:no-input-rename @Input(&#x27;pCurP&#x27;) curP = 1; // tslint:disable-next-line:no-input-rename @Input(&#x27;pSize&#x27;) pSize = 10; // tslint:disable-next-line:no-input-rename @Input(&#x27;pTotal&#x27;) total = 0; // tslint:disable-next-line:no-output-on-prefix @Output() onPagingChange: EventEmitter&lt;number&gt; = new EventEmitter(); ngOnInit() &#123; &#125; ngOnChanges() &#123; this.calc(); &#125; evChangePage(n: number|string) &#123; n = Number(n); this.onPagingChange.emit(n); this.curP = n; this.calc(); &#125; private calc() &#123; this.flag1 = this.flag2 = this.flag3 = false; this.pageCount = Math.ceil(this.total / this.pSize); if (this.pageCount &lt; 1) &#123; this.pageCount = 1; &#125; if (this.curP &gt; this.pageCount) &#123; this.curP = this.pageCount; &#125; if (this.curP &lt; 1 + (this.conf.adjacents * 3)) &#123; this.flag1 = true; &#125; else if (this.pageCount - (this.conf.adjacents * 2) &gt; this.curP &amp;&amp; this.curP &gt; (this.conf.adjacents * 2)) &#123; this.flag2 = true; &#125; else &#123; this.flag3 = true; &#125; &#125; makeEndArr(stop: number, start: number = 1) &#123; const arr = []; do &#123; arr[arr.length] = start++; &#125; while (start &lt;= stop); return arr; &#125;&#125; 使用： 代码折叠 代码展开 123456&lt;app-paging (onPagingChange)=&quot;onPagingChange($event)&quot; [pCurP]=&quot;currentPage&quot; [pSize]=&quot;pageSize&quot; [pTotal]=&quot;totalRecord&quot; &gt;&lt;/app-paging&gt; 代码折叠 代码展开 12345678currentPage: number = 1;pageSize: number = 10;totalRecord: number = 231;onPagingChange(page: number) &#123; this.currentPage = page; // ...&#125;","tags":[{"name":"ng","slug":"ng","permalink":"https://zuitaibai.github.io/blog/tags/ng/"},{"name":"angular","slug":"angular","permalink":"https://zuitaibai.github.io/blog/tags/angular/"},{"name":"paging","slug":"paging","permalink":"https://zuitaibai.github.io/blog/tags/paging/"}],"categories":[{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"angular","slug":"前端框架/angular","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/angular/"}]},{"title":"ng实现RadioGroup/CheckboxGroup组件","date":"2019-04-11T02:04:54.000Z","path":"2019/04/11/前端框架-angular-2019-04-11-ng实现RadioGroup-CheckboxGroup组件/","text":"angular实战项目已完成，在此记录一个简单的RadioGroup和CheckboxGroup组件实现。完了下一步就该进入vue的学习和实战了。 父组件：模板：parent.component.html 代码折叠 代码展开 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;form [formGroup]=&quot;try&quot; style=&quot;border:1px solid #333;margin:0 50px;&quot;&gt; &lt;h2&gt;响应式&lt;/h2&gt; &lt;checkbox-group [options]=&quot;cksDatas&quot; [disableds]=&quot;ckbDisableds&quot; formControlName=&quot;cks&quot; (outChange)=&quot;onCksChange($event)&quot; &gt;&lt;/checkbox-group&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;button type=&quot;button&quot; (click)=&quot;gouXuanCkb()&quot; style=&quot;padding:unset&quot;&gt;只勾选音乐&lt;/button&gt;&amp;nbsp; &lt;button type=&quot;button&quot; (click)=&quot;jinYongCkb()&quot; style=&quot;padding:unset&quot;&gt;只禁用电影和音乐&lt;/button&gt;&amp;nbsp;--&amp;gt;&amp;nbsp; ctrValue: &#123;&#123;try.get(&#x27;cks&#x27;).value | json&#125;&#125; &lt;div style=&quot;border-bottom:1px dashed #ccc;margin-bottom:10px;&quot;&gt;&lt;/div&gt; &lt;radiobtn-group [options]=&quot;rdoDatas&quot; [disableds]=&quot;rdoDisableds&quot; formControlName=&quot;rdos&quot; (outChange)=&quot;onRdoChange($event)&quot; &gt;&lt;/radiobtn-group&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;button type=&quot;button&quot; (click)=&quot;gouXuanRdo()&quot; style=&quot;padding:unset&quot;&gt;勾选音乐&lt;/button&gt;&amp;nbsp; &lt;button type=&quot;button&quot; (click)=&quot;jinYongRdo()&quot; style=&quot;padding:unset&quot;&gt;只禁用电影和音乐&lt;/button&gt;&amp;nbsp;--&amp;gt;&amp;nbsp; ctrValue: &#123;&#123;try.get(&#x27;rdos&#x27;).value | json&#125;&#125; &lt;div style=&quot;border-bottom:1px dashed #ccc;margin-bottom:10px;&quot;&gt;&lt;/div&gt; &lt;radiobtn-group [options]=&quot;rdoDatas2&quot; formControlName=&quot;rdos2&quot; (outChange)=&quot;onRdoChange2($event)&quot; &gt;&lt;/radiobtn-group&gt;&amp;nbsp;--&amp;gt;&amp;nbsp; ctrValue: &#123;&#123;try.get(&#x27;rdos2&#x27;).value&#125;&#125; &lt;div style=&quot;border-top:1px dashed #ccc;margin-top:10px;&quot;&gt; formValue ==&gt; &#123;&#123;try.value | json&#125;&#125; &lt;/div&gt;&lt;/form&gt;&lt;form #temForm=&quot;ngForm&quot; style=&quot;border:1px solid #333;margin:20px 50px 0;&quot;&gt; &lt;h2&gt;模板驱动式&lt;/h2&gt; &lt;radiobtn-group [options]=&quot;rdoDatas2&quot; name=&quot;rdo1&quot; [(ngModel)]=&quot;rdosBBB&quot; (outChange)=&quot;onRdoChange2($event)&quot; #rdoGrp=&quot;ngModel&quot; &gt;&lt;/radiobtn-group&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&amp;gt;&amp;nbsp;&amp;nbsp; ctrValue: &#123;&#123;rdoGrp.value&#125;&#125; &lt;div style=&quot;border-bottom:1px dashed #ccc;margin-bottom:10px;&quot;&gt;&lt;/div&gt; &lt;checkbox-group [options]=&quot;cksDatas2&quot; name=&quot;cks1&quot; [(ngModel)]=&quot;cksBBB&quot; #ckbGrp=&quot;ngModel&quot; (outChange)=&quot;onCksChange2($event)&quot; &gt;&lt;/checkbox-group&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&amp;gt;&amp;nbsp;&amp;nbsp; ctrValue: &#123;&#123;ckbGrp.value | json&#125;&#125; &lt;div style=&quot;border-top:1px dashed #ccc;margin-top:10px;&quot;&gt; formValue ==&gt; &#123;&#123;temForm.value | json&#125;&#125; &lt;/div&gt;&lt;/form&gt; TS：parent.component.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;import &#123; FormGroup, FormControl &#125; from &#x27;@angular/forms&#x27;;@Component(&#123; selector: &#x27;parent-ctr-group&#x27;, templateUrl: &#x27;./parent.component.html&#x27;, styleUrls: [&#x27;./parent.component.css&#x27;]&#125;)export class TryCtrGroupComponent implements OnInit &#123; try = new FormGroup(&#123; // cks: new FormControl(), cks: new FormControl([&#x27;song&#x27;]), rdos: new FormControl(&#x27;song&#x27;), rdos2: new FormControl() &#125;); cksDatas = [ &#123; name: &#x27;电影&#x27;, value: &#x27;movie&#x27; &#125;, &#123; name: &#x27;音乐&#x27;, value: &#x27;song&#x27; &#125;, &#123; name: &#x27;阅读&#x27;, value: &#x27;read&#x27; &#125;, &#123; name: &#x27;登山&#x27;, value: &#x27;mountain&#x27; &#125;, &#123; name: &#x27;游泳&#x27;, value: &#x27;swim&#x27; &#125; ]; rdoDatas = [ &#123; name: &#x27;电影&#x27;, value: &#x27;movie&#x27; &#125;, &#123; name: &#x27;音乐&#x27;, value: &#x27;song&#x27; &#125;, &#123; name: &#x27;阅读&#x27;, value: &#x27;read&#x27; &#125;, &#123; name: &#x27;登山&#x27;, value: &#x27;mountain&#x27; &#125;, &#123; name: &#x27;游泳&#x27;, value: &#x27;swim&#x27; &#125; ]; rdoDatas2 = [ &#123; name: &#x27;a&#x27;, value: 1 &#125;, &#123; name: &#x27;b&#x27;, value: 2 &#125;, &#123; name: &#x27;cc&#x27;, value: 3 &#125;, &#123; name: &#x27;d&#x27;, value: 4 &#125;, &#123; name: &#x27;e&#x27;, value: 5 &#125; ]; cksDatas2 = [ &#123; name: &#x27;a&#x27;, value: 1 &#125;, &#123; name: &#x27;b&#x27;, value: 2 &#125;, &#123; name: &#x27;cc&#x27;, value: 3 &#125;, &#123; name: &#x27;d&#x27;, value: 4 &#125;, &#123; name: &#x27;e&#x27;, value: 5 &#125; ]; ckbDisableds = [&#x27;swim&#x27;]; rdoDisableds = [&#x27;swim&#x27;]; rdosBBB = &#x27;&#x27;; cksBBB = []; constructor() &#123; &#125; ngOnInit() &#123; // this.try.patchValue(&#123;cks: [&#x27;mountain&#x27;, &#x27;swim&#x27;]&#125;); &#125; gouXuanCkb() &#123; this.try.patchValue(&#123;cks: [&#x27;song&#x27;]&#125;); &#125; gouXuanRdo() &#123; this.try.patchValue(&#123;rdos: &#x27;song&#x27;&#125;); &#125; jinYongCkb() &#123; this.ckbDisableds = [&#x27;movie&#x27;, &#x27;song&#x27;]; &#125; jinYongRdo() &#123; this.rdoDisableds = [&#x27;movie&#x27;, &#x27;song&#x27;]; &#125; onCksChange(obj: any) &#123; console.log(obj); &#125; onRdoChange(obj: any) &#123; console.log(obj); &#125; onRdoChange2(obj: any) &#123; console.log(obj); &#125; onCksChange2(obj: any) &#123; console.log(obj); &#125;&#125; checkbox-group组件：模板：checkbox-group.component.html 代码折叠 代码展开 123456789&lt;label *ngFor=&quot;let e of options&quot;&gt; &lt;input type=&quot;checkbox&quot; [disabled]=&quot;ifDisabledMe(e)&quot; [checked]=&quot;this.model.length &amp;&amp; this.model.indexOf(e.value) &gt; -1&quot; [value]=&quot;e.value&quot; (change)=&quot;myChange(e)&quot;&gt; &#123;&#123; e.name &#125;&#125;&lt;/label&gt; TS：checkbox-group.component.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import &#123; Component, OnInit, Input, Output, forwardRef, EventEmitter &#125; from &#x27;@angular/core&#x27;;import &#123; NG_VALUE_ACCESSOR, ControlValueAccessor &#125; from &#x27;@angular/forms&#x27;;@Component(&#123; // tslint:disable-next-line:component-selector selector: &#x27;checkbox-group&#x27;, templateUrl: &#x27;./checkbox-group.component.html&#x27;, styleUrls: [&#x27;./checkbox-group.component.css&#x27;], providers: [&#123; provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() =&gt; CheckboxGroupComponent), multi: true &#125;]&#125;)export class CheckboxGroupComponent implements OnInit, ControlValueAccessor &#123; @Input() options: any = []; @Input() disableds: any = []; // 可以在父组件动态更改 @Output() outChange: EventEmitter&lt;any&gt; = new EventEmitter(); model: any = []; onChange = (_: any) =&gt; &#123; &#125;; constructor() &#123; &#125; ngOnInit() &#123;&#125; ifDisabledMe(obj: any) &#123; return this.disableds.some((v: any) =&gt; v === obj.value ); &#125; myChange(obj: any) &#123; const &#123; value &#125; = obj; const index = this.model.indexOf(value); let dos: boolean; if (index &gt; -1) &#123; this.model.splice(index, 1); this.onChange(this.model); dos = false; &#125; else &#123; this.model.push(value); this.onChange(this.model); dos = true; &#125; // for user event this.outChange.emit(&#123; active: &#123;...obj, ifCheck: dos&#125;, checks: this.model &#125;); &#125; writeValue(value: any) &#123; if (value) &#123; if (this.model.sort().toString() !== value.sort().toString()) &#123; // 此判断是：如果js动态选中和已有选中不同，才触发 // for js this.outChange.emit(&#123; checks: value &#125;); &#125; if (value.length &gt;= 1) &#123; this.model = value; &#125; else &#123; this.model = []; &#125; &#125; else &#123; this.model = []; &#125; &#125; registerOnChange(fn: any) &#123; this.onChange = fn; &#125; registerOnTouched(fn: any): void &#123;&#125;&#125; radiobtn-group组件：模板：radiobtn-group.component.html 代码折叠 代码展开 1234567891011&lt;label *ngFor=&quot;let e of options&quot;&gt; &lt;input type=&quot;radio&quot; [disabled]=&quot;ifDisabledMe(e)&quot; [checked]=&quot;this.model==e.value&quot; [value]=&quot;e.value&quot; (change)=&quot;myChange(e)&quot; [attr.name]=&quot;privateName&quot; &gt; &#123;&#123; e.name &#125;&#125;&lt;/label&gt; Ts：radiobtn-group.component.ts 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#123; Component, OnInit, Input, Output, forwardRef, EventEmitter &#125; from &#x27;@angular/core&#x27;;import &#123; NG_VALUE_ACCESSOR, ControlValueAccessor &#125; from &#x27;@angular/forms&#x27;;@Component(&#123; // tslint:disable-next-line:component-selector selector: &#x27;radiobtn-group&#x27;, templateUrl: &#x27;./radiobtn-group.component.html&#x27;, styleUrls: [&#x27;./radiobtn-group.component.css&#x27;], providers: [&#123; provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() =&gt; RadiobtnGroupComponent), multi: true &#125;]&#125;)export class RadiobtnGroupComponent implements OnInit, ControlValueAccessor &#123; @Input() options: any = []; @Input() disableds: any = []; // 可以在父组件动态更改 @Output() outChange: EventEmitter&lt;any&gt; = new EventEmitter(); privateName: string; model: any = &#x27;&#x27;; onChange = (_: any) =&gt; &#123; &#125;; constructor() &#123; const rdm = Math.random().toString().replace(/^\\d\\./, &#x27;&#x27;); this.privateName = `radio-$&#123;rdm&#125;&#125;`; &#125; ngOnInit() &#123; &#125; ifDisabledMe(obj: any) &#123; return this.disableds.some((v: any) =&gt; v === obj.value ); &#125; myChange(obj: any) &#123; const &#123; value &#125; = obj; this.model = value; this.onChange(value); this.outChange.emit(obj); &#125; writeValue(value: any) &#123; if (value) &#123; if (this.model !== value) &#123; this.outChange.emit(value); &#125; this.model = value; &#125; else &#123; this.model = &#x27;&#x27;; &#125; &#125; registerOnChange(fn: any) &#123; this.onChange = fn; &#125; registerOnTouched(fn: any): void &#123;&#125;&#125;","tags":[{"name":"ng","slug":"ng","permalink":"https://zuitaibai.github.io/blog/tags/ng/"},{"name":"angular","slug":"angular","permalink":"https://zuitaibai.github.io/blog/tags/angular/"},{"name":"RadioGroup","slug":"RadioGroup","permalink":"https://zuitaibai.github.io/blog/tags/RadioGroup/"},{"name":"CheckboxGroup","slug":"CheckboxGroup","permalink":"https://zuitaibai.github.io/blog/tags/CheckboxGroup/"}],"categories":[{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"angular","slug":"前端框架/angular","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/angular/"}]},{"title":"ng-cli常用命令","date":"2019-03-12T03:25:07.000Z","path":"2019/03/12/前端框架-angular-2019-03-12-ngCli常用命令/","text":"ng-cli 命令(@Angular CLI 终极指南:https://segmentfault.com/a/1190000009771946) ng new 项目名 ng generate class 类名 ng g cl ng generate component 组件名 ng g c ng generate directive 指令名 ng g d ng generate enum 枚举 ng g e ng generate module 模块名 ng g m ng generate pipe 管道名 ng g p ng generate serveice 服务名 ng g s ng g s teacher/service/teacher ng generate interface 接口名 ng g i ng start (:4200) ng s –port 4201 ng s ng build –prod –aot ng test ng serve [ –open -o ] ng eject 用于将你的应用程序与 Angular CLI 分离 参数ng generate1. ng generate class–spec: boolean, 默认为 false, 表示是否生成单元测试相关的 spec 文件. ng generate class user-profile –spec 2. ng generate component –flat: boolean, 默认为 false, 表示在 src/app 目录下生成组件而不是在 src/app/componentName 目录中–inline-template: boolean, 默认为 false, 表示使用内联模板而不是使用独立的模板文件–inline-style: boolean, 默认为 false, 表示使用内联样式而不是使用独立的样式文件–prefix: boolean, 默认为 true, 使用 .angular-cli.json 配置的前缀作为组件选择器的前缀–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件–view-encapsulation: string, 用于设置组件的视图封装策略–change-detection: string, 用于设置组件的变化检测策略 3. ng generate directive –flat: boolean, 默认为 true, 表示在 src/app 目录中生成指令而不是在 src/app/admin-link 目录下–prefix: boolean, 默认为 true, 使用 .angular-cli.json 配置的前缀作为指令选择器的前缀–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件 4. ng generate module –routing: boolean, 默认为 false, 表示生成一个额外包含路由信息的 AdminRoutingModule 模块，且该模块会被自动地导入到新建的模块中–spec: boolean, 默认为 false, 表示添加 src/app/admin/admin.module.spec.ts 单元测试文件 5. ng generate pipe –flat: boolean, 默认为 true, 表示在 src/app 目录中生成管道而不是在 src/app/convert-to-euro 目录下–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件 6. ng generate service –flat: boolean, 默认为 true, 表示在 src/app 目录中生成服务而不是在 src/app/backend-api 目录下–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件 ng build–aot: 开启 ahead-of-time 编译–base-href: string, 设置 index.html 文件中 元素的链接地址–environment: string, 设置所使用的环境，默认为 dev–output-path: string, 设置输出的路径–target: string, 设置所使用的环境，默认为 development,意味着不进行代码压缩或混淆 ng build –target=production–watch: boolean, 默认为 false, 开启 watch 模式，监听文件异动并自动重新构建 Environments 让你能够自定义应用程序行为,你可以在 .angular-cli.json 文件中定义自己的 environments 文件。默认的是：dev：environments/environment.ts。如果指定了不同的环境，构建过程将使用相应的环境：ng build Uses environments/environment.tsng build –environment=dev || ng build –env=dev Also uses environments/environment.tsng build –environment=prod || ng build –env=prod Uses environments/environment.prod.ts ng new || ng init–dry-run: boolean, 默认为 false, 若设置 dry-run 则不会创建任何文件–verbose: boolean, 默认为 false–link-cli: boolean, 默认为 false, 自动链接到 @angular/cli 包–skip-install: boolean, 默认为 false, 表示跳过 npm install–skip-git: boolean, 默认为 false, 表示该目录不初始化为 git 仓库–skip-tests: boolean, 默认为 false, 表示不创建 tests 相关文件–skip-commit: boolean, 默认为 false, 表示不进行初始提交–directory: string, 用于设置创建的目录名，默认与应用程序的同名–source-dir: string, 默认为 ‘src’, 用于设置源文件目录的名称–style: string, 默认为 ‘css’, 用于设置选用的样式语法 (‘css’, ‘less’ or ‘scss’)–prefix: string, 默认为 ‘app’, 用于设置创建新组件时，组件选择器使用的前缀–mobile: boolean, 默认为 false,表示是否生成 Progressive Web App 应用程序–routing: boolean, 默认为 false, 表示新增带有路由信息的模块，并添加到根模块中–inline-style: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联样式–inline-template: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联模板","tags":[{"name":"angular-cli","slug":"angular-cli","permalink":"https://zuitaibai.github.io/blog/tags/angular-cli/"},{"name":"命令","slug":"命令","permalink":"https://zuitaibai.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"},{"name":"ng","slug":"ng","permalink":"https://zuitaibai.github.io/blog/tags/ng/"}],"categories":[{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"angular","slug":"前端框架/angular","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/angular/"}]},{"title":"简易nodeserver，含mock","date":"2018-04-21T08:06:33.000Z","path":"2018/04/21/服务端-nodejs-2018-04-21-简易nodeserver，含mock/","text":"还是自己写的东西合手。解决了一些以前碰到的问题。 Code 代码折叠 代码展开 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677const port = 3001;const baseDir = &#x27;./&#x27;;const defIndex = &#x27;index.html&#x27;;const mockApiPrefix = &#x27;/api/&#x27;;const mockData = &#123; [mockApiPrefix+&#x27;a&#x27;]: &#123; code:&#x27;200&#x27;, msg: &#x27;成功1&#x27;, data: &#123;a: &#x27;aaa&#x27;, bg: &#x27;123ss&#x27;&#125; &#125;, [mockApiPrefix+&#x27;b&#x27;]:&#123; code:&#x27;200&#x27;, msg: &#x27;成功2&#x27;, data: &#123;b: &#x27;bbb&#x27;, sf: &#x27;456ss&#x27;&#125; &#125;&#125;;const http = require(&#x27;http&#x27;), fs = require(&#x27;fs&#x27;), url = require(&#x27;url&#x27;), path = require(&#x27;path&#x27;), os = require(&#x27;os&#x27;), mine = &#123; &#x27;css&#x27;: &#x27;text/css&#x27;, &#x27;gif&#x27;: &#x27;image/gif&#x27;, &#x27;html&#x27;: &#x27;text/html&#x27;, &#x27;ico&#x27;: &#x27;image/x-icon&#x27;, &#x27;xml&#x27;: &#x27;text/xml&#x27;, &#x27;jpeg&#x27;: &#x27;image/jpeg&#x27;, &#x27;jpg&#x27;: &#x27;image/jpeg&#x27;, &#x27;js&#x27;: &#x27;text/javascript&#x27;, &#x27;json&#x27;: &#x27;application/json&#x27;, &#x27;pdf&#x27;: &#x27;application/pdf&#x27;, &#x27;png&#x27;: &#x27;image/png&#x27;, &#x27;svg&#x27;: &#x27;image/svg+xml&#x27;, &#x27;swf&#x27;: &#x27;application/x-shockwave-flash&#x27;, &#x27;tiff&#x27;: &#x27;image/tiff&#x27;, &#x27;txt&#x27;: &#x27;text/plain&#x27;, &#x27;wav&#x27;: &#x27;audio/x-wav&#x27;, &#x27;wma&#x27;: &#x27;audio/x-ms-wma&#x27;, &#x27;wmv&#x27;: &#x27;video/x-ms-wmv&#x27;&#125;, clientIP = (() =&gt; &#123; let nets = os.networkInterfaces(); for (let a in nets) &#123; let ifaces = nets[a]; for (let o in ifaces) &#123; if (ifaces[o].family == &#x27;IPv4&#x27; &amp;&amp; !ifaces[o].internal) return ifaces[o].address; &#125; &#125; return &#x27;&#x27;; &#125;)();http.createServer(function (req, res) &#123; const mockApi = url =&gt; &#123; console.log(`++++ [ajax]: $&#123;url&#125;`); let apiUrl = mockApiPrefix.indexOf(&#x27;/&#x27;)===0 ? url : url.slice(1); if(apiUrl in mockData)&#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27; &#125;); res.end(JSON.stringify(mockData[apiUrl])); &#125;else&#123; res.writeHead(404, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); res.end(&#x27;no data &amp; no such url&#x27;); &#125; console.log(` ...done`); &#125;; const readHtml = name =&gt; &#123; console.log(`++++ request: $&#123;name&#125;`); let status = 200, exist = fs.existsSync(name), data; if(exist) data = fs.readFileSync(name, &#x27;utf-8&#x27;); else data = `file:$&#123;name&#125; not exist!`, status = 404; res.writeHead(status, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;); res.end(data); console.log(` ...done`); &#125;; const readBinary = name =&gt;&#123; console.log(`++++ request: $&#123;name&#125;`); let exist = fs.existsSync(name); if(exist)&#123; res.writeHead(200, &#123;&#x27;Content-Type&#x27;: mine[ext] || &#x27;text/plain&#x27;&#125;); res.end(fs.readFileSync(name, &#x27;binary&#x27;), &#x27;binary&#x27;); &#125;else&#123; res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;); res.end(`file:$&#123;name&#125; not exist!`); &#125; console.log(` ...done`); &#125;; let pathname = url.parse(req.url).pathname, realPath = path.join(baseDir, pathname), ext = path.extname(realPath); ext = ext ? ext.slice(1) : &#x27;unknown&#x27;; if(pathname===&#x27;/&#x27;) readHtml(path.join(baseDir, defIndex)); else if(ext === &#x27;html&#x27;) readHtml(realPath); else if(ext in mine) readBinary(realPath); else if(pathname.indexOf(mockApiPrefix)&gt;-1) mockApi(pathname); else&#123; console.log(`++++ request: / =&gt; $&#123;realPath&#125;`); res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;); res.write(&#x27;no data&#x27;); console.log(` ...done`); res.end(); &#125;&#125;).listen(port, &#x27;0.0.0.0&#x27;, function () &#123; console.log(&#x27;===== Server running: localhost =&gt; http://%s:%s =============================================&#x27;, clientIP || &#x27;localhost&#x27;, port);&#125;);","tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://zuitaibai.github.io/blog/tags/nodejs/"},{"name":"路由","slug":"路由","permalink":"https://zuitaibai.github.io/blog/tags/%E8%B7%AF%E7%94%B1/"}],"categories":[{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nodejs","slug":"服务端/nodejs","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nodejs/"}]},{"title":"nginx.conf","date":"2017-03-29T06:15:50.000Z","path":"2017/03/29/服务端-nginx-2017-03-29-nginx-conf/","text":"&nbsp; 方式一静态资源逐个指定后缀代理至本地，api代理至其它。本地经由8000端口又转了一下，依据不同项目名指向本地不同文件夹。 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#user nobody; #配置用户或者组，默认为nobody nobody。worker_processes 1; #允许生成的进程数，默认为1,在master/worker运行方式下 worker进程的数目，一般情况下用户要配置与CPU内核数相等的worker进程#error_log logs/error.log; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别依次为：debug|info|notice|warn|error|crit|alert|emerg#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid; #指定nginx进程运行文件存放地址#daemon on | off 默认on #是否以守护进程的方式运行nginx，守护进程是指脱离终端并且在后头运行的进程，关闭守护进程执行的方式可以让我们方便调试nginx#master_process on | off 默认on #是否以master/worker方式进行工作，在实际的环境中 nginx是以一个master进程管理多个worker进程的方式运行的，关闭后 nginx就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求#worker_cpu_affinity 1000 0100 0010 0001; #worker_cpu_affinity cpumask[cpumask…],绑定worker进程到指定的cpu内核,每一个worker进程都独享一个CPU，可以在内核的调度策略上实现完全的并发events &#123; #events模块包含了nginx了有关连接处理的配置 worker_connections 1024; #最大连接数，默认为512,设置一个worker能够同时打开的最大连接数，该值最大为worker_rlimit_nofile的值,在nginx作为http服务器的时候，最大连接数为worker_processes * worker_connctions,在nginx作为反向代理服务器的时候，最大连接数为worker_processes * worker_connections / 2 #accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on #multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off #use epoll; #设置用于客户端线程的轮询方式，默认nginx会选择一个最适合你操作系统的.事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport&#125;http &#123; #http模块下配置有server location upstream等不同的内容 include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型，默认为text/plain #log_format myFormat &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #用于设置日志的记录格式,当nginx位于负载均衡设备，反向代理服务器之后的时候，无法直接获得客户端真实的ip，但是反向代理服务器转发的http头信息中，可以增加X-Forwarded-For信息，记录原有的客户端ip地址 和原来客户端请求的服务器地址，这个时候可以通过log_format指令来设置日志格式，将X-Forwarded-For信息打入日志中 #access_log off; #取消服务日志 #access_log logs/access.log myFormat; #combined为日志格式的默认值 sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。 #tcp_nopush on; #sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。 keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。 #gzip on; #error_page 404 https://www.baidu.com; #错误页 upstream dfb3 &#123; #Upstream模块是与反向代理，负载均衡相关的模块 #指定了一个叫dfb3的代理服务器，可以在proxy_pass和fastcgi_pass中使用,默认的负载均衡方式为加权轮询，可以在配置项使用使用ip_hash来使用ip哈希 #weight指定了每个server的权重默认是1 #server 127.0.0.1:8080 max_fails=3 fail_timeout=30s; #max_fails指定了在fail_timeout(默认是60s)内对后端服务器请求失败的次数,达到次数后会在fail_timeout时间内不再去查询它 #---------------------------------------------------------------------------------------------- #测试 ultimate #server www.xxx.com weight=5; #开发 Dev #server 192.168.1.50:80 weight=5; #准上线 STG #server www.zzzz.com weight=5; #某某 #server 192.168.1.121:80 weight=5; #---------------------------------------------------------------------------------------------- &#125; upstream staticservice &#123; server 127.0.0.1:8000; &#125; server &#123; listen 8080; #监听端口 server_name localhost; #监听地址 ,由于IP地址的数量有限，因此经常存在多个主机域名对应同一个ip的情况，这个时候可以按照server_name通过server块来定义虚拟主机，每个server块是一个虚拟主机，处理满足相应listen端口,和server_name的请求 #server_name与host的匹配优先级如下 #首先选中所有字符串完全匹配的server_name，如www.nginx.org #其次选中通配符在前面的server_name，如*.nginx.org #再次选择通配符在后面的server_name，如www.nginx.* #最后选择使用正则表达式才匹配的server_name，如~^\\.testweb\\.com$ #keepalive_requests 120; #单连接请求上限次数。 #charset koi8-r; #access_log logs/host.access.log myFormat; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|js|css|html|eot|svg|ttf|woff|ico|xlsx)$ &#123; #location会尝试根据用户请求中的URI来匹配设置的表达式 并选中最终结果中的配置来处理用户的请求。 #location [=|~|~*|^~|@] / uri / &#123; … &#125; =表示把uri作为字符串，与参数中的URI作完全匹配 #~进行正则表达式匹配的时候，区分大小写 #~*进行正则表达式匹配的时候，不区分大小写 #^~表示匹配URI的时候，如果该location是最佳匹配，那么对于匹配这个location的字符串不在进行正则表达式的匹配检测 #@表示仅用于nginx服务内部请求之间的重定向，带有@的location不直接处理用户请求 #匹配的优先级如下 #1、如果查询精确的命中了一个使用=前缀的location，那个它将被使用，并结束匹配 #2、在剩下普通字符串中，将按照最大前缀匹配的原则进行匹配，将结果最后候选结果，如果最终命中的结果使用了^~前缀表示或者它是一个完全匹配，那么它将被使用，并结束匹配 #3、正则表达式匹配时，按照正则表达式在配置文件中出现的顺序，并且只有匹配到了一条正则local，就不在匹配下面的local了 #4、如果步骤3命中了一个匹配，那个它将被使用，否则将使用步骤2的候选结果 #（普通字符串和正则字符串的区别 ~和~*前缀表示location是正则字符串，其他前缀和无前缀表示location是普通字符串） root html/; #根目录 #index vv.txt; #设置默认页 #deny 127.0.0.1; #拒绝的ip #allow 172.18.5.54; #允许的ip proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Accept-Encoding &quot;none&quot;; proxy_ignore_headers &quot;Cache-Control&quot; &quot;Expires&quot;; #expires 3d; if ( !-e $request_filename )&#123; proxy_pass http://staticservice; #请求转向staticservice 定义的服务器列表 &#125; &#125; location / &#123; proxy_pass http://dfb3/; &#125; &#125; server &#123; listen 8000; server_name 0.0.0.0; location / &#123; root E:/workSpace/xxx/yyy/aaa/main; index mainFrame.html; &#125; location /goods/ &#123; root E:/workSpace/xxx/yyy/bbb/main; &#125; location /afddd-mmu/ &#123; root E:/workSpace/xxx/yyy/ccc/main; &#125; location ~ /xlljj-ii/ &#123; root E:/workSpace/xxx/yyy/ddd/main; index main.html; &#125; &#125;&#125;#每个指令必须有分号结束。#惊群现象： 一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。#1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；#2.$remote_user ： 用来记录客户端用户名称；#3.$time_local ： 用来记录访问时间与时区；#4.$request ： 用来记录请求的url与http协议；#5.$status ： 用来记录请求状态；成功是200，#6.$body_bytes_s ent ： 记录发送给客户端文件主体内容大小；#7.$http_referer ： 用来记录从那个页面链接访问过来的#8.$http_user_agent ： 记录客户端浏览器的相关信息； 方式二启5000访问，，静态文件代理至本地已启服务器8001，api代理至其它。 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384# 启动：nginx || start nginx# 停止：nginx -s stop || nginx -s quit //stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息# 重载：nginx -s reload# 版本：nginx -v# 检查配置：nginx -t# reopen log：nginx -s reopen#user nobody; #配置用户或者组，默认为nobody nobody。worker_processes 1; #允许生成的进程数，默认为1,在master/worker运行方式下 worker进程的数目，一般情况下用户要配置与CPU内核数相等的worker进程#error_log logs/error.log; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别依次为：debug|info|notice|warn|error|crit|alert|emerg#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid; #指定nginx进程运行文件存放地址#daemon on | off 默认on #是否以守护进程的方式运行nginx，守护进程是指脱离终端并且在后头运行的进程，关闭守护进程执行的方式可以让我们方便调试nginx#master_process on | off 默认on #是否以master/worker方式进行工作，在实际的环境中 nginx是以一个master进程管理多个worker进程的方式运行的，关闭后 nginx就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求#worker_cpu_affinity 1000 0100 0010 0001; #worker_cpu_affinity cpumask[cpumask…],绑定worker进程到指定的cpu内核,每一个worker进程都独享一个CPU，可以在内核的调度策略上实现完全的并发events &#123; #events模块包含了nginx了有关连接处理的配置 worker_connections 1024; #最大连接数，默认为512,设置一个worker能够同时打开的最大连接数，该值最大为worker_rlimit_nofile的值,在nginx作为http服务器的时候，最大连接数为worker_processes * worker_connctions,在nginx作为反向代理服务器的时候，最大连接数为worker_processes * worker_connections / 2 #accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on #multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off #use epoll; #设置用于客户端线程的轮询方式，默认nginx会选择一个最适合你操作系统的.事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport&#125;http &#123; #http模块下配置有server location upstream等不同的内容 include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型，默认为text/plain #log_format myFormat &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #用于设置日志的记录格式,当nginx位于负载均衡设备，反向代理服务器之后的时候，无法直接获得客户端真实的ip，但是反向代理服务器转发的http头信息中，可以增加X-Forwarded-For信息，记录原有的客户端ip地址 和原来客户端请求的服务器地址，这个时候可以通过log_format指令来设置日志格式，将X-Forwarded-For信息打入日志中 #access_log off; #取消服务日志 #access_log logs/access.log myFormat; #combined为日志格式的默认值 sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。 #tcp_nopush on; #sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。 keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。 #gzip on; #error_page 404 https://www.baidu.com; #错误页 #Upstream模块是与反向代理，负载均衡相关的模块 upstream firstdemo &#123; #ip_hash; #ip_hash它的作用是如果第一次访问该服务器后就记录，之后再访问都是该服务器了 server 39.106.145.33; server 47.93.6.93; &#125; server&#123; listen 5000; server_name localhost5000; location /&#123; # proxy_pass http://192.168.0.105:8001; #公司 proxy_pass http://192.168.1.3:8001; #家 &#125; location /jinqiao&#123; proxy_pass http://59.110.24.201/jinqiao; # proxy_pass http://vjpeng.s1.natapp.cc/jinqiao; &#125; location /kouqiang&#123; proxy_pass http://59.110.24.201/kouqiang; # proxy_pass http://vjpeng.s1.natapp.cc/kouqiang; &#125; location /sth &#123; proxy_pass http://firstdemo; &#125; &#125;&#125; 原始conf 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#x27;s document root # concurs with nginx&#x27;s one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125;","tags":[{"name":"nginx","slug":"nginx","permalink":"https://zuitaibai.github.io/blog/tags/nginx/"},{"name":"conf","slug":"conf","permalink":"https://zuitaibai.github.io/blog/tags/conf/"}],"categories":[{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nginx","slug":"服务端/nginx","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nginx/"}]},{"title":"react-router 按需加载（转）","date":"2017-03-02T09:27:14.000Z","path":"2017/03/02/前端框架-react-2017-03-02-react-router-按需加载/","text":"React Router 是一个非常出色的路由解决方案，同时也非常容易上手。但是当网站规模越来越大的时候，首先出现的问题是 Javascript 文件变得巨大，这导致首页渲染的时间让人难以忍受。实际上程序应当只加载当前渲染页所需的 JavaScript，也就是大家说的“代码分拆” — 将所有的代码分拆成多个小包，在用户浏览过程中按需加载。 官方示例在 这里。 所得到的效果是： 现在是这样： 实际上就是将一个大 javascript 文件拆分成了若干个 chunk file。 下面是改造过程 Webpack 配置首先在 webpack.config.js 的 output 内加上 chunkFilename 代码折叠 代码展开 1234567output: &#123; path: path.join(__dirname, &#x27;/../dist/assets&#x27;), filename: &#x27;app.js&#x27;, publicPath: defaultSettings.publicPath, // 添加 chunkFilename chunkFilename: &#x27;[name].[chunkhash:5].chunk.js&#x27;,&#125;, name 是在代码里为创建的 chunk 指定的名字，如果代码中没指定则 webpack 默认分配 id 作为 name。 chunkhash 是文件的 hash 码，这里只使用前五位。 添加首页以前你的路由大概应该是这样的：（作为需要按需加载的大型应用，路由肯定是相当复杂，这里只列举部分路由举例） 代码折叠 代码展开 1234567891011121314151617181920212223ReactDOM.render( ( &lt;Router history=&#123;browserHistory&#125;&gt; &#123;/* 主页 */&#125; &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt; &#123;/* 默认 */&#125; &lt;IndexRoute component=&#123;HomePage&#125; /&gt; &#123;/* baidu */&#125; &lt;Route path=&quot;/baidu&quot; component=&#123;BaiduPage&#125;&gt; &lt;Route path=&quot;result&quot; component=&#123;BaiduResultPage&#125; /&gt; &lt;Route path=&quot;frequency&quot; component=&#123;BaiduFrequencyPage&#125; /&gt; &lt;/Route&gt; &#123;/* 404 */&#125; &lt;Route path=&#x27;/404&#x27; component=&#123;NotFoundPage&#125; /&gt; &#123;/* 其他重定向到 404 */&#125; &lt;Redirect from=&#x27;*&#x27; to=&#x27;/404&#x27; /&gt; &lt;/Route&gt; &lt;/Router&gt; ), document.getElementById(&#x27;app&#x27;)); 按需加载之后，我们需要让路由动态加载组件，需要将 component 换成 getComponent。首先将路由拆出来（因为路由庞大之后全部写在一起会很难看），创建一个根路由 rootRoute： 代码折叠 代码展开 1234567891011121314151617181920212223242526272829const rootRoute = &#123; path: &#x27;/&#x27;, indexRoute: &#123; getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, require(&#x27;components/layer/HomePage&#x27;)) &#125;, &#x27;HomePage&#x27;) &#125;, &#125;, getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, require(&#x27;components/Main&#x27;)) &#125;, &#x27;Main&#x27;) &#125;, childRoutes: [ require(&#x27;./routes/baidu&#x27;), require(&#x27;./routes/404&#x27;), require(&#x27;./routes/redirect&#x27;) ]&#125;ReactDOM.render( ( &lt;Router history=&#123;browserHistory&#125; routes=&#123;rootRoute&#125; /&gt; ), document.getElementById(&#x27;app&#x27;)); history 不变，在 Router 中添加 routes 属性，将创建的路由传递进去。 这里有四个属性： path将匹配的路由，也就是以前的 path。 getComponent 对应于以前的 component 属性，但是这个方法是异步的，也就是当路由匹配时，才会调用这个方法。 这里面有个 require.ensure 方法 1require.ensure(dependencies, callback, chunkName) 这是 webpack 提供的方法，这也是按需加载的核心方法。第一个参数是依赖，第二个是回调函数，第三个就是上面提到的 chunkName，用来指定这个 chunk file 的 name。 如果需要返回多个子组件，则使用 getComponents 方法，将多个组件作为一个对象的属性通过 cb 返回出去即可。这个在官方示例也有，但是我们这里并不需要，而且根组件是不能返回多个子组件的，所以使用 getComponent。 indexRoute 用来设置主页，对应于以前的 &lt;IndexRoute&gt;。 注意这里的 indexRoute 写法， 这是个对象，在对象里面使用 getComponent。 childRoutes 这里面放置的就是子路由的配置，对应于以前的子路由们。我们将以前的 /baidu、/404 和 * 都拆了出来，接下来将分别为他们创建路由配置。 路由控制上面的childRoutes 里面，我们 require 了三个子路由，在目录下创建 routes 目录，将这三个路由放置进去。 代码折叠 代码展开 123456789101112routes/├── 404│ └── index.js├── baidu│ ├── index.js│ └── routes│ ├── frequency│ │ └── index.js│ └── result│ └── index.js└── redirect └── index.js 和 rootRoute 类似，里面的每个 index.js 都是一个路由对象： /404/index.js 代码折叠 代码展开 123456789module.exports = &#123; path: &#x27;404&#x27;, getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, require(&#x27;components/layer/NotFoundPage&#x27;)) &#125;, &#x27;NotFoundPage&#x27;) &#125;&#125; /baidu/index.js 代码折叠 代码展开 123456789101112131415161718module.exports = &#123; path: &#x27;baidu&#x27;, getChildRoutes(partialNextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, [ require(&#x27;./routes/result&#x27;), require(&#x27;./routes/frequency&#x27;) ]) &#125;) &#125;, getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, require(&#x27;components/layer/BaiduPage&#x27;)) &#125;, &#x27;BaiduPage&#x27;) &#125;&#125; /baidu/routes/frequency/index.js 代码折叠 代码展开 123456789module.exports = &#123; path: &#x27;frequency&#x27;, getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; cb(null, require(&#x27;components/layer/BaiduFrequencyPage&#x27;)) &#125;, &#x27;BaiduFrequencyPage&#x27;) &#125;&#125; 举这几个例子应该就差不多了，其他都是一样的，稍微有点特别的是 redirect。 设置 Redirect之前我们在根路由下是这么设置重定向的： 代码折叠 代码展开 123456789101112131415&lt;Router history=&#123;browserHistory&#125;&gt; &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt; &#123;/* home */&#125; &lt;IndexRoute component=&#123;HomePage&#125; /&gt; &lt;Route path=&quot;/baidu&quot; component=&#123;BaiduPage&#125;&gt; &lt;Route path=&quot;result&quot; component=&#123;BaiduResultPage&#125; /&gt; &lt;Route path=&quot;frequency&quot; component=&#123;BaiduFrequencyPage&#125; /&gt; &lt;/Route&gt; &lt;Route path=&#x27;/404&#x27; component=&#123;NotFoundPage&#125; /&gt; &#123;/* 如果都不匹配，重定向到 404 */&#125; &lt;Redirect from=&#x27;*&#x27; to=&#x27;/404&#x27; /&gt; &lt;/Route&gt; &lt;/Router&gt; 当改写之后，我们需要把这个重定向的路由单独拆出来，也就是 * 这个路由，我们上面已经为他创建了一个 redirect 目录。这里使用到 onEnter 方法，然后在这个方法里改变路由状态，调到另外的路由，实现 redirect ： /redirect/index.js 代码折叠 代码展开 1234module.exports = &#123; path: &#x27;*&#x27;, onEnter: (_, replaceState) =&gt; replaceState(null, &quot;/404&quot;)&#125; The root route must render a single element跟着官方示例和上面码出来之后，可能页面并没有渲染出来，而是报 The root route must render a single element 这个异常，这是因为 module.exports 和 ES6 里的 export default 有区别。 如果你是使用 es6 的写法，也就是你的组件都是通过 export default 导出的，那么在 getComponent 方法里面需要加入 .default。 代码折叠 代码展开 123456getComponent(nextState, cb) &#123; require.ensure([], (require) =&gt; &#123; // 在后面加 .default cb(null, require(&#x27;components/layer/ReportPage&#x27;)).default &#125;, &#x27;ReportPage&#x27;)&#125; 如果你是使用 CommonJS 的写法，也就是通过 module.exports 导出的，那就无须加 .default 了。","tags":[{"name":"react-router","slug":"react-router","permalink":"https://zuitaibai.github.io/blog/tags/react-router/"},{"name":"react","slug":"react","permalink":"https://zuitaibai.github.io/blog/tags/react/"},{"name":"router","slug":"router","permalink":"https://zuitaibai.github.io/blog/tags/router/"}],"categories":[{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"react","slug":"前端框架/react","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/react/"}]},{"title":"npm命令","date":"2017-02-03T09:52:49.000Z","path":"2017/02/03/服务端-nodejs-2017-02-03-npm命令/","text":"npm命令 npm install 安装模块 npm bin 显示npm的bin目录 npm config delete 删除npm配置 npm config get 获取npm配置 npm config set [–global] 设置npm配置 npm config set proxy=http://proxy.tencent.com:8080 设置代理 npm config set registry http://npm.oa.com 设置npm的镜像地址 npm config edit 在编辑器中打开npm配置文件 npm init 交互式的创建package.json文件 npm pack 创建模块的压缩包,如果没有参数，则npm会打包当前模块目录 npm publish 发布模块 npm rm || npm uninstall 删除模块 npm search 查找模块 npm update 更新模块 npm start/stop/test 执行脚本 获取帮助npm helpnpm -h || npm help 例：npm help install npm 命令自动完成npm 通过bash提供了命令自动完成功能(包括Bash for Windows 10 ):npm completion &gt;&gt; ~/.bashrc || (or Z shell) npm completion &gt;&gt; ~/.zshrc重新加载shell配置文件： source ~/.bashrc现在，在终端注入 npm ins ，然后按下 tab 键就会出现 install 了，不会再浪费时间去全部输入了。 修复全局模块的权限持续更新npmnpm -vnpm install -g npm当 Node 的主版本 released 之后，你也可能需要重新构建 C++ 扩展：npm rebuild如果你需要管理多个版本的node.js和npm，可以考虑使用n或者nvm(Linux, macOS） 定义默认的 npm initnpm init -y 表示你能接受 package.json 文件的一堆默认值或者你可以设置一些语义化的默认值：npm config set init.author.name npm config set init.author.email 更精准的模块搜索到目前为止，npm上已经有超过350000个模块了，并且每天还在持续增长。尽管有很多非常棒的模块，但是你还是想避免使用一些不受欢迎的、存在bug的或者无人维护的模块。在npmjs 和Github 上搜索npm模块是很实用但这还有一些其它选择： npmsnpms根据一个基于项目版本、模块下载次数、最新更新日期、提交频率、测试覆盖率、文档、贡献者数量、issues数、star数、forks数和作者在社区的地位的综合测量分数进行模块排名。 npm Discovernpm Discover定位于快速搜索和其它模块通常一起使用的模块，如body-parser通常和Express一起使用。 Packages by PageRankPackages by PageRank按照模块的谷歌排名进行搜索和排序。 Curated npm Lists还一个选择就是利用别人的搜索结果。当需要一个健壮的解决方案时，我经常会参考sindresorhus的Awesome Node.js。 管理你的模块npm list (ls、la &amp; ll 可以用作 list 的别名)npm list –depth=0npm home 打开一个模块的主页npm repo 这只有在你的系统能打开浏览器时有用–在服务端的系统上会失败。同样，可以打开一个模块的 Github 仓库npm docs 或者它的文档npm bugs 或者它目前的bugs列表npm prune npm list会显示和你已经安装地模块的关联模块—这些没有在 package.json文件中被引用。你可以单独 npm uninstall 每一个模块或者全部移除它们 (如果安装模块时你添加了 –production 标记或者 NODE_ENV 被设置成 production，package.json 文件中被指定为 devDependencies 的模块也会被移除。) 锁定依赖默认情况下，当用 –save/-S 或者 –save-dev/-D 安装一个模块时，npm 通过脱字符(^)来限定所安装模块的主版本号。例如，当运行 npm update 时， ^1.5.1 允许安装版本号大于 1.5.1 但小于 2.0.0 版本的模块。npm config set save-prefix=”“ 波浪号()字符是限定模块的次要版本。例如，当运行 npm update 时， 1.5.1 允许安装版本号大于 1.5.1但小于 1.6.0 版本的模块。可以将需要安装的模块版本前缀默认设置成波浪号()npm config set save-exact true 对于那些偏执的认为任何更新(模块的行为)会破坏系统的人，可以配置npm仅安装精确版本号的模块：npm shrinkwrap 另一个选择是，可以在项目中使用 shrinkwrap。 这会生成一个 shrinkwrap.json 文件，该文件包含了你正在使用的模块的指定版本。当运行 npm install时，该文件所指定的模块版本会覆盖 package.json 文件中所指定的版本。 找出过时的模块怎么知道一个模块已经更新了呢？我之前的方式是先列举出项目所依赖的模块(npm list –depth=0)，然后在 npmjs.com 上找到该模块，手动检查该模块的版本是否已经更新。这非常费时。幸运的是，有一个更简单的方式：npm outdated (或者 npm outdated -g 来查找全局模块。)npm list 你也可以查看一个独立模块的当前版本npm view versions 也可以查看检验当前和历史版本 (npm view 会显示一个独立模块的所有信息，包括它的依赖、关键字、更新日期、贡献者、仓库地址和许可证等。) 使用开发中的模块当你正在开发一个模块时，会经常想在其它项目中尝试使用或者在任何一个目录运行它(如果你的应用支持)，这时没必要将其发布到 npm，并全局安装—仅需在该模块所在目录使用下面的命令：npn link 该命令会为模块在全局目录下创建一个符号链接npm list -g –depth=0 || npm outdated -g 可以通过下面的命令查看模块引用现在，就可以从命令行运行模块或者通过 require 在任何项目中引入该模块。 另一个选择是，可以通过文件路径在 package.json 文件中声明对该模块的依赖： “dependencies”: {“myproject”: “file:../myproject/“}","tags":[{"name":"命令","slug":"命令","permalink":"https://zuitaibai.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"},{"name":"nodejs","slug":"nodejs","permalink":"https://zuitaibai.github.io/blog/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"https://zuitaibai.github.io/blog/tags/npm/"}],"categories":[{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nodejs","slug":"服务端/nodejs","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nodejs/"}]},{"title":"Vim文本编辑命令","date":"2017-02-03T09:28:33.000Z","path":"2017/02/03/常用工具和插件-IDE-2017-02-03-Vim文本编辑命令/","text":"Vim 介绍 Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999 年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。 文件命令vim file 打开单个文件vim file1 file2 file3 … 同时打开多个文件:open file 在vim窗口中打开一个新文件:split file在新窗口中打开文件:bn切换到下一个文件:bp切换到上一个文件:args查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。:e ftp://192.168.10.76/abc.txt 打开远程文件，比如ftp或者share folder:e \\qadrive\\test\\1.txt Vim模式正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空插入模式（按i键进入） 左下角显示–INSERT–可视模式（正常模式下 按v进入） 左下角显示–VISUAL– 插入命令i 在当前位置生前插入I 在当前行首插入a 在当前位置后插入A 在当前行尾插入o 在当前行之后插入一行O 在当前行之前插入一行cw 替换从光标所在位置后到一个单词结尾的字符 简单的移动光标0 → 数字零，到行头^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）$ → 到本行行尾g_ → 到本行最后一个不是blank字符的位置。/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个） 拷贝／粘贴P → 粘贴（p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）yy → 拷贝当前行当行于 ddP Undo/Redou → undo → redo 打开/保存/退出/改变文件(Buffer):e &lt;path/to/file&gt; → 打开一个文件:w → 存盘:saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt;:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车):q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。 到此为止，以上为Vim的一些基本操作所需要的命令。 查找命令/text 查找text，按n健查找下一个，按N健查找前一个。?text 查找text，反向查找，按n健查找下一个，按N健查找前一个。////vim中有一些特殊字符在查找时需要转义 .*[]^%/?~$:set ignorecase 忽略大小写的查找:set noignorecase 不忽略大小写的查找////查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。:set hlsearch 高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。:set nohlsearch 关闭高亮搜索显示:nohlsearch 关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。:set incsearch 逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。:set wrapscan 重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。 替换命令ra 将当前字符替换为a，当期字符即光标所在字符。s/old/new/ 用old替换new，替换当前行的第一个匹配s/old/new/g 用old替换new，替换当前行的所有匹配%s/old/new/ 用old替换new，替换所有行的第一个匹配%s/old/new/g 用old替换new，替换整个文件的所有匹配:10,20 s/^/ /g 在第10行知第20行每行前面加四个空格，用于缩进。ddp 交换光标所在行和其下紧邻的一行。","tags":[{"name":"命令","slug":"命令","permalink":"https://zuitaibai.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"},{"name":"vim","slug":"vim","permalink":"https://zuitaibai.github.io/blog/tags/vim/"}],"categories":[{"name":"常用工具和插件","slug":"常用工具和插件","permalink":"https://zuitaibai.github.io/blog/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8F%92%E4%BB%B6/"},{"name":"IDE","slug":"常用工具和插件/IDE","permalink":"https://zuitaibai.github.io/blog/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8F%92%E4%BB%B6/IDE/"}]},{"title":"git常用命令","date":"2017-02-03T06:42:35.000Z","path":"2017/02/03/开发流程-git-2017-02-03-git常用命令/","text":"Workspace：工作区； Index / Stage：暂存区； Repository：仓库区（或本地仓库）； Remote：远程仓库 新建代码库123git init # 在当前目录新建一个Git代码库git init [project-name] # 新建一个目录，将其初始化为Git代码库git clone [url] # 下载一个项目和它的整个代码历史 配置 代码折叠 代码展开 1234git config --list # 显示当前的Git配置git config -e [--global] # 编辑Git配置文件git config [--global] user.name &quot;[name]&quot; # 设置提交代码时的用户信息git config [--global] user.email &quot;[email address]&quot; 增加/删除文件 代码折叠 代码展开 12345678git add # 追加到缓冲区git add [file1] [file2] ... # 添加指定文件到暂存区git add [dir] # 添加指定目录到暂存区，包括子目录git add . # 添加当前目录的所有文件到暂存区git add -p # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交git rm [file1] [file2] ... # 删除工作区文件，并且将这次删除放入暂存区git rm --cached [file] # 停止追踪指定文件，但该文件会保留在工作区git mv [file-original] [file-renamed] # 改名文件，并且将这个改名放入暂存区 代码提交 代码折叠 代码展开 123456git commit -m [message] # 提交暂存区到仓库区git commit [file1] [file2] ... -m [message] # 提交暂存区的指定文件到仓库区git commit -a # 提交工作区自上次commit之后的变化，直接到仓库区git commit -v # 提交时显示所有diff信息git commit --amend -m [message] # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend [file1] [file2] ... # 重做上一次commit，并包括指定文件的新变化 分支 代码折叠 代码展开 1234567891011121314151617git branch # 列出所有本地分支git branch -r # 列出所有远程分支git branch -a # 列出所有本地分支和远程分支git branch [branch-name] # 新建一个分支，但依然停留在当前分支git checkout -b [branch] # 新建一个分支，并切换到该分支git checkout -b [branch-name] origin/dev # 拉取dev并创建分支git branch [branch] [commit] # 新建一个分支，指向指定commitgit branch --track [branch] [remote-branch] # 新建一个分支，与指定的远程分支建立追踪关系git checkout [branch-name] # 切换到指定分支，并更新工作区git checkout - # 切换到上一个分支git branch --set-upstream [branch] [remote-branch] # 建立追踪关系，在现有分支与指定的远程分支之间git merge [branch] # 合并指定分支到当前分支git cherry-pick [commit] # 选择一个commit，合并进当前分支git branch -d [branch-name] # 删除分支git push origin [branch-name] # 推送分支git push origin --delete [branch-name] # 删除远程分支git branch -dr [remote/branch] 标签 代码折叠 代码展开 123456789git tag # 列出所有taggit tag [tag] # 新建一个tag在当前commitgit tag [tag] [commit] # 新建一个tag在指定commitgit tag -d [tag] # 删除本地taggit push origin :refs/tags/[tagName] # 删除远程taggit show [tag] # 查看tag信息git push [remote] [tag] # 提交指定taggit push [remote] --tags # 提交所有taggit checkout -b [branch] [tag] # 新建一个分支，指向某个tag 查看信息 代码折叠 代码展开 123456789101112131415161718192021git status # 显示有变更的文件git log # 显示当前分支的版本历史git log --stat # 显示commit历史，以及每次commit发生变更的文件git log -S [keyword] # 搜索提交历史，根据关键词git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD --grep feature # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件git log --follow [file] # 显示某个文件的版本历史，包括文件改名git whatchanged [file]git log -p [file] # 显示指定文件相关的每一次diffgit log -5 --pretty --oneline # 显示过去5次提交git shortlog -sn # 显示所有提交过的用户，按提交次数排序git blame [file] # 显示指定文件是什么人在什么时间修改过git diff # 显示暂存区和工作区的差异git diff --cached [file] # 显示暂存区和上一个commit的差异git diff HEAD # 显示工作区与当前分支最新commit之间的差异git diff [first-branch]...[second-branch] # 显示两次提交之间的差异git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; # 显示今天你写了多少行代码git show [commit] # 显示某次提交的元数据和内容变化git show --name-only [commit] # 显示某次提交发生变化的文件git show [commit]:[filename] # 显示某次提交时，某个文件的内容git reflog # 显示当前分支的最近几次提交 远程同步 代码折叠 代码展开 12345678git fetch [remote] # 下载远程仓库的所有变动git remote -v # 显示所有远程仓库git remote show [remote] # 显示某个远程仓库的信息git remote add [shortname] [url] # 增加一个新的远程仓库，并命名git pull [remote] [branch] # 取回远程仓库的变化，并与本地分支合并git push [remote] [branch] # 上传本地指定分支到远程仓库git push [remote] --force # 强行推送当前分支到远程仓库，即使有冲突git push [remote] --all # 推送所有分支到远程仓库 撤销 代码折叠 代码展开 1234567891011git checkout [file] # 恢复暂存区的指定文件到工作区git checkout [commit] [file] # 恢复某个commit的指定文件到暂存区和工作区git checkout . # 恢复暂存区的所有文件到工作区git reset [file] # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset --hard # 重置暂存区与工作区，与上一次commit保持一致git reset [commit] # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset --hard [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --keep [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变git revert [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支git stash # 暂时将未提交的变化移除，稍后再移入git stash pop 其他1git archive # 生成一个可供发布的压缩包","tags":[{"name":"命令","slug":"命令","permalink":"https://zuitaibai.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"},{"name":"git","slug":"git","permalink":"https://zuitaibai.github.io/blog/tags/git/"},{"name":"版本控制","slug":"版本控制","permalink":"https://zuitaibai.github.io/blog/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}],"categories":[{"name":"开发流程","slug":"开发流程","permalink":"https://zuitaibai.github.io/blog/categories/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"},{"name":"git","slug":"开发流程/git","permalink":"https://zuitaibai.github.io/blog/categories/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/git/"}]},{"title":"字体的中-英-Unicode对照表","date":"2016-06-13T08:07:54.000Z","path":"2016/06/13/计算机基础-编码-2016-06-13-字体的中-英-Unicode对照表/","text":"中文名 英文名 Unicode Mac OS 华文细黑 STHeiti Light [STXihei] \\534E\\6587\\7EC6\\9ED1 华文黑体 STHeiti \\534E\\6587\\9ED1\\4F53 华文楷体 STKaiti \\534E\\6587\\6977\\4F53 华文宋体 STSong \\534E\\6587\\5B8B\\4F53 华文仿宋 STFangsong \\534E\\6587\\4EFF\\5B8B 丽黑 Pro LiHei Pro Medium \\4E3D\\9ED1 Pro 丽宋 Pro LiSong Pro Light \\4E3D\\5B8B Pro 标楷体 BiauKai \\6807\\6977\\4F53 苹果丽中黑 Apple LiGothic Medium \\82F9\\679C\\4E3D\\4E2D\\9ED1 苹果丽细宋 Apple LiSung Light \\82F9\\679C\\4E3D\\7EC6\\5B8B Windows 新细明体 PMingLiU \\65B0\\7EC6\\660E\\4F53 细明体 MingLiU \\7EC6\\660E\\4F53 标楷体 DFKai-SB \\6807\\6977\\4F53 黑体 SimHei \\9ED1\\4F53 宋体 SimSun \\5B8B\\4F53 新宋体 NSimSun \\65B0\\5B8B\\4F53 仿宋 FangSong \\4EFF\\5B8B 楷体 KaiTi \\6977\\4F53 仿宋_GB2312 FangSong_GB2312 \\4EFF\\5B8B_GB2312 楷体_GB2312 KaiTi_GB2312 \\6977\\4F53_GB2312 微软正黑体 Microsoft JhengHei \\5FAE\\x8F6F\\6B63\\9ED1\\4F53 微软雅黑 Microsoft YaHei \\5FAE\\8F6F\\96C5\\9ED1 Office 隶书 LiSu \\96B6\\4E66 幼圆 YouYuan \\5E7C\\5706 华文细黑 STXihei \\534E\\6587\\7EC6\\9ED1 华文楷体 STKaiti \\534E\\6587\\6977\\4F53 华文宋体 STSong \\534E\\6587\\5B8B\\4F53 华文中宋 STZhongsong \\534E\\6587\\4E2D\\5B8B 华文仿宋 STFangsong \\534E\\6587\\4EFF\\5B8B 方正舒体 FZShuTi \\65B9\\6B63\\8212\\4F53 方正姚体 FZYaoti \\65B9\\6B63\\59DA\\4F53 华文彩云 STCaiyun \\534E\\6587\\5F69\\4E91 华文琥珀 STHupo \\534E\\6587\\7425\\73C0 华文隶书 STLiti \\534E\\6587\\96B6\\4E66 华文行楷 STXingkai \\534E\\6587\\884C\\6977 华文新魏 STXinwei \\534E\\6587\\65B0\\9B4F","tags":[{"name":"速查表","slug":"速查表","permalink":"https://zuitaibai.github.io/blog/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"},{"name":"Unicode","slug":"Unicode","permalink":"https://zuitaibai.github.io/blog/tags/Unicode/"},{"name":"字体","slug":"字体","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E4%BD%93/"}],"categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编码","slug":"计算机基础/编码","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A0%81/"}]},{"title":"HTTP状态码详解列表","date":"2016-06-13T06:46:03.000Z","path":"2016/06/13/网络和通讯-2016-06-13-HTTP状态码详解列表/","text":"状态码 含义 100 客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。 101 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。 102 由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。 200 请求已成功，请求所希望的响应头或数据体将随此响应返回。 201 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。 202 服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。 203 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。 204 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。 205 服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。 206 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。 207 由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。 300 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。 301 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。 302 请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。 303 对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。 304 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 该响应必须包含以下的头信息： Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。 305 被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。 306 在最新版的规范中，306状态码已经不再被使用。 307 请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 400 1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 2、请求参数有误。 401 当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。 402 该状态码是为了将来可能的需求而预留的。 403 服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。 404 请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。 405 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。 406 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。 407 与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。 408 请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。 409 由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。 410 被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。 411 服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。 412 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。 413 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。 414 请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。 415 对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。 416 如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。 417 在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。 421 从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。 422 从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。 422 请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV） 424 由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV） 425 在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。 426 客户端应当切换到TLS/1.0。（RFC 2817） 449 由微软扩展，代表请求应当在执行完适当的操作后进行重试。 500 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。 501 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。 502 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。 503 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。 504 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 注意：某些代理服务器在DNS查询超时时会返回400或者500错误 505 服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。 506 由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。 507 服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918) 509 服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。 510 获取资源所需要的策略并没有没满足。（RFC 2774）","tags":[{"name":"速查表","slug":"速查表","permalink":"https://zuitaibai.github.io/blog/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"},{"name":"HTTP状态码","slug":"HTTP状态码","permalink":"https://zuitaibai.github.io/blog/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"}],"categories":[{"name":"网络和通讯","slug":"网络和通讯","permalink":"https://zuitaibai.github.io/blog/categories/%E7%BD%91%E7%BB%9C%E5%92%8C%E9%80%9A%E8%AE%AF/"}]},{"title":"手机网站的几点注意（转）","date":"2016-06-13T03:23:58.000Z","path":"2016/06/13/移动端-2013-06-13-手机网站的几点注意（转）/","text":"对于手机网站建设，总结了如下注意： 安卓浏览器看背景图片，有些设备会模糊。用同等比例的图片在PC机上很清楚，但是手机上很模糊，原因是什么呢？经过研究，是devicePixelRatio作怪，因为手机分辨率太小，如果按照分辨率来显示网页，这样字会非常小，所以苹果当初就把iPhone 4的960640分辨率，在网页里只显示了480320，这样devicePixelRatio＝2。现在android比较乱，有1.5的，有2的也有3的。想让图片在手机里显示更为清晰，必须使用2x的背景图来代替img标签（一般情况都是用2倍）。例如一个div的宽高是100100，背景图必须得200200，然后background-size:contain;，这样显示出来的图片就比较清晰了。代码可以如下： 123background:url(../images/icon/all.png) no-repeat center center;-webkit-background-size:50px 50px;background-size:50px 50px; display:inline-block; width:100%; height:50px; 或者指定 background-size:contain; 都可以，大家试试！ 图片加载若您遇到图片加载很慢的问题，对这种情况，手机开发一般用canvas方法加载：具体的canvas API 参见：http://javascript.ruanyifeng.com/htmlapi/canvas.html下面举例说明一个canvas的例子： 1&lt;li&gt;&lt;canvas&gt;&lt;/canvas&gt;&lt;/li&gt; 动态加载图片和li，总共举例17张图片！ 代码折叠 代码展开 12345678910111213141516171819202122232425var zWin=$(window);var render=function()&#123; var padding=2; var winWidth=zWin.width(); var picWidth=&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Math.floor((winWidth-padding*3)/4); var tmpl =&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;&#x27;; for (var i=1;i&amp;lt;=totla;i++)&#123; var p=padding; var imgSrc=&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;img/&#x27;+i+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;.jpg&#x27;; if(i%4==1)&#123; p=0; &#125; tmpl +=&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;&amp;lt;li style=&quot;width:&#x27;+picWidth+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;px;height:&#x27;+picWidth+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;px;padding-left:&#x27;+p+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;px;padding-top:&#x27;+padding+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;px;&quot;&amp;gt;&amp;lt;canvas id=&quot;cvs_&#x27;+i+&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;&quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/li&amp;gt;&#x27;; var imageObj = new &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Image(); imageObj.index = i; imageObj.onload = function()&#123; var cvs =$(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;#cvs_&#x27;+this.index)[0].getContext(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#x27;2d&#x27;); cvs.width = this.width; cvs.height=this.height; cvs.drawImage(this,0,0); &#125; imageObj.src=imgSrc; &#125;&#125;render(); 防止手机中网页放大和缩小这点是最基本的，最为手机网站开发者来说应该都知道的，就是设置meta中的viewport还有就是，有些手机网站我们看到如下声明： 1&lt;!DOCTYPE html PUBLIC “-//WAPFORUM//DTD XHTML Mobile 1.0//EN” “http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;&gt; 设置了DTD的方式是XHTML的写法，假如我们页面运用的是html5，可以不用设置DTD,直接声明&lt;!DOCTYPE html&gt;。使用viewport使页面禁止缩放。 通常把user-scalable设置为0来关闭用户对页面视图缩放的行为。 1&lt;meta name=“viewport” content=“user-scalable=0” /&gt; 但是为了更好的兼容，我们会使用完整的viewport设置。 1&lt;meta name=“viewport” content=“width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0” /&gt; 当然，user-scalable=0,有的人也写成user-scalable=no，都可以的。 apple-mobile-web-app-capableapple-mobile-web-app-capable是设置Web应用是否以全屏模式运行。语法： 1&lt;meta name=“apple-mobile-web-app-capable” content=“yes”&gt; 说明：如果content设置为yes，Web应用会以全屏模式运行，反之，则不会。content的默认值是no，表示正常显示。你可以通过只读属性window.navigator.standalone来确定网页是否以全屏模式显示。兼容性：iOS 2.1 + format-detectionformat-detection 启动或禁用自动识别页面中的电话号码。语法： 1&lt;meta name=“format-detection” content=“telephone=no”&gt; 说明：默认情况下，设备会自动识别任何可能是电话号码的字符串。设置telephone=no可以禁用这项功能。兼容性iOS 1.0 + html5调用安卓或者ios的拨号功能html5提供了自动调用拨号的标签，只要在a标签的href中添加tel:就可以了。如下： 1&lt;a href=“tel:4008106999,1034”&gt;400-810-6999 转 1034&lt;/a&gt; 拨打手机直接如下 1&lt;a href=“tel:15677776767”&gt;点击拨打15677776767&lt;/a&gt; html5GPS定位功能具体请看：http://www.haorooms.com/post/html5_GPS_getCurrentPosition 上下拉动滚动条时卡顿、慢 代码折叠 代码展开 1234body &#123; -webkit-overflow-scrolling: touch; overflow-scrolling: touch;&#125; Android3+和iOS5+支持CSS3的新属性为overflow-scrolling 禁止复制、选中文本 代码折叠 代码展开 123456Element &#123; -webkit-user-select: none; -moz-user-select: none; -khtml-user-select: none; user-select: none;&#125; 解决移动设备可选中页面文本(视产品需要而定) 长时间按住页面出现闪退123element &#123; -webkit-touch-callout: none;&#125; iphone及ipad下输入框默认内阴影123Element&#123; -webkit-appearance: none;&#125; ios和android下触摸元素时出现半透明灰色遮罩123Element &#123; -webkit-tap-highlight-color:rgba(255,255,255,0)&#125; 设置alpha值为0就可以去除半透明灰色遮罩，备注：transparent的属性值在android下无效。后面一篇文章有详细介绍，地址：http://www.haorooms.com/post/phone_web_ysk active兼容处理 即 伪类 :active 失效方法一：body添加ontouchstart 1&lt;body ontouchstart=&quot;&quot;&gt; 方法二：js给 document 绑定 touchstart 或 touchend 事件 代码折叠 代码展开 123456789101112&lt;style&gt;a &#123; color: #000;&#125;a:active &#123; color: #fff;&#125;&lt;/style&gt;&lt;a herf=foo &gt;bar&lt;/a&gt;&lt;script&gt; document.addEventListener(‘touchstart’,function()&#123;&#125;,false);&lt;/script&gt; 动画定义3D启用硬件加速 代码折叠 代码展开 1234Element &#123; -webkit-transform:translate3d(0, 0, 0) transform: translate3d(0, 0, 0);&#125; 注意：3D变形会消耗更多的内存与功耗 Retina屏的1px边框123Element&#123; border-width: thin;&#125; webkit mask 兼容处理某些低端手机不支持css3 mask，可以选择性的降级处理。比如可以使用js判断来引用不同class： 代码折叠 代码展开 12345if( ‘WebkitMask’ in document.documentElement.style)&#123; alert(‘支持mask’);&#125; else &#123; alert(‘不支持mask’);&#125; 旋转屏幕时，字体大小调整的问题123html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123; -webkit-text-size-adjust:100%;&#125; transition闪屏设置内嵌的元素在 3D 空间如何呈现：保留3D 1-webkit-transform-style: preserve-3d; *设置进行转换的元素的背面在面对用户时是否可见：隐藏 * 1-webkit-backface-visibility:hidden; 圆角bug某些Android手机圆角失效 1background-clip: padding-box; 顶部状态栏背景色1&lt;meta name=“apple-mobile-web-app-status-bar-style” content=“black” /&gt; 说明：除非你先使用apple-mobile-web-app-capable指定全屏模式，否则这个meta标签不会起任何作用。如果content设置为default，则状态栏正常显示。如果设置为blank，则状态栏会有一个黑色的背景。如果设置为blank-translucent，则状态栏显示为黑色半透明。如果设置为default或blank，则页面显示在状态栏的下方，即状态栏占据上方部分，页面占据下方部分，二者没有遮挡对方或被遮挡。如果设置为blank-translucent，则页面会充满屏幕，其中页面顶部会被状态栏遮盖住（会覆盖页面20px高度，而iphone4和itouch4的Retina屏幕为40px）。默认值是default。兼容性iOS 2.1 + 设置缓存1&lt;meta http-equiv=“Cache-Control” content=“no-cache” /&gt; 手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。 桌面图标 代码折叠 代码展开 1234&lt;link rel=“apple-touch-icon” href=“touch-icon-iphone.png” /&gt;&lt;link rel=“apple-touch-icon” sizes=“76x76” href=“touch-icon-ipad.png” /&gt;&lt;link rel=“apple-touch-icon” sizes=“120x120” href=“touch-icon-iphone-retina.png” /&gt;&lt;link rel=“apple-touch-icon” sizes=“152x152” href=“touch-icon-ipad-retina.png” /&gt; iOS下针对不同设备定义不同的桌面图标。如果不定义则以当前屏幕截图作为图标。上面的写法可能大家会觉得会有默认光泽，下面这种设置方法可以去掉光泽效果，还原设计图的效果！ 1&lt;link rel=“apple-touch-icon-precomposed” href=“touch-icon-iphone.png” /&gt; 图片尺寸可以设定为5757（px）或者Retina可以定为114114（px），ipad尺寸为72*72（px) 启动画面1&lt;link rel=“apple-touch-startup-image” href=“start.png”/&gt; iOS下页面启动加载时显示的画面图片，避免加载时的白屏。可以通过madia来指定不同的大小： 代码折叠 代码展开 123456789101112131415&lt;!–iPhone–&gt;&lt;link href=“apple-touch-startup-image-320x460.png” media=“(device-width: 320px)” rel=“apple-touch-startup-image” /&gt;&lt;!– iPhone Retina –&gt;&lt;link href=“apple-touch-startup-image-640x920.png” media=“(device-width: 320px) and (-webkit-device-pixel-ratio: 2)” rel=“apple-touch-startup-image” /&gt;&lt;!– iPhone 5 –&gt;&lt;link rel=“apple-touch-startup-image” media=“(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)” href=“apple-touch-startup-image-640x1096.png”&gt;&lt;!– iPad portrait –&gt;&lt;link href=“apple-touch-startup-image-768x1004.png” media=“(device-width: 768px) and (orientation: portrait)” rel=“apple-touch-startup-image” /&gt;&lt;!– iPad landscape –&gt;&lt;link href=“apple-touch-startup-image-748x1024.png” media=“(device-width: 768px) and (orientation: landscape)” rel=“apple-touch-startup-image” /&gt;&lt;!– iPad Retina portrait –&gt;&lt;link href=“apple-touch-startup-image-1536x2008.png” media=“(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)” rel=“apple-touch-startup-image” /&gt;&lt;!– iPad Retina landscape –&gt;&lt;link href=“apple-touch-startup-image-1496x2048.png”media=“(device-width: 1536px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)”rel=“apple-touch-startup-image” /&gt; 浏览器私有及其它meta以下属性在项目中没有应用过，可以写一个demo测试以下！QQ浏览器私有全屏模式 1&lt;meta name=“x5-fullscreen” content=“true”&gt; 强制竖屏 1&lt;meta name=“x5-orientation” content=“portrait”&gt; 强制横屏 1&lt;meta name=“x5-orientation” content=“landscape”&gt; 应用模式 1&lt;meta name=“x5-page-mode” content=“app”&gt; UC浏览器私有全屏模式 1&lt;meta name=“full-screen” content=“yes”&gt; 强制竖屏 1&lt;meta name=“screen-orientation” content=“portrait”&gt; 强制横屏 1&lt;meta name=“screen-orientation” content=“landscape”&gt; 应用模式 1&lt;meta name=“browsermode” content=“application”&gt; 其它针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 1&lt;meta name=“HandheldFriendly” content=“true”&gt; 微软的老式浏览器 1&lt;meta name=“MobileOptimized” content=“320”&gt; windows phone 点击无高光 1&lt;meta name=“msapplication-tap-highlight” content=“no”&gt; IOS中input键盘事件keyup、keydown、keypress支持不是很好问题是这样的，用input search做模糊搜索的时候，在键盘里面输入关键词，会通过ajax后台查询，然后返回数据，然后再对返回的数据进行关键词标红。用input监听键盘keyup事件，在安卓手机浏览器中是可以的，但是在ios手机浏览器中变红很慢，用输入法输入之后，并未立刻相应keyup事件，只有在通过删除之后才能相应！解决办法：可以用html5的oninput事件去代替keyup 代码折叠 代码展开 123456&lt;input type=“text” id=“testInput”&gt;&lt;script type=“text/javascript”&gt; document.getElementById(‘testInput’).addEventListener(‘input’, function(e)&#123; var value = e.target.value; &#125;);&lt;/script&gt; 然后就达到类似keyup的效果！ h5网站input 设置为type=number的问题h5网页input 的type设置为number一般会产生三个问题，一个问题是maxlength属性不好用了。另外一个是form提交的时候，默认给取整了。三是部分安卓手机出现样式问题。 问题一解决，我目前用的是js。如下 代码折叠 代码展开 1234567&lt;input type=&quot;number&quot; oninput=&quot;checkTextLength(this ,10)&quot;&gt;function checkTextLength(obj, length) &#123; if(obj.value.length &gt; length) &#123; obj.value = obj.value.substr(0, length); &#125;&#125; 问题二，是因为form提交默认做了表单验证，step默认是1,要设置step属性，假如保留2位小数，写法如下： 1&lt;input type=&quot;number&quot; step=&quot;0.01&quot; /&gt; 关于step，我在这里做简单的介绍，input 中type=number，一般会自动生成一个上下箭头，点击上箭头默认增加一个step，点击下箭头默认会减少一个step。number中默认step是1。也就是step=0.01,可以允许输入2位小数，并且点击上下箭头分别增加0.01和减少0.01。假如step和min一起使用，那么数值必须在min和max之间。看下面的例子： 1&lt;input type=&quot;number&quot; step=&quot;3.1&quot; min=&quot;1&quot; /&gt; 输入框可以输入哪些数字？首先，最小值是1，那么可以输入1.0，第二个是可以输入（1+3.1）那就是4.1,以此类推，每次点击上下箭头都会增加或者减少3.1，输入其他数字无效。这就是step的简单介绍。问题三，去除input默认样式 代码折叠 代码展开 12345678input[type=number] &#123; -moz-appearance:textfield;&#125;input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button &#123; -webkit-appearance: none; margin: 0;&#125; ios 设置input 按钮样式会被默认样式覆盖解决方式如下： 代码折叠 代码展开 12345input,textarea &#123; border: 0; -webkit-appearance: none;&#125; 设置默认样式为none IOS键盘字母输入，默认首字母大写解决方案，设置如下属性 1&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt; select 下拉选择设置右对齐设置如下： 123select option &#123;direction: rtl;&#125; 通过transform进行skew变形，rotate旋转会造成出现锯齿现象可以设置如下： 123-webkit-transform: rotate(-4deg) skew(10deg) translateZ(0); transform: rotate(-4deg) skew(10deg) translateZ(0); outline: 1px solid rgba(255,255,255,0) 移动端点击300ms延迟300ms尚可接受，不过因为300ms产生的问题，我们必须要解决。300ms导致用户体验并不是很好，解决这个问题，我们一般在移动端用tap事件来取代click事件。推荐两个js，一个是fastclick，一个是tap.js关于300ms延迟，具体请看：http://thx.github.io/mobile/300ms-click-delay/ 移动端点透问题案例如下： 12&lt;div id=&quot;haorooms&quot;&gt;点头事件测试&lt;/div&gt;&lt;a href=&quot;www.haorooms.com&quot;&gt;www.haorooms.com&lt;/a&gt; div是绝对定位的蒙层,并且z-index高于a。而a标签是页面中的一个链接，我们给div绑定tap事件： 123$(&#x27;#haorooms&#x27;).on(&#x27;tap&#x27;,function()&#123;$(&#x27;#haorooms&#x27;).hide();&#125;); 我们点击蒙层时 div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。 原因： touchstart 早于 touchend 早于click。亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏，此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。 解决： 1、 尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。2、用fastclick，https://github.com/ftlabs/fastclick3 、用preventDefault阻止a标签的click4、延迟一定的时间(300ms+)来处理事件 （不推荐）5、以上一般都能解决，实在不行就换成click事件。 下面介绍一下touchend事件，如下： 123$(&quot;#haorooms&quot;).on(&quot;touchend&quot;, function (event) &#123; event.preventDefault(); &#125;); 消除 IE10 里面的那个叉号1input:-ms-clear&#123;display:none;&#125; 关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)iOS 浏览器横屏时会重置字体大小，设置 text-size-adjust 为 none 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 text-size-adjust 为 100% 。 123-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;text-size-adjust: 100%; 关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格可以通过正则去掉 1this.value = this.value.replace(/\\u2006/g, &#x27;&#x27;); 移动端 HTML5 audio autoplay 失效问题这个不是 BUG，由于自动播放网页中的音频或视频，会给用户带来一些困扰或者不必要的流量消耗，所以苹果系统和安卓系统通常都会禁止自动播放和使用 JS 的触发播放，必须由用户来触发才可以播放。解决方法思路：先通过用户 touchstart 触碰，触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。解决代码： 1234document.addEventListener(&#x27;touchstart&#x27;, function () &#123; document.getElementsByTagName(&#x27;audio&#x27;)[0].play(); document.getElementsByTagName(&#x27;audio&#x27;)[0].pause();&#125;); 移动端 HTML5 input date 不支持 placeholder 问题这个我感觉没有什么好的解决方案，用如下方法 1&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&#x27;date&#x27;)&quot; id=&quot;date&quot;&gt; 有的浏览器可能要点击两遍！ 部分机型存在type为search的input，自带close按钮样式修改方法有些机型的搜索input控件会自带close按钮（一个伪元素），而通常为了兼容所有浏览器，我们会自己实现一个，此时去掉原生close按钮的方法为 123#Search::-webkit-search-cancel-button&#123; display: none;&#125; 如果想使用原生close按钮，又想使其符合设计风格，可以对这个伪元素的样式进行修改。 美化的话，请看http://www.haorooms.com/post/qd_ghfx 这篇文章的第五条！ 唤起select的option展开zepto方式: 1$(sltElement).trrgger(&quot;mousedown&quot;); 原生js方式: 代码折叠 代码展开 123456function showDropdown(sltElement) &#123; var event; event = document.createEvent(&#x27;MouseEvents&#x27;); event.initMouseEvent(&#x27;mousedown&#x27;, true, true, window); sltElement.dispatchEvent(event);&#125;; 让Chrome支持小于12px的文字我们的做法是：针对谷歌浏览器内核，加webkit前缀，用transform:scale()这个属性进行缩放！ 代码折叠 代码展开 1234&lt;style&gt;p span&#123;font-size:10px;-webkit-transform:scale(0.8);display:block;&#125;&lt;/style&gt;&lt;p&gt;&lt;span&gt;haorooms博客测试10px&lt;/span&gt;&lt;/p&gt; IOS手机浏览器字体齿轮修改-webkit-font-smoothing属性，结果是： -webkit-font-smoothing: none: 无抗锯齿-webkit-font-smoothing: antialiased | subpixel-antialiased | default: 灰度平滑 修改chrome记住密码后自动填充表单的黄色背景 代码折叠 代码展开 12345input:-webkit-autofill &#123; background-color: #FAFFBD; background-image: none; color: #000;&#125; input [type=search] 搜索框右侧小图标美化 代码折叠 代码展开 1234input[type=&quot;search&quot;]::-webkit-search-cancel-button&#123; -webkit-appearance: none;height: 15px; width: 15px;border-radius: 8px; background:url(&quot;images/searchicon.png&quot;) no-repeat 0 0;background-size: 15px 15px;&#125; iOS safari阻止“橡皮筋效果”可以参考一下知乎上的回答 https://www.zhihu.com/question/22256539 。 但是，我们遇到的问题不是这样，我是要解决弹跳导致弹出层（position:absolute）的覆盖层高度小于100%;针对这个问题，我想到的解决方案如下：方法一：把position:absolute改成position:fixed，并在弹出层之后，设置body的高度是100%；overflow是hidden。方法二：思路是获取苹果浏览器导航栏的高度。然后滚动的时候，重新获取其高度。在导航栏高度变小的时候，给弹出层增加高度的百分比！代码如下： 代码折叠 代码展开 1234567891011121314//ios safari 伸缩判断 var topbarHeight=window.outerHeight-window.innerHeight,agent=navigator.userAgent,globleflag=true; $(window).scroll(function () &#123; if(agent.indexOf(&quot;iPhone&quot;)!=-1 || agent.indexOf(&quot;iPad&quot;)!=-1)&#123; var topbarHeightNow=window.outerHeight-window.innerHeight; if(topbarHeightNow&lt;topbarHeight)&#123; globleflag=false //此处写处理逻辑 &#125;else&#123; globleflag=true //此处写处理逻辑 &#125; &#125; &#125;); 本文转载，原文地址：http://www.haorooms.com/post/touchweb_commonquestion","tags":[{"name":"移动端","slug":"移动端","permalink":"https://zuitaibai.github.io/blog/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"categories":[{"name":"移动端","slug":"移动端","permalink":"https://zuitaibai.github.io/blog/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]},{"title":"特殊符号","date":"2016-06-12T08:39:43.000Z","path":"2016/06/12/Html-2016-06-12-特殊符号/","text":"❤ ❥ 웃 유 ♋ ☮ ✌ ☏ ☢ ☠ ✔ ☑ ♚ ▲ ♪ ✈ ✞ ÷ ↑ ↓ ◆ ◇ ⊙ ■ □ △ ▽ ¿ ─ │ ♥ ❣ ♂ ♀ ☿ Ⓐ ✍ ✉ ☣ ☤ ✘ ☒ ♛ ▼ ♫ ⌘ ☪ ≈ ← → ◈ ◎ ☉ ★ ☆ ⊿ ※ ¡ ━ ┃ ♡ ღ ツ ☼ ☁ ❅ ♒ ✎ © ® ™ Σ ✪ ✯ ☭ ➳ 卐 √ ↖ ↗ ● ◐ Θ ◤ ◥ ︻ 〖 〗 ┄ ┆ ℃ ℉ ° ✿ ϟ ☃ ☂ ✄ ¢ € £ ∞ ✫ ★ ½ ✡ × ↙ ↘ ○ ◑ ⊕ ◣ ◢ ︼ 【 】 ┅ ┇ ☽ ☾ ✚ 〓 ▂ ▃ ▄ ▅ ▆ ▇ █ ▉ ▊ ▋ ▌ ▍ ▎ ▏ ↔ ↕ ☽ ☾ の • ▸ ◂ ▴ ▾ ┈ ┊ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ ㍿ ▓ ♨ ♛ ❖ ♓ ☪ ✙ ┉ ┋ ☹ ☺ ☻ ت ヅ ツ ッ シ Ü ϡ ﭢ ™ ℠ ℗ © ® ♥ ❤ ❥ ❣ ❦ ❧ ♡ ۵ 웃 유 ღ ♋ ♂ ♀ ☿ ☼ ☀ ☁ ☂ ☄ ☾ ☽ ❄ ☃ ☈ ⊙ ☉ ℃ ℉ ❅ ✺ ϟ ☇ ♤ ♧ ♡ ♢ ♠ ♣ ♥ ♦ ☜ ☞ ☝ ✍ ☚ ☛ ☟ ✌ ✽ ✾ ✿ ❁ ❃ ❋ ❀ ⚘ ☑ ✓ ✔ √ ☐ ☒ ✗ ✘ ㄨ ✕ ✖ ✖ ⋆ ✢ ✣ ✤ ✥ ❋ ✦ ✧ ✩ ✰ ✪ ✫ ✬ ✭ ✮ ✯ ❂ ✡ ★ ✱ ✲ ✳ ✴ ✵ ✶ ✷ ✸ ✹ ✺ ✻ ✼ ❄ ❅ ❆ ❇ ❈ ❉ ❊ † ☨ ✞ ✝ ☥ ☦ ☓ ☩ ☯ ☧ ☬ ☸ ✡ ♁ ✙ ♆ 。 ， 、 ＇ ： ∶ ； ? ‘ ’ “ ” 〝 〞 ˆ ˇ ﹕ ︰ ﹔ ﹖ ﹑ • ¨ … . ¸ ; ！ ´ ？ ！ ～ — ˉ ｜ ‖ ＂ 〃 ｀ @ ﹫ ¡ ¿ ﹏ ﹋ ﹌ ︴ 々 ﹟ # ﹩ $ ﹠ &amp; ﹪ % * ﹡ ﹢ ﹦ ﹤ ‐ ￣ ¯ ― ﹨ ˆ ˜ ﹍ ﹎ + = &lt; ＿ _ - \\ ˇ ~ ﹉ ﹊ （ ） 〈 〉 ‹ › ﹛ ﹜ 『 』 〖 〗 ［ ］ 《 》 〔 〕 { } 「 」 【 】 ︵ ︷ ︿ ︹ ︽ _ ﹁ ﹃ ︻ ︶ ︸ ﹀ ︺ ︾ ˉ ﹂ ﹄ ︼ ☩ ☨ ☦ ✞ ✛ ✜ ✝ ✙ ✠ ✚ † ‡ ◉ ○ ◌ ◍ ◎ ● ◐ ◑ ◒ ◓ ◔ ◕ ◖ ◗ ❂ ☢ ⊗ ⊙ ◘ ◙ ◍ ⅟ ½ ⅓ ⅕ ⅙ ⅛ ⅔ ⅖ ⅚ ⅜ ¾ ⅗ ⅝ ⅞ ⅘ ≂ ≃ ≄ ≅ ≆ ≇ ≈ ≉ ≊ ≋ ≌ ≍ ≎ ≏ ≐ ≑ ≒ ≓ ≔ ≕ ≖ ≗ ≘ ≙ ≚ ≛ ≜ ≝ ≞ ≟ ≠ ≡ ≢ ≣ ≤ ≥ ≦ ≧ ≨ ≩ ⊰ ⊱ ⋛ ⋚ ∫ ∬ ∭ ∮ ∯ ∰ ∱ ∲ ∳ % ℅ ‰ ‱ ㊣ ㊎ ㊍ ㊌ ㊋ ㊏ ㊐ ㊊ ㊚ ㊛ ㊤ ㊥ ㊦ ㊧ ㊨ ㊒ ㊞ ㊑ ㊒ ㊓ ㊔ ㊕ ㊖ ㊗ ㊘ ㊜ ㊝ ㊟ ㊠ ㊡ ㊢ ㊩ ㊪ ㊫ ㊬ ㊭ ㊮ ㊯ ㊰ ㊙ ㉿ 囍 ♔ ♕ ♖ ♗ ♘ ♙ ♚ ♛ ♜ ♝ ♞ ♟ ℂ ℍ ℕ ℙ ℚ ℝ ℤ ℬ ℰ ℯ ℱ ℊ ℋ ℎ ℐ ℒ ℓ ℳ ℴ ℘ ℛ ℭ ℮ ℌ ℑ ℜ ℨ ♪ ♫ ♩ ♬ ♭ ♮ ♯ ° ø Ⓐ ☮ ✌ ☪ ✡ ☭ ✯ 卐 ✐ ✎ ✏ ✑ ✒ ✍ ✉ ✁ ✂ ✃ ✄ ✆ ✉ ☎ ☏ ➟ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ➚ ➘ ➙ ➛ ➜ ➝ ➞ ➸ ♐ ➲ ➳ ⏎ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ➫ ➬ ➩ ➪ ➭ ➮ ➯ ➱ ↩ ↪ ↫ ↬ ↭ ↮ ↯ ↰ ↱ ↲ ↳ ↴ ↵ ↶ ↷ ↸ ↹ ↺ ↻ ↼ ↽ ↾ ↿ ⇀ ⇁ ⇂ ⇃ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇋ ⇌ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ➀ ➁ ➂ ➃ ➄ ➅ ➆ ➇ ➈ ➉ ➊ ➋ ➌ ➍ ➎ ➏ ➐ ➑ ➒ ➓ ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ Ⅼ Ⅽ Ⅾ Ⅿ ⅰ ⅱ ⅲ ⅳ ⅴ ⅵ ⅶ ⅷ ⅸ ⅹ ⅺ ⅻ ⅼ ⅽ ⅾ ⅿ ┌ ┍ ┎ ┏ ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟ ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏ ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟ ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ◤ ◥ ◄ ► ▶ ◀ ◣ ◢ ▲ ▼ ◥ ▸ ◂ ▴ ▾ △ ▽ ▷ ◁ ⊿ ▻ ◅ ▵ ▿ ▹ ◃ ❏ ❐ ❑ ❒ ▀ ▁▂▃▄▅▆▇▉▊▋█▌ ▍▎▏▐░▒▓▔▕■□▢▣▤▥▦▧▨▩ ▪ ▫ ▬ ▭ ▮ ▯ ㋀ ㋁ ㋂ ㋃ ㋄ ㋅ ㋆ ㋇ ㋈ ㋉ ㋊ ㋋ ㏠ ㏡ ㏢ ㏣ ㏤ ㏥ ㏦ ㏧ ㏨ ㏩ ㏪ ㏫ ㏬ ㏭ ㏮ ㏯ ㏰ ㏱ ㏲ ㏳ ㏴ ㏵ ㏶ ㏷ ㏸ ㏹ ㏺ ㏻ ㏼ ㏽ ㏾ ㍙ ㍚ ㍛ ㍜ ㍝ ㍞ ㍟ ㍠ ㍡ ㍢ ㍣ ㍤ ㍥ ㍦ ㍧ ㍨ ㍩ ㍪ ㍫ ㍬ ㍭ ㍮ ㍯ ㍰ ㍘ ☰ ☲ ☱ ☴ ☵ ☶ ☳ ☷ ☯ 特殊符号♠ ♣ ♧ ♡ ♥ ❤ ❥ ❣ ♂ ♀ ✲ ☀ ☼ ☾ ☽ ◐ ◑ ☺ ☻ ☎ ☏ ✿ ❀ № ↑ ↓ ← → √ × ÷ ★ ℃ ℉ ° ◆ ◇ ⊙ ■ □ △ ▽ ¿ ½ ☯ ✡ ㍿ 卍 卐 ♂ ♀ ✚ 〓 ㎡ ♪ ♫ ♩ ♬ ㊚ ㊛ 囍 ㊒ ㊖ Φ ♀ ♂ ‖ $ @ * &amp; # ※ 卍 卐 Ψ ♫ ♬ ♭ ♩ ♪ ♯ ♮ ⌒ ¶ ∮ ‖ € ￡ ¥ $ 编号序号① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⓪ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ ⅰ ⅱ ⅲ ⅳ ⅴ ⅵ ⅶ ⅷ ⅸ ⅹ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ 数学符号﹢ ﹣ × ÷ ± / = ≌ ∽ ≦ ≧ ≒ ﹤ ﹥ ≈ ≡ ≠ = ≤ ≥ &lt; &gt; ≮ ≯ ∷ ∶ ∫ ∮ ∝ ∞ ∧ ∨ ∑ ∏ ∪ ∩ ∈ ∵ ∴ ⊥ ∥ ∠ ⌒ ⊙ √ ∟ ⊿ ㏒ ㏑ % ‰ ⅟ ½ ⅓ ⅕ ⅙ ⅛ ⅔ ⅖ ⅚ ⅜ ¾ ⅗ ⅝ ⅞ ⅘ ≂ ≃ ≄ ≅ ≆ ≇ ≈ ≉ ≊ ≋ ≌ ≍ ≎ ≏ ≐ ≑ ≒ ≓ ≔ ≕ ≖ ≗ ≘ ≙ ≚ ≛ ≜ ≝ ≞ ≟ ≠ ≡ ≢ ≣ ≤ ≥ ≦ ≧ ≨ ≩ ⊰ ⊱ ⋛ ⋚ ∫ ∬ ∭ ∮ ∯ ∰ ∱ ∲ ∳ % ℅ ‰ ‱ ø Øπ 爱心符号♥ ❣ ღ ♠ ♡ ♤ ❤ ❥ 标点符号。 ， 、 ＇ ： ∶ ； ? ‘ ’ “ ” 〝 〞 ˆ ˇ ﹕ ︰ ﹔ ﹖ ﹑ • ¨ … . ¸ ; ！ ´ ？ ！ ～ — ˉ ｜ ‖ ＂ 〃 ｀ @ ﹫ ¡ ¿ ﹏ ﹋ ﹌︴ 々 ﹟ # ﹩ $ ﹠ &amp; ﹪ % * ﹡ ﹢ ﹦ ﹤ ‐ ￣ ¯ ― ﹨ ˆ ˜ ﹍ ﹎ += &lt; ＿ _ - \\ ˇ ~ ﹉﹊ （ ） 〈 〉 ‹ › ﹛ ﹜ 『 』 〖 〗 ［ ］ 《 》 〔 〕 { } 「 」 【 】 ︵ ︷ ︿ ︹ ︽ _ ﹁ ﹃ ︻ ︶ ︸ ﹀ ︺ ︾ ˉ ﹂ ﹄ ︼ ❝ ❞ 单位符号° ′ ″ ＄ ￥ 〒 ￠ ￡ ％ ＠ ℃ ℉ ﹩ ﹪ ‰ ﹫ ㎡ ㏕ ㎜ ㎝ ㎞ ㏎ m³ ㎎ ㎏ ㏄ º ○ ¤ % $ º ¹ ² ³ 货币符号€ £ Ұ ₴ $ ₰ ¢ ₤ ¥ ₳ ₲ ₪ ₵ 元 ₣ ₱ ฿ ¤ ₡ ₮ ₭ ₩ ރ 円 ₢ ₥ ₫ ₦ z ł ﷼ ₠ ₧ ₯ ₨ K č र ₹ ƒ ₸ ￠ 箭头符号↑ ↓ ← → ↖ ↗ ↘ ↙ ↔ ↕ ➻ ➼ ➽ ➸ ➳ ➺ ➻ ➴ ➵ ➶ ➷ ➹ ▶ ► ▷ ◁ ◀ ◄ « » ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ⏎ ➲ ➾ ➔ ➘ ➙ ➚ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↠ ↡ ↢ ↣ ↤ ↤ ↥ ↦ ↧ ↨ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇋ ⇌ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ ⇖ ⇗ ⇘ ⇙ ⇜ ↩ ↪ ↫ ↬ ↭ ↮ ↯ ↰ ↱ ↲ ↳ ↴ ↵ ↶ ↷ ↸ ↹ ☇ ☈ ↼ ↽ ↾ ↿ ⇀ ⇁ ⇂ ⇃ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ↺ ↻ ⇚ ⇛ ♐ 符号图案✐ ✎ ✏ ✑ ✒ ✍ ✉ ✁ ✂ ✃ ✄ ✆ ✉ ☎ ☏ ☑ ✓ ✔ √ ☐ ☒ ✗ ✘ ㄨ ✕ ✖ ✖ ☢ ☠ ☣ ✈ ★ ☆ ✡ 囍 ㍿ ☯ ☰ ☲ ☱ ☴ ☵ ☶ ☳ ☷ ☜ ☞ ☝ ✍ ☚ ☛ ☟ ✌ ♤ ♧ ♡ ♢ ♠ ♣ ♥ ♦ ☀ ☁ ☂ ❄ ☃ ♨ 웃 유 ❖ ☽ ☾ ☪ ✿ ♂ ♀ ✪ ✯ ☭ ➳ 卍 卐 √ × ■ ◆ ● ○ ◐ ◑ ✙ ☺ ☻ ❀ ⚘ ♔ ♕ ♖ ♗ ♘ ♙ ♚ ♛ ♜ ♝ ♞ ♟ ♧ ♡ ♂ ♀ ♠ ♣ ♥ ❤ ☜ ☞ ☎ ☏ ⊙ ◎ ☺ ☻ ☼ ▧ ▨ ♨ ◐ ◑ ↔ ↕ ▪ ▒ ◊ ◦ ▣ ▤ ▥ ▦ ▩ ◘ ◈ ◇ ♬ ♪ ♩ ♭ ♪ の ★ ☆ → あ ぃ ￡ Ю 〓 § ♤ ♥ ▶ ¤ ✲ ❈ ✿ ✲ ❈ ➹ ☀ ☂ ☁ 【 】 ┱ ┲ ❣ ✚ ✪ ✣ ✤ ✥ ✦ ❉ ❥ ❦ ❧ ❃ ❂ ❁ ❀ ✄ ☪ ☣ ☢ ☠ ☭ ღ ▶ ▷ ◀ ◁ ☀ ☁ ☂ ☃ ☄ ★ ☆ ☇ ☈ ⊙ ☊ ☋ ☌ ☍ ⓛ ⓞ ⓥ ⓔ ╬ 『 』 ∴ ☀ ♫ ♬ ♩ ♭ ♪ ☆ ∷ ﹌ の ★ ◎ ▶ ☺ ☻ ► ◄ ▧ ▨ ♨ ◐ ◑ ↔ ↕ ↘ ▀ ▄ █▌ ◦ ☼ ♪ の ☆ → ♧ ぃ ￡ ❤ ▒ ▬ ♦ ◊ ◦ ♠ ♣ ▣ ۰ • ❤ • ۰ ► ◄ ▧ ▨ ♨ ◐ ◑ ↔ ↕ ▪ ▫ ☼ ♦ ⊙ ● ○ ① ⊕ ◎ Θ ⊙ ¤ ㊣ ★ ☆ ♀ ◆ ◇ ◣ ◢ ◥ ▲ ▼ △ ▽ ⊿ ◤ ◥ ✐ ✌ ✍ ✡ ✓ ✔ ✕ ✖ ♂ ♀ ♥ ♡ ☜ ☞ ☎ ☏ ⊙ ◎ ☺ ☻ ► ◄ ▧ ▨ ♨ ◐ ◑ ↔ ↕ ♥ ♡ ▪ ▫ ☼ ♦ ▀ ▄█▌▐░▒▬ ♦ ◊ ◘◙ ◦ ☼ ♠ ♣ ▣ ▤ ▥ ▦ ▩ ◘ ◙ ◈ ♫ ♬ ♪ ♩ ♭ ♪ ✄ ☪ ☣ ☢ ☠ ♯ ♩ ♪ ♫ ♬ ♭ ♮ ☎ ☏ ☪ ♈ º º ₪ ¤ 큐 « » ™ ♂ ✿ ♥ ◕‿- ｡ ｡ ◕‿◕ ｡ 希腊字母Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω α β γ δ ε ζ ν ξ ο π ρ σ η θ ι κ λ μ τ υ φ χ ψ ω 俄语字母А Б В Г Д Е Ё Ж З И Й К Л М Н О П Р С Т У Ф Х Ц Ч Ш Щ Ъ Ы Ь Э Ю Я а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я 汉语拼音ā á ǎ à ō ó ǒ ò ē é ě è ī í ǐ ì ū ú ǔ ù ǖ ǘ ǚ ǜ ü ê ɑ  ń ň  ɡ ㄅ ㄆ ㄇ ㄈ ㄉ ㄊ ㄋ ㄌ ㄍ ㄎ ㄏ ㄐ ㄑ ㄒ ㄓ ㄔ ㄕ ㄖ ㄗ ㄘ ㄙ ㄚ ㄛ ㄜ ㄝ ㄞ ㄟ ㄠ ㄡ ㄢ ㄣ ㄤ ㄥ ㄦ ㄧ ㄨ ㄩ 中文字符零 壹 贰 叁 肆 伍 陆 柒 捌 玖 拾 佰 仟 万 亿 吉 太 拍 艾 分 厘 毫 微 卍 卐 卄 巜 弍 弎 弐 朤 氺 曱 甴 囍 兀 々 〆 の ぁ 〡 〢 〣 〤 〥 〦 〧 〨 〩 ㊎ ㊍ ㊌ ㊋ ㊏ ㊚ ㊛ ㊐ ㊊ ㊣ ㊤ ㊥ ㊦ ㊧ ㊨ ㊒ ㊫ ㊑ ㊓ ㊔ ㊕ ㊖ ㊗ ㊘ ㊜ ㊝ ㊞ ㊟ ㊠ ㊡ ㊢ ㊩ ㊪ ㊬ ㊭ ㊮ ㊯ ㊰ ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ 日文平假名片假名ぁ あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た だ ち ぢ っ つ づ て で と ど な に ぬ ね の は ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み む め も ゃ や ゅ ゆ ょ よ ら り る れ ろ ゎ わ ゐ ゑ を ん ゔ ゕ ゖ ァ ア ィ イ ゥ ウ ェ エ ォ オ カ ガ キ ギ ク グ ケ ゲ コ ゴ サ ザ シ ジ ス ズ セ ゼ ソ ゾ タ ダ チ ヂ ッ ツ ヅ テ デ ト ド ナ ニ ヌ ネ ノ ハ バ パ ヒ ビ ピ フ ブ プ ヘ ベ ペ ホ ボ ポ マ ミ ム メ モ ャ ヤ ュ ユ ョ ヨ ラ リ ル レ ロ ヮ ワ ヰ ヱ ヲ ン ヴ ヵ ヶ ヷ ヸ ヹ ヺ ・ ー ヽ ヾ ヿ ゠ ㇰ ㇱ ㇲ ㇳ ㇴ ㇵ ㇶ ㇷ ㇸ ㇹ ㇺ ㇻ ㇼ ㇽ ㇾ ㇿ 制表符─ ━│┃╌╍╎╏┄ ┅┆┇┈ ┉┊┋┌┍┎┏┐┑┒┓└ ┕┖┗ ┘┙┚┛├┝┞┟┠┡┢┣ ┤┥┦┧┨┩┪┫┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╪ ╫ ╬═║╒╓╔ ╕╖╗╘╙╚ ╛╜╝╞╟╠ ╡╢╣╤ ╥ ╦ ╧ ╨ ╩ ╳╔ ╗╝╚ ╬ ═ ╓ ╩ ┠ ┨┯ ┷┏ ┓┗ ┛┳ ⊥ ﹃ ﹄┌ ╮ ╭ ╯╰ 皇冠符号♚ ♛ ♝ ♞ ♜ ♟ ♔ ♕ ♗ ♘ ♖ ♟","tags":[{"name":"特殊符号","slug":"特殊符号","permalink":"https://zuitaibai.github.io/blog/tags/%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/"},{"name":"速查表","slug":"速查表","permalink":"https://zuitaibai.github.io/blog/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"}],"categories":[{"name":"Html","slug":"Html","permalink":"https://zuitaibai.github.io/blog/categories/Html/"}]},{"title":"字符集和字符编码","date":"2016-06-12T08:03:43.000Z","path":"2016/06/12/计算机基础-编码-2016-06-12-字符集和字符编码/","text":"在web开发中我们总会遇到这样那样的字符编码问题，例如，当我们在代码编辑器里可以好好显示的html文档在浏览器里却变成了乱码，有时候为了能让我们的页面正常显示我们可能要忙上一天都无法解决（我可是深有体会）。为了搞清楚字符编码的问题，今天我也花了很长时间去百度。这里我和大家分享一下我的感想，不对之处，欢迎指正。 首先要了解下什么是字符编码和字符集。 字符集（Charset）：是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。 字符集的概念就是指一个集合，例如：26个英文字母就构成了一个英文字母字符集，还有繁体汉字字符集、日文汉字字符集等。 字符编码（Character Encoding）：是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码。 字符编码指一套规则，计算机只能处理由0,1构成的数据，计算机不能处理符号和字符，他只会处理0,1数据。为了能让计算机处理这些非数值数据，我们就把非数值数据根据一定的规则与一些二进制数据对应起来，例如在ASCLL编码中，我们用’0110 0001’来表示’a’,ASCLL对应表, 大家可以去看看。总而言之，这些将字符集里的字符与二进制数据对应的法则的集合就是字符编码。 所以，一个字符集必然对应着一个一个字符编码。 常见的字符集&amp;字符编码。 ASCLL字符集&amp;字符编码。 ASCII（AmericanStandardCode forInformationInterchange，美国信息交换标准代码））是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646。ASCII字符集：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。 ASCII编码：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。使用7位二进制（一个字节）表示一个字符，共128字符。后来，随这计算机的普及128个字符不够用了，于是就动用了剩下的哪一个二进制，形成了扩展的ASCLL编码，共有256个。 128的ASCLL编码表 256的ASCLL编码表。 ASCLL相对来说是一种比较古老的字符集&amp;字符编码，因为他表示的字符太少了，渐渐就产生了其他包含更多字符的字符集&amp;字符编码。 GBXXXX字符集&amp;编码 BG—-国标 GB 2312__字符集&amp;编码 GB 2312字符集： GB 2312或GB 2312-80是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集·基本集》，又称GB0，由中国国家标准总局发布，1981年5月1日实施。GB2312编码通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持GB 2312。 GB 2312字符编码： 一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7（176–247），后面一个字节（低字节）从0xA1到0xFE（160–254），这样我们就可以组合出大约6654多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 GB2312字符集中删掉了扩展后的那部分ASCLL字符,也就是说一个字符的二进制大于127是没有在GB2312中定义的。GB2312 收录了%99的常用汉字，但对于一些偏僻的姓，少数名族的字符没有收录，这时候就有必要出现另一种扩充的编码方式，这就是GBK。 GBK__字符集&amp;编码 GBK字符集_：_gbk字符集是GB2312的超集，同 GB2312一样，GBK也支持希腊字母、日文假名字母、俄语字母等字符，但不支持韩语中的表音字符（非汉字字符）。GBK还收录了GB2312不包含的 汉字部首符号、竖排标点符号等字符。 GBK字符编码：为了能够表示更多的字符，GBK的制定者们扩充了表示字符的字节范围，规定：一个小于127的字符的意义与原来相同，当有一个大于127的字符出现时且这个大于127的字符的后面跟着一个字节范围是0x40-7E和0x80-0xFE（十进制：64—127和128—256）时，他就表示一个汉字，也就是说高字节范围是0×81-0xFE，低字节范围是0x40-7E和0x80-0xFE。从这一点可以看出，GBK完全兼容了GB2312，而他又进行了扩展，但这个扩展对程序员们造成了一些影响。在GBK中，当我们遍历一个字符串时，我们无法通过判断他的二进制码是否小于127来判断他是有特殊含义的ASCLL字符，因为他有可能是一个汉字的一半。所以，当我们想要在字符串中添加标识符时，我们最好选择小于64的字符来做，例如（!,@,#,$,%,^）. 有些系统中用0x40-0x7E中的字符（如”|”）做特殊符号，在定位这些符号时又没有判断这些符号是不是属于某个 GBK字符的低字节，这样就会造成错误判断。在支持GB2312的环境下就不存在这个问题。需要注意的是支持GBK的环境中小于0x80的某个字节未必就 是ASCII符号；另外就是最好选用小于0×40的ASCII符号做一些特殊符号，这样就可以快速定位，且不用担心是某个汉字的另一半。Big5编码中也存在相应问题。 GB13080__字符集&amp;编码 GB13080字符集：全称：国家标准GB 18030-2005《信息技术 中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术 信息交换用汉字编码字符集 基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。 GB13080字符编码：GBK和GB2312都是双字节等宽编码，如果算上和ASCII兼容所支持的单字节，也可以理解为是单字节和双字节混合的变长编码。GB18030编码是变长编码，有单字节、双字节和四字节三种方式。GB18030的单字节编码范围是0x00-0x7F，完全等同与ASCII；双字节编码的范围和GBK相同，高字节是0x81-0xFE，低字节 的编码范围是0x40-0x7E和0x80-FE；四字节编码中第一、三字节的编码范围是0x81-0xFE，二、四字节是0x30-0x39。 BIG5__字符集&amp;编码 BIG5字符集：由于GB系列的字符集&amp;字符编码只收录了简体汉字而没有考虑台湾人民的感受，所以他们也推出了自己的字符集&amp;字符编码那就是大五码—BIG5，Big5收录的汉字只包括繁体汉字，不包括简体汉字，一些生僻的汉字也没有收录。GBK收录的日文假名字符、俄文字符BIG5也没有收录。Big5编码对应的字符集是GBK字符集的子集，也就是说Big5收录的字符是GBK收录字符的一部分，但相同字符的编码不同。 BIG5字符编码：Big5是双字节编码，高字节编码范围是0x81-0xFE（128–255），低字节编码范围是0x40-0x7E和0xA1-0xFE。和GBK相比，少了低字节是0x80-0xA0的组合。0x8140-0xA0FE是保留区域，用于用户造字区。 因为Big5也占用了ASCII的编码空间（低字节所使用的0x40-0x7E），所以Big5编码在一些环境下存在和GBK编码相同的问题，即低字节范围为0x40-0x7E的字符有可能会被误处理，尤其是低字节是0x5C（”/“）和0x7C（”|”）的字符。可以参考GBK一节相应说明。 **小结：**在上述所例举的GB系列，BIG5，这些字符集他们都用一个小于127的字节来表示英文字符，用两个字节且第一个字节必须大于127的双字节来表示汉字。于是他们有了一个共同的名字—- “DBCS”（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。 伟大的UNICODE 因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用 着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案。导致文件在不同的地区的传输出现了很大的问题，这时候一个伟大的创想产生了——Unicode（”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”）。这个由一个叫 ISO（国际标谁化组织）的国际组织编制的字符集可以表示世界上所有的字符，它规定用4个字节来表示字符，每个数字代表唯一的至少在某种语言中使用的符号（并不是所有的数字都用上了，但是总数已经超过了65535，所以2个字节的数字是不够用的。）在UNICODE中，每个字符对应一个数字，每个数字对应一个字符。即不存在二义性。不再需要记录”模式”了。U+0041总是代表’A’，即使这种语言没有’A’这个字符。 在计算机科学领域中，Unicode（统一码、万国码、单一码、标准万国码）是业界的一种标准，它可以使电脑得以体现世界上数十种文字的系统。Unicode 是基于通用字符集（Universal Character Set）的标准来发展，并且同时也以书本的形式[1]对外发表。直至目前为止的第六版，Unicode 就已经包含了超过十万个字符（在2005年，Unicode 的第十万个字符被采纳且认可成为标准之一）、一组可用以作为视觉参考的代码图表、一套编码方法与一组标准字符编码、一套包含了上标字、下标字等字符特性的枚举等。Unicode 组织（The Unicode Consortium）是由一个非营利性的机构所运作，并主导 Unicode 的后续发展，其目标在于：将既有的字符编码方案以Unicode 编码方案来加以取代，特别是既有的方案在多语环境下，皆仅有有限的空间以及不兼容的问题。 UNICODE这种编码方式虽然形成了一种统一的字符集，世界上的人们终于能在同一种字符集下工作了。但是他也带来了一些问题。 例如汉字”严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。而计算机不知道这两个字节是一个汉字，还是两个ASCLL字符。 用跟多的字节表示英文字符，这样浪费了大量的空间，老外们非常不高兴。 传输时的问题。 于是这个时候就有必要出现一种可以解决这个问题的全新的编码方式。于是就出现了UTF系列（utf-8,utf-16,utf-32） （可以这样理解：Unicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案。） UTF-32编码方式： 上述使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，称为UTF-32。UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这种方法有其优点，最重要的一点就是可以在常数时间内定位字符串里的第N个字符，因为第N个字符从第4×Nth个字节开始。虽然每一个码位使用固定长定的字节看似方便，它并不如其它Unicode编码使用得广泛。 UTF-16 编码方式 尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符。因此，就有了另外一种Unicode编码方式，叫做UTF-16(因为16位 = 2字节)。UTF-16将0–65535范围内的字符编码成2个字节，如果真的需要表达那些很少使用的”星芒层(astral plane)”内超过这65535范围的Unicode字符，则需要使用一些诡异的技巧来实现。这些诡异的技巧请自行百度。 **小结： 对于UTF-32和UTF-16编码方式还有一些其他不明显的缺点。不同的计算机系统会以不同的顺序保存字节。这意味着字符U+4E2D在UTF-16编码方式下可能被保存为4E 2D或者2D 4E，这取决于该系统使用的是大尾端(big-endian)还是小尾端(little-endian)。这时候数据的传输就出了问题，为了解决这个问题，多字节的Unicode编码方式定义了一个”字节顺序标记(Byte Order Mark)”，它是一个特殊的非打印字符，你可以把它包含在文档的开头来指示你所使用的字节顺序。对于UTF-16，字节顺序标记是U+FEFF。如果收到一个以字节FF FE开头的UTF-16编码的文档，你就能确定它的字节顺序是单向的(one way)的了；如果它以FE FF开头，则可以确定字节顺序反向了。这就是我们在notepad++的格式选项里看到的UCS-2 BIG endian &amp; UCS-2 Little endian 的含义了。** UTF-8 编码方式 互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式，也是最重要的一种编码方式。 UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 UTF-8的编码规则很简单，只有二条： 1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。 下表总结了编码规则，字母x表示可用编码的位。 Unicode符号范围**|**UTF-8编码方式 (十六进制) | （二进制） ——————–+——————————————— 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 下面，还是以汉字”严”为例，演示如何实现UTF-8编码。 已知”严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，转换成十六进制就是E4B8A5。 从上面的过程中我们可以看出在utf-8中 汉字大多是三个字节的而英文字母都是1个字节的，这样原来的英文文件就可以在不用修改的情况下来适应utf-8，也不用多余的占用空间。 UTF-8优点： UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。 UTF-8字符串可以由一个简单的算法可靠地识别出来。就是，一个字符串在任何其它编码中表现为合法的UTF-8的可能性很低，并随字符串长度增长而减小。 Utf-8 BOM 问题： 前面提到过”字节顺序标记(Byte Order Mark)”—-BOM 这是用来表示UTF-16和UTF-32的字节顺许的，但UTF-8并不需要他，他在utf-8文件中被编译为”EF BB BF”，占三个字节。这就是我们用记事本创建一个utf-8文件时，它的起始大小为3字节，这三个字节来标识UTF-8编码。但这三个字节会常常造成一些问题。 例如： 当一个文件流是utf-8 BOM 形式编码的话，其在除IE10之外的IE中都会输出一个空行。这会导致一些页面的错乱。 受COOKIE送出机制的限制，在这些文件开头已经有BOM的文件中，COOKIE无法送出（因为在COOKIE送出前PHP已经送出了文件头），所以登入和登出功能失效。一切依赖COOKIE、SESSION实现的功能全部无效。 解决办法： 使用notepad++编辑器打开文件，在”格式”选项中选择”转为UTF-8无BOM格式”。 ANSI 是神马？？ 在notepad++中的”格式”选项中，我们可以看到”以ANSI编码”这个选项，那么，ANSI究竟是什么呢？？？ 为使计算机支持更多语言，通常使用 0x80~0xFF 范围的 2 个字节来表示 1 个字符。比如：汉字 ‘中’ 在中文操作系统中，使用 [0xD6,0xD0] 这两个字节存储。不同的国家和地区制定了不同的标准，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。在简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码。不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。 以上摘自百度百科。。。 ANSI 就是一种对双字节编码方式的总称，我们可以把它看做一个变量，在不同的地域，他的值是不同的。而这个地域的判断又是依赖于操作系统。在中国，ANSI=GB2312，在日本，ANSI=JIS。有的时候ANSI也被称为’本地编码’。事实上，ANSI的值取决于windows的’codepage’，你可以在命令行下输入”chcp”来查看你的codepage，一般为936，然后查看cmd的属性时，你会发现codepage时GBK。 说了半天，也就是在中国，你的ANSI就是GB2312。文本以ANSI的形式存储或处理时，就是以GB2312处理的。 举个例子： 比 如 一个用户在简体中文Windows下面用记事本输入一些汉字后保存，然后copy到另一台英文Windows上，尝试用记事本打开，就会发现出现的是一 些乱码。并不是copy的过程中出现了错误，而是因为在英文的Windows上打开文件时默认的ANSI编码是Wenstern European(Windows) – Codepage 1252，而在简体中文的Windows上保存打开时默认的编码格式是Chinese Simplified(GB2312) – Codepage 936。 实验课 新建5个txt文件分别命名为”utf-8.txt”,”gb2312.txt”,”ANSI.txt”,”Unicode big endian,txt”,”Unicode little endian.txt”，然后用notepad++打开，将其改变为名称对应的编码方式。然后在里面都输入’严’ 然后，使用Ultraedit 打开，按下’ctrl+H’查看他们的十六进制码。 ANSI：文件的编码就是两个字节”D1 CF”，这正是”严”的GB2312编码。: Gb2312：文件的编码就是两个字节”D1 CF”，和ANSI一样。 Unicode litte endian：编码是四个字节”FF FE 25 4E”，其中”FF FE”表明是小头方式存储，真正的编码是4E25。 Unicode big endian：编码是四个字节”FE FF 4E 25”，其中”FE FF”表明是大头方式存储。 UTF-8：编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。 参考资料及延伸阅读： http://blog.csdn.net/stilling2006/article/details/4129700 http://www.pconline.com.cn/pcedu/empolder/gj/other/0505/616631.html http://www.joelonsoftware.com/articles/Unicode.html http://www.crifan.com/files/doc/docbook/char_encoding/release/webhelp/content/ http://huaichang.blogbus.com/logs/19602597.html","tags":[{"name":"字符集","slug":"字符集","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"},{"name":"字符编码","slug":"字符编码","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"}],"categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编码","slug":"计算机基础/编码","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A0%81/"}]},{"title":"nodejs简易server环境及简易接口路由写在一起（二）","date":"2016-05-27T06:31:49.000Z","path":"2016/05/27/服务端-nodejs-2016-05-27-nodejs简易server环境及简易接口路由写在一起（二）/","text":"再来个带inclue功能的，nodejs简易server环境及简易接口路由 写在一起 (2) grunt：搞定一些自动完成[ autoprefixer, browser-sync, contrib-cssmin, contrib-jshint, contrib-less, contrib-uglify, contrib-watch, ejs, node-dev ]node server.js：后台交互 server.js 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141var PORT = 1337, DIR = &#x27;.&#x27;; //用于存放html的目录var http = require(&#x27;http&#x27;), url = require(&#x27;url&#x27;), fs = require(&#x27;fs&#x27;), path = require(&#x27;path&#x27;), ejs = require(&#x27;ejs&#x27;);ejs.delimiter = &#x27;$$&#x27;;var mine = &#123; &quot;css&quot;: &quot;text/css&quot;, &quot;gif&quot;: &quot;image/gif&quot;, &quot;html&quot;: &quot;text/html&quot;, &quot;ico&quot;: &quot;image/x-icon&quot;, &quot;xml&quot;: &quot;text/xml&quot;, &quot;jpeg&quot;: &quot;image/jpeg&quot;, &quot;jpg&quot;: &quot;image/jpeg&quot;, &quot;js&quot;: &quot;text/javascript&quot;, &quot;json&quot;: &quot;application/json&quot;, &quot;pdf&quot;: &quot;application/pdf&quot;, &quot;png&quot;: &quot;image/png&quot;, &quot;svg&quot;: &quot;image/svg+xml&quot;, &quot;swf&quot;: &quot;application/x-shockwave-flash&quot;, &quot;tiff&quot;: &quot;image/tiff&quot;, &quot;txt&quot;: &quot;text/plain&quot;, &quot;wav&quot;: &quot;audio/x-wav&quot;, &quot;wma&quot;: &quot;audio/x-ms-wma&quot;, &quot;wmv&quot;: &quot;video/x-ms-wmv&quot;&#125;;var server = http.createServer(function (req, res) &#123; var pathname = url.parse(req.url).pathname; var realPath = path.join(DIR, pathname); //console.log(realPath); var ext = path.extname(realPath); ext = ext ? ext.slice(1) : &#x27;unknown&#x27;; fs.exists(realPath, function (exists) &#123; if (!exists) &#123; var data=&#123;&#125;; if(req.url == &quot;/common/user/login&quot;)&#123; data=&#123; rlt_code:&#x27;HH0000&#x27;, rlt_msg:&#x27;成功&#x27;, data:&#123; access_token:&#x27;token_zjf&#x27;, open_id:&#x27;open_id123&#x27; &#125; &#125;; res.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot; &#125;); res.end(JSON.stringify(data)); &#125;else if(req.url == &quot;/common/user/register&quot;)&#123; data=&#123; rlt_code:&#x27;HH0000&#x27;, rlt_msg:&#x27;成功&#x27; &#125;; res.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot; &#125;); res.end(JSON.stringify(data)); &#125; else&#123; res.writeHead(404, &#123; &quot;Content-Type&quot;: &quot;text/plain&quot; &#125;); res.end(&quot;404 error! File not found.!&quot;); &#125; /*res.write(&quot;This request URL &quot; + pathname + &quot; was not found on this server.&quot;); res.end();*/ &#125; else &#123; if(ext==&#x27;html&#x27;)&#123; fs.readFile(realPath, &quot;utf-8&quot;, function (err, file) &#123; /* * --- * ---&lt;*- /layout/footer.ejs |||| &#123;&quot;active&quot;:4&#125; -*&gt; * ---&lt;*- /layout/footer.ejs |||| &#123;&#125; -*&gt; * --- */ /* * --- &lt; if(typeof isPageLogin==&#x27;boolean&#x27;)&#123; &gt; * --- &lt;html class=&quot;reghtml&quot;&gt; * --- &lt; &#125;else&#123; &gt; * --- &lt;html&gt; * --- &lt; &#125; &gt; */ var flag=true; while (flag)&#123; var start=file.indexOf(&#x27;&lt;*-&#x27;), end=0; if(start&gt;=0) &#123; end = file.indexOf(&#x27;-*&gt;&#x27;); var str = file.substring(start, end + 3); var str2=str.substring(3,str.length-3); var str2Arr=str2.split(&#x27;||||&#x27;); str2Arr[0]=str2Arr[0].replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); str2Arr[1]=str2Arr[1].replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); /**/ var str1=fs.readFileSync(__dirname + str2Arr[0], &#x27;utf8&#x27;); var o=&#123;&#125;; try&#123; o=JSON.parse(str2Arr[1]); var returnStr=ejs.render(str1,o); file=file.replace(str,returnStr); &#125;catch(e)&#123; console.log(&#x27;模板入参转换json出错&#x27;); res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain; charset=utf-8&#x27; &#125;); res.end(&#x27;模板入参转换json出错&#x27;,&#x27;utf8&#x27;); break; &#125; /**/ &#125;else flag=false; &#125; //console.log(file); if (err) &#123; res.writeHead(500, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); res.end(err); &#125; else &#123; var contentType = mine[ext] || &quot;text/plain&quot;; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: contentType &#125;); res.write(file, &quot;utf-8&quot;); res.end(); &#125; &#125;); &#125;else&#123; fs.readFile(realPath, &quot;binary&quot;, function (err, file) &#123; if (err) &#123; res.writeHead(500, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); res.end(err); &#125; else &#123; var contentType = mine[ext] || &quot;text/plain&quot;; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: contentType &#125;); res.write(file, &quot;binary&quot;); res.end(); &#125; &#125;); &#125; &#125; &#125;);&#125;);server.listen(PORT);console.log(&quot;Server runing at port: &quot; + PORT + &quot;.&quot;);","tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://zuitaibai.github.io/blog/tags/nodejs/"},{"name":"路由","slug":"路由","permalink":"https://zuitaibai.github.io/blog/tags/%E8%B7%AF%E7%94%B1/"}],"categories":[{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nodejs","slug":"服务端/nodejs","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nodejs/"}]},{"title":"nodejs简易server环境及简易接口路由写在一起","date":"2016-05-27T03:14:36.000Z","path":"2016/05/27/服务端-nodejs-2016-05-27-nodejs简易server环境及简易接口路由写在一起/","text":"终于找到了门，再也不用install express一大坨了：一段时间以来，把html加入server环境，同时调用后台接口数据这两个功能放在一块的一个简易实现，都是我想杜撰出的，今天ok了。由于没有时间学习nodejs，匆忙使用时，还是拼出了前端开发html的node后端环境支持。。这时就可以把html文件放入server环境，调用接口写假数据了。如有大神看到，请帮我指正改成正宗的最好。。 在不用fis的情况下，我的一个小流程是： grunt：搞定一些自动完成[ autoprefixer, browser-sync, contrib-cssmin, contrib-jshint, contrib-less, contrib-uglify, contrib-watch ]node server.js：后台交互综目前全公司项目来说，目前已够用。 Code 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384var PORT = 1337, DIR = &#x27;.&#x27;; //用于存放html的目录var http = require(&#x27;http&#x27;), url = require(&#x27;url&#x27;), fs = require(&#x27;fs&#x27;), path = require(&#x27;path&#x27;);var mine = &#123; &quot;css&quot;: &quot;text/css&quot;, &quot;gif&quot;: &quot;image/gif&quot;, &quot;html&quot;: &quot;text/html&quot;, &quot;ico&quot;: &quot;image/x-icon&quot;, &quot;jpeg&quot;: &quot;image/jpeg&quot;, &quot;jpg&quot;: &quot;image/jpeg&quot;, &quot;js&quot;: &quot;text/javascript&quot;, &quot;json&quot;: &quot;application/json&quot;, &quot;pdf&quot;: &quot;application/pdf&quot;, &quot;png&quot;: &quot;image/png&quot;, &quot;svg&quot;: &quot;image/svg+xml&quot;, &quot;swf&quot;: &quot;application/x-shockwave-flash&quot;, &quot;tiff&quot;: &quot;image/tiff&quot;, &quot;txt&quot;: &quot;text/plain&quot;, &quot;wav&quot;: &quot;audio/x-wav&quot;, &quot;wma&quot;: &quot;audio/x-ms-wma&quot;, &quot;wmv&quot;: &quot;video/x-ms-wmv&quot;, &quot;xml&quot;: &quot;text/xml&quot;&#125;;var server = http.createServer(function (req, res) &#123; var pathname = url.parse(req.url).pathname; var realPath = path.join(DIR, pathname); //console.log(realPath); var ext = path.extname(realPath); ext = ext ? ext.slice(1) : &#x27;unknown&#x27;; fs.exists(realPath, function (exists) &#123; if (!exists) &#123; if(req.url == &quot;/common/user/login&quot;)&#123; var data=&#123; rlt_code:&#x27;HH0000&#x27;, rlt_msg:&#x27;成功&#x27;, data:&#123; access_token:&#x27;token_zjf&#x27;, open_id:&#x27;open_id123&#x27; &#125; &#125;; res.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot; &#125;); res.end(JSON.stringify(data)); &#125;else if(req.url == &quot;/common/user/register&quot;)&#123; var data=&#123; rlt_code:&#x27;HH0000&#x27;, rlt_msg:&#x27;成功&#x27; &#125;; res.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot; &#125;); res.end(JSON.stringify(data)); &#125; else&#123; res.writeHead(404, &#123; &quot;Content-Type&quot;: &quot;text/plain&quot; &#125;); res.end(&quot;404 error! File not found.!&quot;); &#125; &#125; else &#123; fs.readFile(realPath, &quot;binary&quot;, function (err, file) &#123; if (err) &#123; res.writeHead(500, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); res.end(err); &#125; else &#123; var contentType = mine[ext] || &quot;text/plain&quot;; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: contentType &#125;); res.write(file, &quot;binary&quot;); res.end(); &#125; &#125;); &#125; &#125;);&#125;);server.listen(PORT);console.log(&quot;Server runing at port: &quot; + PORT + &quot;.&quot;);","tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://zuitaibai.github.io/blog/tags/nodejs/"},{"name":"路由","slug":"路由","permalink":"https://zuitaibai.github.io/blog/tags/%E8%B7%AF%E7%94%B1/"}],"categories":[{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nodejs","slug":"服务端/nodejs","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nodejs/"}]},{"title":"javascript动画实现（转）","date":"2016-05-27T02:58:14.000Z","path":"2016/05/27/Ecmascript-2016-05-27-javascript动画实现（转）/","text":"&nbsp; html Code 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt; &lt;title&gt;动画组件&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;FX.js&quot;&gt;&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; #motion&#123; background:#ccc; width:500px; height:500px; position:relative; overflow:hidden; float:left; &#125; #motion #ball&#123; width:40px; height:40px; background:red; position:absolute; *font-size:0px; &#125; #motion #flag&#123; background:yellow; width:4px; height:4px; position:absolute; *font-size:0px; &#125; #status&#123; float:left; margin:0px 10px; &#125; #status .item&#123; margin:1em 0px; &#125; #chart&#123; *zoom:1; margin:0px 20px 10px 0px;; &#125; #chart&#123; position:relative; width:250px; height:250px; background:#eaeaea; &#125; #chart div&#123; width:4px; height:4px; cursor:pointer; background:green; position:absolute; *font-size:0px; &#125; #chart:selected&#123; background:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;motion&quot;&gt;&lt;/div&gt; &lt;div id=&quot;status&quot;&gt; &lt;div class=&quot;item&quot;&gt; 时长（毫秒）： &lt;select id=&quot;duration&quot;&gt; &lt;option value=&quot;100&quot;&gt;100&lt;/option&gt; &lt;option value=&quot;200&quot;&gt;200&lt;/option&gt; &lt;option value=&quot;300&quot; selected=&quot;selected&quot;&gt;300&lt;/option&gt; &lt;option value=&quot;500&quot;&gt;500&lt;/option&gt; &lt;option value=&quot;800&quot;&gt;800&lt;/option&gt; &lt;option value=&quot;1000&quot;&gt;1000&lt;/option&gt; &lt;option value=&quot;1200&quot;&gt;1200&lt;/option&gt; &lt;option value=&quot;1500&quot;&gt;1500&lt;/option&gt; &lt;option value=&quot;1800&quot;&gt;1800&lt;/option&gt; &lt;option value=&quot;2000&quot;&gt;2000&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; &lt;div class=&quot;item&quot;&gt; FPS： &lt;select id=&quot;fps&quot;&gt; &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt; &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt; &lt;option value=&quot;20&quot;&gt;20&lt;/option&gt; &lt;option value=&quot;24&quot; selected=&quot;selected&quot;&gt;24&lt;/option&gt; &lt;option value=&quot;35&quot;&gt;35&lt;/option&gt; &lt;option value=&quot;50&quot;&gt;50&lt;/option&gt; &lt;option value=&quot;80&quot;&gt;80&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; &lt;div class=&quot;item&quot;&gt; 动画类型： &lt;select id=&quot;type&quot;&gt; &lt;option value=&quot;simple&quot;&gt;simple&lt;/option&gt; &lt;option value=&quot;regularEaseIn&quot;&gt;regularEaseIn&lt;/option&gt; &lt;option value=&quot;regularEaseOut&quot;&gt;regularEaseOut&lt;/option&gt; &lt;option value=&quot;regularEaseInOut&quot;&gt;regularEaseInOut&lt;/option&gt; &lt;option value=&quot;backEaseIn&quot;&gt;backEaseIn&lt;/option&gt; &lt;option value=&quot;backEaseOut&quot;&gt;backEaseOut&lt;/option&gt; &lt;option value=&quot;backEaseInOut&quot;&gt;backEaseInOut&lt;/option&gt; &lt;option value=&quot;bounceEaseOut&quot;&gt;bounceEaseOut&lt;/option&gt; &lt;option value=&quot;bounceEaseIn&quot;&gt;bounceEaseIn&lt;/option&gt; &lt;option value=&quot;bounceEaseInOut&quot;&gt;bounceEaseInOut&lt;/option&gt; &lt;option value=&quot;strongEaseIn&quot;&gt;strongEaseIn&lt;/option&gt; &lt;option value=&quot;strongEaseOut&quot;&gt;strongEaseOut&lt;/option&gt; &lt;option value=&quot;strongEaseInOut&quot;&gt;strongEaseInOut&lt;/option&gt; &lt;option value=&quot;elasticEaseIn&quot;&gt;elasticEaseIn&lt;/option&gt; &lt;option value=&quot;elasticEaseOut&quot;&gt;elasticEaseOut&lt;/option&gt; &lt;option value=&quot;elasticEaseInOut&quot;&gt;elasticEaseInOut&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div&gt;运动轨迹：&lt;/div&gt; &lt;div id=&quot;chart&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div id=&quot;result&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; var motionContainer = document.getElementById(&#x27;motion&#x27;); var ball = document.createElement(&#x27;div&#x27;); var flag = document.createElement(&#x27;div&#x27;); var chart = document.getElementById(&#x27;chart&#x27;); var type = document.getElementById(&#x27;type&#x27;); var duration = document.getElementById(&#x27;duration&#x27;); var fps = document.getElementById(&#x27;fps&#x27;); var result = document.getElementById(&#x27;result&#x27;); type.options.length = 0; /* * QQ邮箱使用的为Cubic + easeOut/easeIn 200ms(展开收起文件夹) * Sine + easeOut/easeIn 300ms 弹出框 from:-30 to 0 * fast:200ms slow:600ms */ for (var i in Fx.transitions) &#123; if (Fx.transitions.hasOwnProperty(i)) &#123; var opt = document.createElement(&quot;option&quot;); opt.value = i; opt.innerHTML = i; type.appendChild(opt); &#125; &#125; function setPosition(el, position) &#123; el.style.left = position[0] + &#x27;px&#x27;; el.style.top = position[1] + &#x27;px&#x27;; &#125; ; ball.id = &quot;ball&quot;; flag.id = &quot;flag&quot;; motionContainer.appendChild(ball); motionContainer.appendChild(flag); var fx = null; motionContainer.onclick = function (ev) &#123; ev = ev || window.event; if (fx) &#123; fx.pause(); &#125; var position = &#123; &#x27;left&#x27;: &#123;from: parseInt(ball.style.left) || 0, to: ev.clientX || ev.pageX&#125;, &#x27;top&#x27;: &#123;from: parseInt(ball.style.top) || 0, to: ev.clientY || ev.pageY&#125; &#125;; chart.innerHTML = &#x27;&#x27;; setPosition(flag, [position.left.to, position.top.to]); // 动画逻辑 var d = duration.options[duration.selectedIndex || 0].value / 1000; var t = type.options[type.selectedIndex || 0].value; fx = new Fx(ball, position, d, t); //设置帧频 fx.setFrequency(fps.options[fps.selectedIndex || 0].value); fx.onMotionStart = function () &#123; var res = [ &#x27;动画类型：&#x27; + this._animateType, &#x27;帧率为：：&#x27; + this._freq, &#x27;指定运行：&#x27; + this._duration + &#x27;秒&#x27; ]; result.innerHTML = res.join(&#x27;&lt;br /&gt;&#x27;); Chart.apply(this); &#125; fx.onMotionStop = function () &#123; &#125; fx.onMotionChange = function (time) &#123; var dot = document.createElement(&#x27;div&#x27;); var x = position.left, y = position.top; var move = &#123;x: this._ease(x.from, x.to, time), y: this._ease(y.from, y.to, time)&#125;; var dotx = move.x / motionContainer.clientWidth * chart.clientWidth; var doty = move.y / motionContainer.clientHeight * chart.clientHeight; setPosition(dot, [dotx, doty]); chart.appendChild(dot); &#125; fx.start(); &#125; function Chart() &#123; var iChart = 550; var a = []; for (var i = 0; i &lt; iChart; i++) &#123; a.push(&#x27;&lt;div style=&quot;background-color:#f60;font-size:0;width:3px;height:3px;position:absolute;left:&#x27; + (i - 1) + &#x27;px;top:&#x27; + (Math.ceil(this._func(i, 200, -200, iChart))) + &#x27;px;&quot;&gt;&lt;\\/div&gt;&#x27;); &#125; document.getElementById(&quot;idChart&quot;).innerHTML = a.join(&quot;&quot;); &#125;&lt;/script&gt;&lt;div id=&quot;idChart&quot; style=&quot;border:1px solid #000;height:200px; width:550px; margin-top:20px; position:relative; clear:both; margin-top:10px;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; FX.js Code 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620/** * @author ZhangYi *//** * * @param &#123;HTMLElement|String&#125; el HTMLElement|DOM对象 * @param &#123;Object|null&#125; attributes 执行动画时需要更新的属性值 * @param &#123;Number&#125; duration 动画执行时间 * @param &#123;String|Null&#125; transition 动画算子函数 */function Fx(el, attributes, duration, func) &#123; this._obj = Fx.DOM.get(el); this._attributes = attributes || &#123;&#125;; this._duration = duration || 10; if(!!func &amp;&amp; typeof(Fx.transitions[func]) === &quot;function&quot;) &#123; this._animateType = func; &#125; else &#123; this._animateType = &quot;simple&quot;; &#125; this._func = Fx.transitions[this._animateType]; this.isPlayed = false; this.isLoop = false; this._intervalTimer = null; this._startTime = 0; this._moveTime = 0; //动画执行频率 this._freq = 24; this.units = &#123;&#125;; this.frame = &#123;&#125;; this.endAttr = &#123;&#125;; this.startAttr = &#123;&#125;; //开始执行动画 this.onMotionStart = function() &#123;&#125;; //动画正在执行 this.onMotionChange = function() &#123;&#125;; //动画执行结束 this.onMotionStop = function() &#123;&#125;; return this;&#125;Fx.prototype = &#123; //启动定时器执行动画 _runTime : function() &#123; clearInterval(this._intervalTimer); if (this.isPlayed) &#123; this._moveTime = new Date().getTime() - this._startTime; this._playTime( (this._moveTime) / 1000 ); var $pointer = this; var delay = Math.floor(1000 / this._freq); this._intervalTimer = setInterval(function() &#123;$pointer._runTime.apply($pointer);&#125;, delay); &#125; &#125;, /** * 定时器启动时执行的动画 * @param &#123;Number&#125; time */ _playTime : function(time) &#123; var _isEnd = false; if (time &gt; this._duration) &#123; time = this._duration; _isEnd = true; this.frame = Fx.objectClone(this.endAttr); &#125; else &#123; for(attr in this.startAttr)&#123; if( &#x27;[object Array]&#x27; === Object.prototype.toString.apply(this.startAttr[attr]) )&#123; this.frame[attr] = []; for(var i=0; i &lt; this.startAttr[attr].length; i++)&#123; this.frame[attr][i] = this._ease(this.startAttr[attr][i], this.endAttr[attr][i], time); &#125; &#125; else &#123; this.frame[attr] = this._ease(this.startAttr[attr], this.endAttr[attr], time); &#125; &#125; &#125; this.setAttributes(); this.onMotionChange.apply(this, arguments); // 判断是否播放结束 if (_isEnd) &#123; this.isPlayed = false; this.onMotionStop.apply(this); // 循环播放 if (this.isLoop) &#123; this.isPlayed = true; this.frame = Fx.objectClone(this.startAttr); this._reloadTimer(); &#125; if (window.CollectGarbage) &#123; CollectGarbage(); &#125; &#125; &#125;, //重新计算动画开始时间 _reloadTimer : function() &#123; this._startTime = +new Date(); &#125;, /** * 调用动画算子函数，返回执行结果 * * @param &#123;Number&#125; start * @param &#123;Number&#125; end * @param &#123;Number&#125; time */ _ease : function(start, end, time) &#123; return this._func(time, start, end - start, this._duration); &#125;, /** * 设置动画执行的频率 1秒执行多少次 */ setFrequency : function(freq) &#123; this._freq = freq; &#125;, /** * 开始播放动画 * @param &#123;Boolean&#125; loop */ start : function(loop) &#123; this.getAttributes(); this._reloadTimer(); this._start.apply(this, arguments); &#125;, /** * 共用的开始执行动画函数 * @param &#123;Boolean&#125; loop */ _start : function(loop) &#123; this.isPlayed = true; this.isLoop = loop ? true : false; this._runTime(); this.onMotionStart.apply(this); &#125;, /** * 继续播放 * @param &#123;Boolean&#125; loop */ play : function(loop) &#123; this._startTime = +new Date() - this._moveTime; this._start.apply(this, arguments); &#125;, /** * 重新播放 * @param &#123;Boolean&#125; loop 是否循环播放动画 */ rePlay : function(loop) &#123; this._reloadTimer(); this._start.apply(this, arguments); &#125;, /** * 暂停播放动画 */ pause : function() &#123; this.isPlayed = false; this.isLoop = false; &#125;, /** * 停止播放动画 */ stop : function() &#123; this.pause(); this._playTime(this._duration + 0.1); &#125;, getAttributes : function() &#123; for(var attr in this._attributes) &#123; if(!this._attributes.hasOwnProperty(attr)) &#123; continue; &#125; switch(attr)&#123; case &#x27;color&#x27;: case &#x27;borderColor&#x27;: case &#x27;border-color&#x27;: case &#x27;backgroundColor&#x27;: case &#x27;background-color&#x27;: this.startAttr[attr] = Fx.parseColor(this._attributes[attr].from || Fx.DOM.getStyle(this._obj, attr)); this.endAttr[attr] = Fx.parseColor(this._attributes[attr].to); break; case &#x27;scrollTop&#x27;: case &#x27;scrollLeft&#x27;: var el = (this._obj === document.body) ? (/AppleWebKit/i.test(navigator.userAgent) ? document.body : document.documentElement) : this._obj; var start = this._attributes[attr].from || el[attr]; var end = this._attributes[attr].to; if(end &amp;&amp; /^([+-])(\\d+)$/.test(this._attributes[attr].to)) &#123; if(&quot;+&quot; === RegExp[&#x27;$1&#x27;]) &#123; end = start + RegExp[&#x27;$2&#x27;]*1; &#125; else &#123; end = start - RegExp[&#x27;$2&#x27;]*1; &#125; &#125; this.startAttr[attr] = start; this.endAttr[attr] = end; break; default: var start = parseFloat(this._attributes[attr].from); var end = parseFloat(this._attributes[attr].to); var units = this._attributes[attr].units || &quot;&quot;; if(attr !== &quot;opacity&quot; &amp;&amp; !units) &#123; units = &quot;px&quot;; &#125; if(!start) &#123; start = parseFloat(Fx.DOM.getStyle(this._obj, attr)) || 0;//会转换成px if(units != &quot;px&quot; &amp;&amp; document.defaultView)&#123; Fx.DOM.setStyle(this._obj, attr, start + units); &#125; &#125; if(end &amp;&amp; /^([+-])(\\d+)$/.test(this._attributes[attr].to)) &#123; if(&quot;+&quot; === RegExp[&#x27;$1&#x27;]) &#123; end = start + RegExp[&#x27;$2&#x27;]*1; &#125; else &#123; end = start - RegExp[&#x27;$2&#x27;]*1; &#125; &#125; this.units[attr] = units; this.endAttr[attr] = end; this.startAttr[attr] = start; break; &#125; &#125; &#125;, setAttributes : function() &#123; for(var attr in this.frame)&#123; switch(attr) &#123; case &#x27;opacity&#x27;: Fx.DOM.setStyle(this._obj, attr, this.frame[attr]); break; case &#x27;scrollLeft&#x27;: case &#x27;scrollTop&#x27;: var el = (this._obj === document.body) ? (/AppleWebKit/i.test(navigator.userAgent) ? document.body : document.documentElement) : this._obj; el[attr] = this.frame[attr]; break; case &#x27;color&#x27;: case &#x27;borderColor&#x27;: case &#x27;border-color&#x27;: case &#x27;backgroundColor&#x27;: case &#x27;background-color&#x27;: var rgb = &#x27;rgb(&#x27;+Math.floor(this.frame[attr][0])+&#x27;,&#x27;+Math.floor(this.frame[attr][1])+&#x27;,&#x27;+Math.floor(this.frame[attr][2])+&#x27;)&#x27;; Fx.DOM.setStyle(this._obj, attr, rgb); break; default: Fx.DOM.setStyle(this._obj, attr, this.frame[attr] + this.units[attr]); break; &#125; &#125; &#125;, //获取当前动画已经执行的百分比 getPercent : function() &#123; var percent = this._moveTime/(this._duration*1000); percent = Math.min(percent, 1); return Math.floor(percent*100) + &quot;%&quot;; &#125;&#125;Fx.DOM = &#123; /** * 获取DOM节点 * @param &#123;String&#125; 需要查找的元素的ID * @return &#123;Element&#125; 返回DOM对象 */ get: function(id)&#123; return (typeof id === &quot;string&quot;) ? document.getElementById(id) : id; &#125;, /** * 获取元素的指定样式的属性 * @param &#123;Element&#125; el 目标元素 * @param &#123;String&#125; prop 属性名 * @return &#123;Number&#125; 该元素的指定属性的属性值 */ getStyle: function(el, prop)&#123; prop = this.toCamelCase(prop); var view = document.defaultView; if(view &amp;&amp; view.getComputedStyle)&#123; return view.getComputedStyle(el, &quot;&quot;)[prop] || null; &#125;else&#123; if(prop == &#x27;opacity&#x27;)&#123; var opacity = el.filters[&#x27;alpha&#x27;] ? el.filters[&#x27;alpha&#x27;][&#x27;opacity&#x27;] : NaN; return isNaN(opacity) ? 1 : (opacity ? opacity / 100 : 0); &#125; return el.currentStyle[prop] || null; &#125; &#125;, /** * 设置元素的样式属性 * @param &#123;Element&#125; el 目标元素 * @param &#123;String&#125; prop 属性名 * @param &#123;String&#125; value 属性值 */ setStyle: function(el, prop, value)&#123; if(prop == &#x27;opacity&#x27;)&#123; el.style.filter = &quot;alpha(opacity=&quot; + value * 100 + &quot;)&quot;; el.style.opacity = value; &#125; else &#123; prop = this.toCamelCase(prop); if(prop === &quot;height&quot; || prop === &quot;width&quot;) &#123;//避免出现负值 value = Math.max(0, parseInt(value, 10)); &#125; el.style[prop] = value; &#125; &#125;, /** * 将一个CSS属性转换为驼峰形式，例如(font-size --&gt; fontSize) * @param &#123;String&#125; 需要转换的CSS属性 * @return &#123;String&#125; 转换为驼峰式后的字符串 */ toCamelCase : (function()&#123; var cache = &#123;&#125;; return function(str)&#123; if(!cache[str])&#123; var parts = str.split(&#x27;-&#x27;), camel = parts[0]; if(parts.length &gt; 1)&#123; for(var i=1, len=parts.length; i &lt; len; i++)&#123; camel += parts[i].charAt(0).toUpperCase() + parts[i].substring(1); &#125; &#125; return cache[str] = camel; &#125; else &#123; return cache[str]; &#125; &#125; &#125;)()&#125;/** * 解析颜色值, 支持16进制与RGB颜色值(#FFFFFF, #FFF, rgb(255, 0, 0)) * @param &#123;String&#125; 颜色值字符串 * @return &#123;Array&#125; RGB的颜色数组，默认返白色 */Fx.parseColor = (function()&#123; var hex6 = (/^#?(\\w&#123;2&#125;)(\\w&#123;2&#125;)(\\w&#123;2&#125;)$/); var hex3 = (/^#?(\\w&#123;1&#125;)(\\w&#123;1&#125;)(\\w&#123;1&#125;)$/); var rgb = (/^rgb\\((\\d&#123;1,3&#125;),\\s*(\\d&#123;1,3&#125;),\\s*(\\d&#123;1,3&#125;)\\)$/); return function(str)&#123; var color = str.match(hex6); if(color &amp;&amp; color.length == 4)&#123; return [parseInt(color[1], 16), parseInt(color[2], 16), parseInt(color[3], 16)]; &#125; color = str.match(rgb); if(color &amp;&amp; color.length == 4)&#123; return [parseInt(color[1], 10), parseInt(color[2], 10), parseInt(color[3], 10)]; &#125; color = str.match(hex3); if(color &amp;&amp; color.length == 4)&#123; return [parseInt(color[1] + color[1], 16), parseInt(color[2] + color[2], 16), parseInt(color[3] + color[3], 16)]; &#125; return [255, 255, 255]; &#125;&#125;)();/** * 动画的算子函数 */Fx.transitions = &#123; //linear linearEase : function(t, b, c, d) &#123; return c*t/d + b; &#125;, simple : function(time, startValue, changeValue, duration) &#123; return changeValue * time / duration + startValue; &#125;, //circ circEaseIn : function(t, b, c, d) &#123; return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b; &#125;, circEaseOut : function(t, b, c, d) &#123; return c * Math.sqrt(1 - (t=t/d-1)*t) + b; &#125;, circEaseInOut : function(t, b, c, d) &#123; if ((t/=d/2) &lt; 1) &#123; return -c/2 * (Math.sqrt(1 - t*t) - 1) + b; &#125; return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b; &#125;, //cubic cubicEaseIn : function(t, b, c, d) &#123; return c*(t/=d)*t*t + b; &#125;, cubicEaseOut : function(t, b, c, d) &#123; return c*((t=t/d-1)*t*t + 1) + b; &#125;, cubicEaseInOut : function(t, b, c, d) &#123; if ((t/=d/2) &lt; 1) &#123; return c/2*t*t*t + b; &#125; return c/2*((t-=2)*t*t + 2) + b; &#125;, //expo expoEaseIn : function(t, b, c, d) &#123; return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b; &#125;, expoEaseOut : function(t, b, c, d) &#123; return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b; &#125;, expoEaseInOut : function(t, b, c, d) &#123; if (t==0) return b; if (t==d) return b+c; if ((t/=d/2) &lt; 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b; return c/2 * (-Math.pow(2, -10 * --t) + 2) + b; &#125;, //quad quadEaseIn : function(t, b, c, d) &#123; return c*(t/=d)*t + b; &#125;, quadEaseOut : function(t, b, c, d) &#123; return -c *(t/=d)*(t-2) + b; &#125;, quadEaseInOut : function(t, b, c, d) &#123; if ((t/=d/2) &lt; 1) return c/2*t*t + b; return -c/2 * ((--t)*(t-2) - 1) + b; &#125;, //quart quartEaseIn : function(t, b, c, d) &#123; return c*(t/=d)*t*t*t + b; &#125;, quartEaseOut : function(t, b, c, d) &#123; return -c * ((t=t/d-1)*t*t*t - 1) + b; &#125;, quartEaseInOut : function(t, b, c, d) &#123; if ((t/=d/2) &lt; 1) return c/2*t*t*t*t + b; return -c/2 * ((t-=2)*t*t*t - 2) + b; &#125;, //quint quintEaseIn : function(t, b, c, d) &#123; return c*(t/=d)*t*t*t*t + b; &#125;, quintEaseOut : function(t, b, c, d) &#123; return c*((t=t/d-1)*t*t*t*t + 1) + b; &#125;, quintEaseInOut : function(t, b, c, d) &#123; if ((t/=d/2) &lt; 1) return c/2*t*t*t*t*t + b; return c/2*((t-=2)*t*t*t*t + 2) + b; &#125;, //sine sineEaseIn : function(t, b, c, d) &#123; return -c * Math.cos(t/d * (Math.PI/2)) + c + b; &#125;, sineEaseOut : function(t, b, c, d) &#123; return c * Math.sin(t/d * (Math.PI/2)) + b; &#125;, sineEaseInOut : function(t, b, c, d) &#123; return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b; &#125;, //regular regularEaseIn : function(t, b, c, d) &#123; return c * (t /= d) * t + b; &#125;, regularEaseOut : function(t, b, c, d) &#123; return -c * (t /= d) * (t - 2) + b; &#125;, regularEaseInOut : function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) &#123; return c / 2 * t * t + b; &#125; return -c / 2 * ((--t) * (t - 2) - 1) + b; &#125;, //back backEaseIn : function(t, b, c, d) &#123; var s = 1.70158; return c * (t /= d) * t * ((s + 1) * t - s) + b; &#125;, backEaseOut : function(t, b, c, d, a, p) &#123; var s = 1.70158; return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b; &#125;, backEaseInOut : function(t, b, c, d, a, p) &#123; var s = 1.70158; if ((t /= d / 2) &lt; 1) &#123; return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b; &#125; return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b; &#125;, //bounce bounceEaseOut : function(t, b, c, d) &#123; if ((t /= d) &lt; (1 / 2.75)) &#123; return c * (7.5625 * t * t) + b; &#125; else if (t &lt; (2 / 2.75)) &#123; return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b; &#125; else if (t &lt; (2.5 / 2.75)) &#123; return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b; &#125; else &#123; return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b; &#125; &#125;, bounceEaseIn : function(t, b, c, d) &#123; return c - Fx.transitions.bounceEaseOut(d - t, 0, c, d) + b; &#125;, bounceEaseInOut : function(t, b, c, d) &#123; if (t &lt; d / 2) &#123; return Fx.transitions.bounceEaseIn(t * 2, 0, c, d) * 0.5 + b; &#125; else return Fx.transitions.bounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b; &#125;, //strong strongEaseIn : function(t, b, c, d) &#123; return c * (t /= d) * t * t * t * t + b; &#125;, strongEaseOut : function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t * t * t + 1) + b; &#125;, strongEaseInOut : function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) &#123; return c / 2 * t * t * t * t * t + b; &#125; return c / 2 * ((t -= 2) * t * t * t * t + 2) + b; &#125;, //elastic elasticEaseIn : function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * 0.3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else &#123; var s = p / (2 * Math.PI) * Math.asin(c / a); &#125; return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; &#125;, elasticEaseOut : function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * 0.3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else &#123; var s = p / (2 * Math.PI) * Math.asin(c / a); &#125; return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b); &#125;, elasticEaseInOut : function(t, b, c, d, a, p) &#123; if (t == 0) &#123; return b; &#125; if ((t /= d / 2) == 2) &#123; return b + c; &#125; if (!p) &#123; var p = d * (0.3 * 1.5); &#125; if (!a || a &lt; Math.abs(c)) &#123; var a = c; var s = p / 4; &#125; else &#123; var s = p / (2 * Math.PI) * Math.asin(c / a); &#125; if (t &lt; 1) &#123; return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; &#125; return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b; &#125;&#125;/** * 深度复制对象 * * @param &#123;Object&#125; obj 复制对象 * @param &#123;Property&#125; preventName 不需要进行复制的对象属性 */Fx.objectClone = function(obj, preventName) &#123; if ((typeof obj) == &#x27;object&#x27;) &#123; var res = &#x27;[object Array]&#x27; === Object.prototype.toString.apply(obj) ? [] : &#123;&#125;; for (var i in obj) &#123; if (i != preventName) res[i] = arguments.callee(obj[i], preventName); &#125; return res; &#125; else if ((typeof obj) == &#x27;function&#x27;) &#123; return (new obj()).constructor; &#125; return obj;&#125; 记录动画进度html 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;动画测试&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;FX.js&quot;&gt;&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; button &#123;margin-left:20px;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;clearTimer();animate()&quot;&gt;开建执行动画&lt;/button&gt; &lt;button onclick=&quot;clearTimer(); fx.pause();&quot; disabled=true&gt;暂停&lt;/button&gt; &lt;button onclick=&quot;clearTimer(); fx.play()&quot; disabled=true&gt;继续播放&lt;/button&gt; &lt;button onclick=&quot;clearTimer(); fx.rePlay();&quot; disabled=true&gt;重新播放&lt;/button&gt; &lt;div style=&quot;margin-top:10px;&quot;&gt;当前动画的执行的百分比:&lt;span id=&quot;animatePercent&quot;&gt;&lt;/span&gt;&lt;/div&gt; &lt;div id=&quot;bar&quot; style=&quot;width:10em; height:30%; position:absolute; border:1px solid red; margin-top:50px; left:50px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;height:2800px;&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function rand(min,max)&#123; return Math.round(min+(Math.random()*(max-min))); &#125; var easing = [&#x27;simple&#x27;, &#x27;regularEaseIn&#x27;, &#x27;regularEaseOut&#x27;, &#x27;regularEaseInOut&#x27;, &#x27;backEaseIn&#x27;, &#x27;backEaseOut&#x27;, &#x27;backEaseInOut&#x27;, &#x27;bounceEaseOut&#x27;, &#x27;bounceEaseIn&#x27;, &#x27;bounceEaseInOut&#x27;, &#x27;strongEaseIn&#x27;, &#x27;strongEaseOut&#x27;, &#x27;strongEaseInOut&#x27;, &#x27;elasticEaseIn&#x27;, &#x27;elasticEaseOut&#x27;, &#x27;elasticEaseInOut&#x27; ]; var fx = null; function addEvent(el, fn, handler) &#123; if(el.attachEvent) &#123; el.attachEvent(&quot;on&quot; + fn, handler); &#125; else &#123; el.addEventListener(fn, handler, false); &#125; &#125; if (/firefox/i.test(navigator.userAgent)) &#123; document.addEventListener(&#x27;DOMMouseScroll&#x27;, wheel, false); &#125; else &#123; document.onmousewheel = wheel; &#125; function wheel(ev) &#123; return ; ev = ev || window.event; var delta = 0; if(ev.wheelDelta) &#123;//非FF delta = ev.wheelDelta;// /120; &#125; else if(ev.detail) &#123;//FF delta = ev.detail; // /3; &#125; if(ev.preventDefault) &#123; ev.preventDefault(); &#125; else &#123; ev.returnValue = false; &#125; var val = ev.wheelDelta || ev.detail; if(fx) &#123; fx.stop(); &#125; fx = new Fx(&quot;abcdefg&quot;, &#123; &#x27;scrollTop&#x27; : &#123;to:val&gt;0?&quot;-&quot; + val : &quot;+&quot; + Math.abs(val)&#125; &#125;, .3, &quot;easeInOut&quot;); setTimeout(function() &#123; fx.start(true); &#125;, 0) alert(ev.wheelDelta + &quot;\\n&quot; + ev.detail); if(delta) &#123; if(delta &lt; 0) &#123; document.title = &quot;向下滚动的&quot;; &#125; else &#123; document.title = &quot;向上滚动的&quot;; &#125; &#125; &#125; function animate() &#123; if(fx) &#123; fx.pause(); &#125; else &#123; var btns = document.getElementsByTagName(&quot;button&quot;); for(var i=1, len=btns.length; i&lt;len; i++) &#123; btns[i].disabled = false; &#125; &#125; fx = new Fx(&#x27;bar&#x27;, &#123; top: &#123;to: rand(10, 30)&#125;, left: &#123;to: rand(20, 40), units: &#x27;ex&#x27;&#125;, width: &#123;to: rand(10, 40), units: &#x27;em&#x27;&#125;, height: &#123;to: rand(10, 260), units: &#x27;%&#x27;&#125;, opacity : &#123;from:rand(0, 1), to:(Math.min(rand(0, 1))+0.1, 1)&#125;, backgroundColor: &#123;to: &quot;rgb(&quot;+rand(0, 255)+&quot;, &quot;+rand(0, 255)+&quot;, &quot;+rand(0, 255)+&quot;)&quot;&#125; &#125;, 1, easing[rand(0, easing.length - 1)]); fx.onMotionChange = function() &#123; document.getElementById(&#x27;animatePercent&#x27;).innerHTML = this.getPercent(); &#125; fx.start(); fx.onMotionStop = function() &#123; animateTimer = setTimeout(function() &#123; animate(); &#125;, 500); &#125; &#125; var animateTimer = null; function clearTimer() &#123; if(animateTimer) &#123; clearTimeout(animateTimer); &#125; &#125; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","tags":[{"name":"js","slug":"js","permalink":"https://zuitaibai.github.io/blog/tags/js/"},{"name":"动画","slug":"动画","permalink":"https://zuitaibai.github.io/blog/tags/%E5%8A%A8%E7%94%BB/"}],"categories":[{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/categories/Ecmascript/"}]},{"title":"pc和移动端的js拖拽简易函数","date":"2016-05-27T01:59:58.000Z","path":"2016/05/27/移动端-2016-05-27-pc和移动端的js拖拽简易函数/","text":"&nbsp; 示例 拖柄 内容 function ztbDrag(bar,target){ /* * ztbDrag(鼠标/手指操作处，作用目标) * ztbDrag(鼠标/手指操作处，作用目标，移动范围容器) * ztbDrag(鼠标/手指操作处，作用目标，回调函数) * ztbDrag(鼠标/手指操作处，作用目标，移动范围容器，回调函数) * */ bar=ztbDrag.tools.getEle(bar), target=ztbDrag.tools.getEle(target); var container, callback; if(arguments.length===3){ var arg3=arguments[2]; typeof arg3==='function'?(callback=arg3):(container=arg3); }else if(arguments.length===4) container=arguments[2], callback=arguments[3]; var params = { left: 0, top: 0, currentX: 0, currentY: 0, flag: false }; var _left=ztbDrag.tools.getCss(target, 'left'), _top=ztbDrag.tools.getCss(target, 'top'); _left !== 'auto' && (params.left = _left); _top !== 'auto' && (params.top = _top); var iftouch='ontouchstart' in document, events={ start:'mousedown', ing:'mousemove', end:'mouseup' }; iftouch && (events={ start:'touchstart', ing:'touchmove', end:'touchend' }); var _ll,_tt; if(container){ container=ztbDrag.tools.getEle(container), _ll=container.clientWidth-target.offsetWidth, _tt=container.clientHeight-target.offsetHeight; } var start=function(event){ params.flag = true; if(!event){ event = window.event; bar.onselectstart = function(){ return false; }; } event.preventDefault(); var e = iftouch? event.touches[0] : event; params.currentX = e.clientX; params.currentY = e.clientY; }, end=function(){ params.flag = false; var left=ztbDrag.tools.getCss(target, 'left'), top=ztbDrag.tools.getCss(target, 'top'); left !== 'auto' && (params.left = left); top !== 'auto' && (params.top = top); }, ing=function(event){ event= event||window.event; event.preventDefault(); var e = iftouch? event.touches[0] : event; if(params.flag){ var disX = e.clientX - params.currentX, disY = e.clientY - params.currentY; var nowLeft=parseInt(params.left) + disX, nowTop=parseInt(params.top) + disY; if(container){ nowLeft_tt && (nowTop=_tt); } target.style.left = nowLeft + 'px'; target.style.top = nowTop+ 'px'; callback && callback(disX, disY, nowLeft, nowTop); } }, on=function(){ bar.addEventListener(events.start,start,false), document.addEventListener(events.ing,ing,false), document.addEventListener(events.end,end,false), bar.style.cursor='move', bar.style.MozUserSelect='none', bar.style.WebkitUserSelect='none', bar.style.OUserSelect='none', bar.style.userSelect='none'; return returnO; }, off=function(){ bar.removeEventListener(events.start,start,false), document.removeEventListener(events.ing,ing,false), document.removeEventListener(events.end,end,false), bar.style.cursor='', bar.style.MozUserSelect='', bar.style.WebkitUserSelect='', bar.style.OUserSelect='', bar.style.userSelect=''; return returnO; }, returnO= { on:on, off:off }; returnO.on(); return returnO; } ztbDrag.tools={ getCss:function(o,key){ return o.currentStyle? o.currentStyle[key] : document.defaultView.getComputedStyle(o,false)[key]; }, getEle:function(arg){ return typeof arg==='string'?document.getElementById(arg):arg; } }; //ztbDrag('b','a'); ztbDrag(document.getElementById('b'),'a','c',function(disx,disy,left,top){ console.log(disx,disy,left,top); }); Code 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot; name=&quot;viewport&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; *&#123;margin:0;padding:0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;c&quot; style=&quot;margin:100px;border:2px solid #f00;position:relative;width:800px;height:600px;&quot;&gt; &lt;div id=&quot;a&quot; style=&quot;border:1px solid #000; height:200px;width:300px;position:absolute;left:0;top:0;&quot;&gt; &lt;p id=&quot;b&quot; style=&quot;background:#ccc;height:20px;line-height:20px;&quot;&gt;a&lt;/p&gt; b &lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;height:1500px;&quot;&gt;&lt;/div&gt;&lt;script&gt; function ztbDrag(bar,target)&#123; /* * ztbDrag(鼠标/手指操作处，作用目标) * ztbDrag(鼠标/手指操作处，作用目标，移动范围容器) * ztbDrag(鼠标/手指操作处，作用目标，回调函数) * ztbDrag(鼠标/手指操作处，作用目标，移动范围容器，回调函数) * */ bar=ztbDrag.tools.getEle(bar), target=ztbDrag.tools.getEle(target); var container, callback; if(arguments.length===3)&#123; var arg3=arguments[2]; typeof arg3===&#x27;function&#x27;?(callback=arg3):(container=arg3); &#125;else if(arguments.length===4) container=arguments[2], callback=arguments[3]; var params = &#123; left: 0, top: 0, currentX: 0, currentY: 0, flag: false &#125;; var _left=ztbDrag.tools.getCss(target, &#x27;left&#x27;), _top=ztbDrag.tools.getCss(target, &#x27;top&#x27;); _left !== &#x27;auto&#x27; &amp;&amp; (params.left = _left); _top !== &#x27;auto&#x27; &amp;&amp; (params.top = _top); var iftouch=&#x27;ontouchstart&#x27; in document, events=&#123; start:&#x27;mousedown&#x27;, ing:&#x27;mousemove&#x27;, end:&#x27;mouseup&#x27; &#125;; iftouch &amp;&amp; (events=&#123; start:&#x27;touchstart&#x27;, ing:&#x27;touchmove&#x27;, end:&#x27;touchend&#x27; &#125;); var _ll,_tt; if(container)&#123; container=ztbDrag.tools.getEle(container), _ll=container.clientWidth-target.offsetWidth, _tt=container.clientHeight-target.offsetHeight; &#125; var start=function(event)&#123; params.flag = true; if(!event)&#123; event = window.event; bar.onselectstart = function()&#123; return false; &#125;; &#125; event.preventDefault(); var e = iftouch? event.touches[0] : event; params.currentX = e.clientX; params.currentY = e.clientY; &#125;, end=function()&#123; params.flag = false; var left=ztbDrag.tools.getCss(target, &#x27;left&#x27;), top=ztbDrag.tools.getCss(target, &#x27;top&#x27;); left !== &#x27;auto&#x27; &amp;&amp; (params.left = left); top !== &#x27;auto&#x27; &amp;&amp; (params.top = top); &#125;, ing=function(event)&#123; event= event||window.event; event.preventDefault(); var e = iftouch? event.touches[0] : event; if(params.flag)&#123; var disX = e.clientX - params.currentX, disY = e.clientY - params.currentY; var nowLeft=parseInt(params.left) + disX, nowTop=parseInt(params.top) + disY; if(container)&#123; nowLeft&lt;0 &amp;&amp; (nowLeft=0); nowTop&lt;0 &amp;&amp; (nowTop=0); nowLeft&gt;_ll &amp;&amp; (nowLeft=_ll); nowTop&gt;_tt &amp;&amp; (nowTop=_tt); &#125; target.style.left = nowLeft + &#x27;px&#x27;; target.style.top = nowTop+ &#x27;px&#x27;; callback &amp;&amp; callback(disX, disY, nowLeft, nowTop); &#125; &#125;, on=function()&#123; bar.addEventListener(events.start,start,false), document.addEventListener(events.ing,ing,false), document.addEventListener(events.end,end,false), bar.style.cursor=&#x27;move&#x27;, bar.style.MozUserSelect=&#x27;none&#x27;, bar.style.WebkitUserSelect=&#x27;none&#x27;, bar.style.OUserSelect=&#x27;none&#x27;, bar.style.userSelect=&#x27;none&#x27;; return returnO; &#125;, off=function()&#123; bar.removeEventListener(events.start,start,false), document.removeEventListener(events.ing,ing,false), document.removeEventListener(events.end,end,false), bar.style.cursor=&#x27;&#x27;, bar.style.MozUserSelect=&#x27;&#x27;, bar.style.WebkitUserSelect=&#x27;&#x27;, bar.style.OUserSelect=&#x27;&#x27;, bar.style.userSelect=&#x27;&#x27;; return returnO; &#125;, returnO= &#123; on:on, off:off &#125;; returnO.on(); return returnO; &#125; ztbDrag.tools=&#123; getCss:function(o,key)&#123; return o.currentStyle? o.currentStyle[key] : document.defaultView.getComputedStyle(o,false)[key]; &#125;, getEle:function(arg)&#123; return typeof arg===&#x27;string&#x27;?document.getElementById(arg):arg; &#125; &#125;; //ztbDrag(&#x27;b&#x27;,&#x27;a&#x27;); ztbDrag(document.getElementById(&#x27;b&#x27;),&#x27;a&#x27;,&#x27;c&#x27;,function(disx,disy,left,top)&#123; console.log(disx,disy,left,top); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"js","slug":"js","permalink":"https://zuitaibai.github.io/blog/tags/js/"},{"name":"拖拽","slug":"拖拽","permalink":"https://zuitaibai.github.io/blog/tags/%E6%8B%96%E6%8B%BD/"},{"name":"drag","slug":"drag","permalink":"https://zuitaibai.github.io/blog/tags/drag/"}],"categories":[{"name":"移动端","slug":"移动端","permalink":"https://zuitaibai.github.io/blog/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]},{"title":"一像素边框表格的几种实现方法","date":"2016-05-26T06:55:25.000Z","path":"2016/05/26/Html-一像素边框表格的几种实现方法/","text":"简单谈下现代一像素表格的实现 一、基础铺垫：① table元素的部分属性（针对于本话题）： 12&lt;table width=&quot;100%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; bordercolor=&quot;#000000&quot; bgcolor=&quot;#ffffff&quot; bordercolordark=&quot;&quot; bordercolorlight=&quot;&quot; &gt;&lt;/table&gt; border 表格内单元格边框的宽度 [STF][^hello][^hello]:注：DTD指示此属性允许在哪种DTD中使用。S=Strict, T=Transitional, F=Frameset. cellspacing 单元格与单元格之间的 间距 [STF] cellpadding 单元格的内边距 [STF] width 表格的宽度 [STF] bordercolor、bgcolor [TF] 但如大家熟知，给border定义为border=”1”，表现缺不符预期，是比一像素粗的边框。 综上这些在元素内用属性定义表现的方式，已被逐渐不推荐——弃用。真正的表现性的东西，应该由css来完成。 但目前可行的，相对科学的、实惠的实现方式究竟如何呢？ ② table方面css部分属性（针对于本话题）： table{border-collapse:collapse;border-spacing:0;} td{padding:0;} 相当于cellpadding border-collapse 定义相邻单元格边框是否合并 border-spacing 定义单元格与单元格之间的 间距 相当于cellspacing（除ie6/7外浏览器识别，ie6/7用expression弥补， 见下，管它性能不性能的呢，谁让他用破ie呢） 二、方案（从上到下推荐度逐渐降低）：① css法（table元素上的一些标签属性不用写） 12table&#123;border-collapse:collapse;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;);&#125;td&#123;border:1px solid #f00;&#125; ② 表格背景和单元格背景色差配合法（table元素上的一些标签属性不用写） 12table&#123; background:#000;border-collapse:separate;border-spacing:1px;jerry:expression(cellSpacing=&#x27;1&#x27;);&#125;td&#123;background:#fff;&#125; ③ css边框拼补法（table元素上的一些标签属性不用写） 12345table&#123; border-collapse:collapse;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;); border-right:1px solid #000;border-bottom:1px solid #000;&#125;td&#123;border-left:1px solid #000;border-top:1px solid #000;&#125; ④ css和标签属性结合法 12table&#123;border-collapse:collapse;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;);&#125;&lt;table border=&quot;1&quot; bordercolor=&quot;#330066&quot;&gt;&lt;/table&gt; ⑤ 标签法（原理同②） 代码折叠 代码展开 123456789&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot; bgcolor=&quot;#000&quot; &gt; &lt;tr bgcolor=&quot;#FFFFFF&quot;&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr bgcolor=&quot;#FFFFFF&quot;&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;或&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot; bgcolor=&quot;#000&quot; &gt; &lt;tr&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;td bgcolor=&quot;#FFFFFF&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 三：注意点经测试对于单元格边距，单元格间距，单元格边框这三项，如果在元素标签的属性 和 css中的属性 同时定义的情况下：（此结果在各浏览器下和各ie版本下以及各ie版本的各种兼容模式下都适合） css中的优先级比标签属性的高的是：单元格边距、单元格间距 这两项。也就是说比如以下这种情况下， 123table&#123;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;);&#125;table td&#123;padding:0;&#125;&lt;table cellpadding=&quot;20&quot; cellspacing=&quot;20&quot;&gt;&lt;/table&gt; 实际表现以css定义为准。 css的定义与标签属性的定义累加（如果有相邻合并，则只累加不相邻的单元格边框）的是：单元格边框宽度。也就是说比如以下这种情况下， 12table td&#123;border:3px solid #000;&#125;&lt;table border=&quot;5&quot;&gt;&lt;/table&gt; 则实际表现结果的单元格边框宽度为8px。注意如果有相邻合并定义，则只累加不相邻的单元格边框。 附html代码，可以用不同浏览器，及IE的各个版本去测试，及其各种兼容模式，全部没问题。 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;*&#123;margin:0;padding:0;&#125;body&#123;margin:100px;&#125;.table&#123;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;border-collapse:collapse;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;);&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;table-layout:fixed;word-break:break-all;word-wrap:break-word;overflow-wrap:break-word;white-space:normal;&#125;.t1&#123;&#125;.t1 td&#123;border:1px solid #000;&#125;.t2&#123;border-collapse:separate;border-spacing:1px;jerry:expression(cellSpacing=&#x27;1&#x27;);background:#000;&#125;.t2 td&#123;background:#fff;&#125;.t3&#123;border-right:1px solid #000;border-bottom:1px solid #000;&#125;.t3 td&#123;border-left:1px solid #000;border-top:1px solid #000;&#125;.t4&#123;border-collapse:collapse;border-spacing:0;jerry:expression(cellSpacing=&#x27;0&#x27;);&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table class=&quot;table t1&quot;&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table class=&quot;table t2&quot;&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table class=&quot;table t3&quot;&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table class=&quot;table t4&quot; border=&quot;1&quot; bordercolor=&quot;#000000&quot;&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot; bgcolor=&quot;#000&quot;&gt; &lt;tr bgcolor=&quot;#ffffff&quot;&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;td&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr bgcolor=&quot;#ffffff&quot;&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;td&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;0&quot; bgcolor=&quot;#000&quot;&gt; &lt;tr&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档&lt;/td&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档;&lt;/td&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档&lt;/td&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档&lt;/td&gt; &lt;td bgcolor=&quot;#ffffff&quot;&gt;无标题文档&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"表格","slug":"表格","permalink":"https://zuitaibai.github.io/blog/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"table","slug":"table","permalink":"https://zuitaibai.github.io/blog/tags/table/"},{"name":"一像素","slug":"一像素","permalink":"https://zuitaibai.github.io/blog/tags/%E4%B8%80%E5%83%8F%E7%B4%A0/"}],"categories":[{"name":"Html","slug":"Html","permalink":"https://zuitaibai.github.io/blog/categories/Html/"}]},{"title":"css控制非li的项目符号","date":"2016-05-25T09:50:37.000Z","path":"2016/05/25/Css-2016-05-25-css控制非li的项目符号/","text":"非li的项目符号示例.nlist { counter-reset:sectioncounter; }.nlist p:before { content:counter(sectioncounter)\". \"; counter-increment:sectioncounter; } 阿拉伯数字1不是html中的 阿拉伯数字2不是html中的 阿拉伯数字3不是html中的 阿拉伯数字4不是html中的 Code 代码折叠 代码展开 1234567891011121314151617&lt;style type=&quot;text/css&quot;&gt; div &#123; counter-reset:sectioncounter; &#125; div p:before &#123; content:counter(sectioncounter)&quot;. &quot;; counter-increment:sectioncounter; &#125; &lt;/style&gt;&lt;div&gt; &lt;p&gt;ssssssssssssssssssssssssssssssssssss&lt;/p&gt; &lt;p&gt;dddddddddddddddddddddddddddddddd&lt;/p&gt; &lt;p&gt;ssssssssssssssssssssssssssssssssssss&lt;/p&gt; &lt;p&gt;dddddddddddddddddddddddddddddddd&lt;/p&gt; &lt;p&gt;ssssssssssssssssssssssssssssssssssss&lt;/p&gt; &lt;p&gt;dddddddddddddddddddddddddddddddd&lt;/p&gt;&lt;/div&gt;","tags":[{"name":"css小技巧","slug":"css小技巧","permalink":"https://zuitaibai.github.io/blog/tags/css%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"categories":[{"name":"Css","slug":"Css","permalink":"https://zuitaibai.github.io/blog/categories/Css/"}]},{"title":"写了个带前后省略号的js分页","date":"2015-12-14T03:53:49.000Z","path":"2015/12/14/Ecmascript-2015-12-14-写了个带前后省略号的js分页/","text":"在网上搜索js分页的算法，接近于当下比较常见的那种形式的，怎么也找不到。无奈自己写了一个，依据了某些asp的分页实现并改编。以备后用并分享： Code 代码折叠 代码展开 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .pagination&#123;vertical-align:middle;&#125; .pagination a,.pagination span&#123;padding:0 5px;margin-right:5px;border: 1px solid #ddd;text-align:center;line-height:30px;display:inline-block;min-width:22px;color:#000; vertical-align:middle;&#125; .pagination .pageem&#123;line-height:32px;display:inline-block;vertical-align:middle;font-style:normal;color:#aaa;&#125; .pagination .pageem1&#123;margin-left:2em;margin-right:4px;&#125; .pagination .pageem2&#123;margin-left:5px;&#125; .pagination a &#123;text-decoration: none;&#125; .pagination a:hover,.pagination a:active &#123;border-color:#666;color: #000;&#125; .pagination .pagefirst,.pagination .pageprev,.pagination .pagelast,.pagination .pagenext&#123;font-size:12px;&#125; .pagination .pageprev&#123;margin-right:2em;&#125; .pagination .pagenext&#123;margin-left:2em;&#125; .pagination .current &#123;border-color:#FBFBFB;background:#FBFBFB;&#125; .pagination .disabled &#123;border: 1px solid #EEE;color: #DDD;&#125; .pagination .pagepoints&#123;border-color:transparent;&#125; .pagination .pageselect&#123;box-sizing:border-box;height:30px;vertical-align:middle;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;a&quot;&gt;&lt;/div&gt;&lt;script&gt;/* * -- getPagination -- * return: pagesHtml stringObject * params: * totalItems: [number] 总条数 (必选) * opts : &#123;...&#125; 配置项对象(可选) * |----- currentPage: [number] [default:1] //当前页 * |----- pageSize: [number] [default:10] //每页条数 * |----- adjacents: [number] [default:2] //折叠的前后的展示个数 * |----- ifNoLink: [boolean] [default:false] //是否禁用链接 * |----- ifShowSelect: [boolean] [default:false] //是否显示下拉列表 * |----- ifShowPrevNext: [boolean] [default:true] //是否显示上一页、下一页按钮 * |----- ifShowFirstLast: [boolean] [default:true] //是否显示首页、尾页按钮 * |----- ellipsis: [string] [default:&#x27;...&#x27;] //有折叠时，折叠的文字 * |----- targetPageUrlPart: [string] [default:&#x27;?foo=bar&#x27;] //分页链接的前半部分 * |----- wordPrev: [string] [default:&#x27;&lt; 上一页&#x27;] //上一页按钮的文字 * |----- wordNext: [string] [default:&#x27;下一页 &gt;&#x27;] //下一页按钮的文字 * |----- wordFirst: [string] [default:&#x27;|&lt;&lt; 首 页&#x27;] //首页按钮的文字 * |----- wordLast: [string] [default:&#x27;末 页 &gt;&gt;|&#x27;] //尾页按钮的文字 * |----- whenLteOnePageIfReturnEmpty: [boolean] [default:false] //当小于等于1页时，是否返回空（否则返回分页html） * use: * var pageHtml= getPagination(563); * var pageHtml= getPagination(563,&#123; currentPage:12 &#125;); * var pageHtml= getPagination(563,&#123; currentPage:12, wordPrev:&#x27;上一页&#x27; &#125;); * ele.innerHTML= pageHtml; * console.log(pageHtml.totalPage); * console.log(pageHtml.selectHtml); **/function getPagination(totalItems,opts)&#123; function href(page)&#123; return def.ifNoLink?&#x27;javascript:;&#x27;:def.targetPageUrlPart+&#x27;&amp;page=&#x27;+page; &#125; if(isNaN(totalItems)) return &#x27;&#x27;; totalItems=Math.abs(+totalItems); var def=&#123; currentPage:1, pageSize:10, adjacents:2, ifNoLink:false, whenLteOnePageIfReturnEmpty:false, ifShowSelect:false, ifShowPrevNext:true, ifShowFirstLast:true, ellipsis:&#x27;...&#x27;, targetPageUrlPart:&#x27;?foo=bar&#x27;, wordPrev:&#x27;&lt; 上一页&#x27;, wordNext:&#x27;下一页 &gt;&#x27;, wordFirst:&#x27;|&lt;&lt; 首 页&#x27;, wordLast: &#x27;末 页 &gt;&gt;|&#x27; &#125;; if(opts)&#123; for(var i in opts) def[i]=opts[i]; &#125; var prev= def.currentPage - 1, next = def.currentPage + 1, lastpage = Math.ceil(totalItems/def.pageSize), lpm1 = lastpage - 1, pagination = &#x27;&#x27;, selects, counter, pts=&#x27;&lt;span class=&quot;pagepoints&quot;&gt;&#x27;+def.ellipsis+&#x27;&lt;/span&gt;&#x27;; selects=&#x27;&lt;em class=&quot;pageem pageem1&quot;&gt;跳到第&lt;/em&gt;&lt;select class=&quot;pageselect&quot; onchange=&quot;location.href=\\&#x27;&#x27;+def.targetPageUrlPart+&#x27;&amp;page=\\&#x27;+this.value;&quot;&gt;&#x27;; for(counter =1; counter&lt;=lastpage; counter++) selects += &#x27;&lt;option value=&quot;&#x27;+counter+&#x27;&quot; &#x27;+(counter === def.currentPage?&#x27; selected&#x27;:&#x27;&#x27;)+&#x27;&gt;&#x27;+counter+&#x27;&lt;/span&gt;&#x27;; selects += &#x27;&lt;/select&gt;&lt;em class=&quot;pageem pageem2&quot;&gt;页&lt;/em&gt;&#x27;; lastpage&lt;1 &amp;&amp; (selects=&#x27;&#x27;, lastpage=1); if(lastpage &gt; 1)&#123; pagination += &#x27;&lt;div class=&quot;pagination&quot;&gt;&#x27;; //first and previous button if(def.currentPage &gt;1 ) &#123; def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;a class=&quot;pagefirst&quot; data-page=&quot;1&quot; href=&quot;&#x27;+href(1)+&#x27;&quot;&gt;&#x27;+def.wordFirst+&#x27;&lt;/a&gt;&#x27;), def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;a class=&quot;pageprev&quot; data-page=&quot;&#x27;+prev+&#x27;&quot; href=&quot;&#x27;+href(prev)+&#x27;&quot;&gt;&#x27;+def.wordPrev+&#x27;&lt;/a&gt;&#x27;); &#125;else&#123; def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagefirst disabled&quot;&gt;&#x27;+def.wordFirst+&#x27;&lt;/span&gt;&#x27;), def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pageprev disabled&quot;&gt;&#x27;+def.wordPrev+&#x27;&lt;/span&gt;&#x27;); &#125; //pages if(lastpage &lt; 7 + (def.adjacents * 2)) &#123; for (counter = 1; counter &lt;= lastpage; counter++) &#123; if (counter === def.currentPage) pagination += &#x27;&lt;span class=&quot;current&quot;&gt;&#x27; + counter + &#x27;&lt;/span&gt;&#x27;; else pagination += &#x27;&lt;a data-page=&quot;&#x27;+counter+&#x27;&quot; href=&quot;&#x27; +href(counter)+ &#x27;&quot;&gt;&#x27; + counter + &#x27;&lt;/a&gt;&#x27;; &#125; //enough pages to hide some &#125;else if(lastpage &gt;= 7 + (def.adjacents * 2))&#123; //close to beginning only hide later pages if(def.currentPage &lt; 1 + (def.adjacents * 3))&#123; for(counter =1 ; counter&lt;=(4 + (def.adjacents * 2))-1; counter++)&#123; if(counter === def.currentPage) pagination += &#x27;&lt;span class=&quot;current&quot;&gt;&#x27;+counter+&#x27;&lt;/span&gt;&#x27;; else pagination += &#x27;&lt;a data-page=&quot;&#x27;+counter+&#x27;&quot; href=&quot;&#x27;+href(counter)+&#x27;&quot;&gt;&#x27;+counter+&#x27;&lt;/a&gt;&#x27;; &#125; pagination += pts, pagination += &#x27;&lt;a data-page=&quot;&#x27;+lpm1+&#x27;&quot; href=&quot;&#x27;+href(lpm1)+&#x27;&quot;&gt;&#x27;+lpm1+&#x27;&lt;/a&gt;&#x27;, pagination += &#x27;&lt;a data-page=&quot;&#x27;+lastpage+&#x27;&quot; href=&quot;&#x27;+href(lastpage)+&#x27;&quot;&gt;&#x27;+lastpage+&#x27;&lt;/a&gt;&#x27;; //in middle hide some front and some back &#125;else if(lastpage - (def.adjacents * 2) &gt; def.currentPage &amp;&amp; def.currentPage &gt; (def.adjacents * 2))&#123; pagination += &#x27;&lt;a data-page=&quot;1&quot; href=&quot;&#x27;+href(1)+&#x27;&quot;&gt;1&lt;/a&gt;&#x27;, pagination += &#x27;&lt;a data-page=&quot;2&quot; href=&quot;&#x27;+href(2)+&#x27;&quot;&gt;2&lt;/a&gt;&#x27;, pagination += pts; for(counter =def.currentPage - def.adjacents;counter&lt;=def.currentPage + def.adjacents;counter++)&#123; if(counter===def.currentPage) pagination += &#x27;&lt;span class=&quot;current&quot;&gt;&#x27;+counter+&#x27;&lt;/span&gt;&#x27;; else pagination += &#x27;&lt;a data-page=&quot;&#x27;+counter+&#x27;&quot; href=&quot;&#x27;+href(counter)+&#x27;&quot;&gt;&#x27;+counter+&#x27;&lt;/a&gt;&#x27;; &#125; pagination += pts, pagination += &#x27;&lt;a data-page=&quot;&#x27;+lpm1+&#x27;&quot; href=&quot;&#x27;+href(lpm1)+&#x27;&quot;&gt;&#x27;+lpm1+&#x27;&lt;/a&gt;&#x27;, pagination += &#x27;&lt;a data-page=&quot;&#x27;+lastpage+&#x27;&quot; href=&quot;&#x27;+href(lastpage)+&#x27;&quot;&gt;&#x27;+lastpage+&#x27;&lt;/a&gt;&#x27;; //close to end only hide early pages &#125;else&#123; pagination += &#x27;&lt;a data-page=&quot;1&quot; href=&quot;&#x27;+href(1)+&#x27;&quot;&gt;1&lt;/a&gt;&#x27;, pagination += &#x27;&lt;a data-page=&quot;2&quot; href=&quot;&#x27;+href(2)+&#x27;&quot;&gt;2&lt;/a&gt;&#x27;, pagination += pts; for(counter = (lastpage - (1 + (def.adjacents * 3))); counter&lt;=lastpage; counter++)&#123; if(counter === def.currentPage) pagination += &#x27;&lt;span class=&quot;current&quot;&gt;&#x27;+counter+&#x27;&lt;/span&gt;&#x27;; else pagination += &#x27;&lt;a data-page=&quot;&#x27;+counter+&#x27;&quot; href=&quot;&#x27;+href(counter)+&#x27;&quot;&gt;&#x27;+counter+&#x27;&lt;/a&gt;&#x27;; &#125; &#125; &#125; //last and next button if(def.currentPage &lt; lastpage)&#123; def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;a class=&quot;pagenext&quot; data-page=&quot;&#x27;+next+&#x27;&quot; href=&quot;&#x27;+href(next)+&#x27;&quot;&gt;&#x27;+def.wordNext+&#x27;&lt;/a&gt;&#x27;); def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;a class=&quot;pagelast&quot; data-page=&quot;&#x27;+lastpage+&#x27;&quot; href=&quot;&#x27;+href(lastpage)+&#x27;&quot;&gt;&#x27;+def.wordLast+&#x27;&lt;/a&gt;&#x27;); &#125;else&#123; def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagenext disabled&quot;&gt;&#x27;+def.wordNext+&#x27;&lt;/span&gt;&#x27;); def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagelast disabled&quot;&gt;&#x27;+def.wordLast+&#x27;&lt;/span&gt;&#x27;); &#125; def.ifShowSelect &amp;&amp; (pagination += selects); pagination += &#x27;&lt;/div&gt;&#x27;; &#125; else if(lastpage===1)&#123; if (!def.whenLteOnePageIfReturnEmpty) &#123; pagination += &#x27;&lt;div class=&quot;pagination&quot;&gt;&#x27;; def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagefirst disabled&quot;&gt;&#x27; + def.wordFirst + &#x27;&lt;/span&gt;&#x27;); def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pageprev disabled&quot;&gt;&#x27; + def.wordPrev + &#x27;&lt;/span&gt;&#x27;); pagination += &#x27;&lt;span class=&quot;current&quot;&gt;1&lt;/span&gt;&#x27;; def.ifShowPrevNext &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagenext disabled&quot;&gt;&#x27; + def.wordNext + &#x27;&lt;/span&gt;&#x27;); def.ifShowFirstLast &amp;&amp; (pagination += &#x27;&lt;span class=&quot;pagelast disabled&quot;&gt;&#x27; + def.wordLast + &#x27;&lt;/span&gt;&#x27;); pagination += &#x27;&lt;/div&gt;&#x27;; &#125; &#125; var ret=new String(pagination); ret.totalPage=lastpage; ret.selectHtml=selects; ret.currentPage=def.currentPage; ret.pageSize=def.pageSize; ret.totalItems=totalItems; return ret;&#125; var pages=getPagination(20,&#123;currentPage:1,ifShowSelect:true&#125;); //console.log(&#x27;&#x27;+pages); //console.log(pages.totalPage); //console.log(pages.selectHtml); document.getElementById(&#x27;a&#x27;).innerHTML=pages;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"js","slug":"js","permalink":"https://zuitaibai.github.io/blog/tags/js/"},{"name":"分页","slug":"分页","permalink":"https://zuitaibai.github.io/blog/tags/%E5%88%86%E9%A1%B5/"}],"categories":[{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/categories/Ecmascript/"}]}],"categories":[{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/categories/Ecmascript/"},{"name":"前端框架","slug":"前端框架","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"angular","slug":"前端框架/angular","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/angular/"},{"name":"服务端","slug":"服务端","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"nodejs","slug":"服务端/nodejs","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nodejs/"},{"name":"nginx","slug":"服务端/nginx","permalink":"https://zuitaibai.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nginx/"},{"name":"react","slug":"前端框架/react","permalink":"https://zuitaibai.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/react/"},{"name":"常用工具和插件","slug":"常用工具和插件","permalink":"https://zuitaibai.github.io/blog/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8F%92%E4%BB%B6/"},{"name":"IDE","slug":"常用工具和插件/IDE","permalink":"https://zuitaibai.github.io/blog/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8F%92%E4%BB%B6/IDE/"},{"name":"开发流程","slug":"开发流程","permalink":"https://zuitaibai.github.io/blog/categories/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"},{"name":"git","slug":"开发流程/git","permalink":"https://zuitaibai.github.io/blog/categories/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/git/"},{"name":"计算机基础","slug":"计算机基础","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编码","slug":"计算机基础/编码","permalink":"https://zuitaibai.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A0%81/"},{"name":"网络和通讯","slug":"网络和通讯","permalink":"https://zuitaibai.github.io/blog/categories/%E7%BD%91%E7%BB%9C%E5%92%8C%E9%80%9A%E8%AE%AF/"},{"name":"移动端","slug":"移动端","permalink":"https://zuitaibai.github.io/blog/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"},{"name":"Html","slug":"Html","permalink":"https://zuitaibai.github.io/blog/categories/Html/"},{"name":"Css","slug":"Css","permalink":"https://zuitaibai.github.io/blog/categories/Css/"}],"tags":[{"name":"新特性","slug":"新特性","permalink":"https://zuitaibai.github.io/blog/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"},{"name":"Ecmascript","slug":"Ecmascript","permalink":"https://zuitaibai.github.io/blog/tags/Ecmascript/"},{"name":"Es6","slug":"Es6","permalink":"https://zuitaibai.github.io/blog/tags/Es6/"},{"name":"Es7","slug":"Es7","permalink":"https://zuitaibai.github.io/blog/tags/Es7/"},{"name":"Es8","slug":"Es8","permalink":"https://zuitaibai.github.io/blog/tags/Es8/"},{"name":"Es9","slug":"Es9","permalink":"https://zuitaibai.github.io/blog/tags/Es9/"},{"name":"Es10","slug":"Es10","permalink":"https://zuitaibai.github.io/blog/tags/Es10/"},{"name":"Es11","slug":"Es11","permalink":"https://zuitaibai.github.io/blog/tags/Es11/"},{"name":"Es12","slug":"Es12","permalink":"https://zuitaibai.github.io/blog/tags/Es12/"},{"name":"Es13","slug":"Es13","permalink":"https://zuitaibai.github.io/blog/tags/Es13/"},{"name":"ng","slug":"ng","permalink":"https://zuitaibai.github.io/blog/tags/ng/"},{"name":"angular","slug":"angular","permalink":"https://zuitaibai.github.io/blog/tags/angular/"},{"name":"calc","slug":"calc","permalink":"https://zuitaibai.github.io/blog/tags/calc/"},{"name":"paging","slug":"paging","permalink":"https://zuitaibai.github.io/blog/tags/paging/"},{"name":"RadioGroup","slug":"RadioGroup","permalink":"https://zuitaibai.github.io/blog/tags/RadioGroup/"},{"name":"CheckboxGroup","slug":"CheckboxGroup","permalink":"https://zuitaibai.github.io/blog/tags/CheckboxGroup/"},{"name":"angular-cli","slug":"angular-cli","permalink":"https://zuitaibai.github.io/blog/tags/angular-cli/"},{"name":"命令","slug":"命令","permalink":"https://zuitaibai.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"},{"name":"nodejs","slug":"nodejs","permalink":"https://zuitaibai.github.io/blog/tags/nodejs/"},{"name":"路由","slug":"路由","permalink":"https://zuitaibai.github.io/blog/tags/%E8%B7%AF%E7%94%B1/"},{"name":"nginx","slug":"nginx","permalink":"https://zuitaibai.github.io/blog/tags/nginx/"},{"name":"conf","slug":"conf","permalink":"https://zuitaibai.github.io/blog/tags/conf/"},{"name":"react-router","slug":"react-router","permalink":"https://zuitaibai.github.io/blog/tags/react-router/"},{"name":"react","slug":"react","permalink":"https://zuitaibai.github.io/blog/tags/react/"},{"name":"router","slug":"router","permalink":"https://zuitaibai.github.io/blog/tags/router/"},{"name":"npm","slug":"npm","permalink":"https://zuitaibai.github.io/blog/tags/npm/"},{"name":"vim","slug":"vim","permalink":"https://zuitaibai.github.io/blog/tags/vim/"},{"name":"git","slug":"git","permalink":"https://zuitaibai.github.io/blog/tags/git/"},{"name":"版本控制","slug":"版本控制","permalink":"https://zuitaibai.github.io/blog/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"},{"name":"速查表","slug":"速查表","permalink":"https://zuitaibai.github.io/blog/tags/%E9%80%9F%E6%9F%A5%E8%A1%A8/"},{"name":"Unicode","slug":"Unicode","permalink":"https://zuitaibai.github.io/blog/tags/Unicode/"},{"name":"字体","slug":"字体","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E4%BD%93/"},{"name":"HTTP状态码","slug":"HTTP状态码","permalink":"https://zuitaibai.github.io/blog/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"},{"name":"移动端","slug":"移动端","permalink":"https://zuitaibai.github.io/blog/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"},{"name":"特殊符号","slug":"特殊符号","permalink":"https://zuitaibai.github.io/blog/tags/%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/"},{"name":"字符集","slug":"字符集","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"},{"name":"字符编码","slug":"字符编码","permalink":"https://zuitaibai.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"},{"name":"js","slug":"js","permalink":"https://zuitaibai.github.io/blog/tags/js/"},{"name":"动画","slug":"动画","permalink":"https://zuitaibai.github.io/blog/tags/%E5%8A%A8%E7%94%BB/"},{"name":"拖拽","slug":"拖拽","permalink":"https://zuitaibai.github.io/blog/tags/%E6%8B%96%E6%8B%BD/"},{"name":"drag","slug":"drag","permalink":"https://zuitaibai.github.io/blog/tags/drag/"},{"name":"表格","slug":"表格","permalink":"https://zuitaibai.github.io/blog/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"table","slug":"table","permalink":"https://zuitaibai.github.io/blog/tags/table/"},{"name":"一像素","slug":"一像素","permalink":"https://zuitaibai.github.io/blog/tags/%E4%B8%80%E5%83%8F%E7%B4%A0/"},{"name":"css小技巧","slug":"css小技巧","permalink":"https://zuitaibai.github.io/blog/tags/css%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"分页","slug":"分页","permalink":"https://zuitaibai.github.io/blog/tags/%E5%88%86%E9%A1%B5/"}]}